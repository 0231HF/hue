/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.cloudera.beeswax.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class WrongQueryTypeException extends Exception implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("WrongQueryTypeException");
  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)1);
  private static final TField EXPECTED_FIELD_DESC = new TField("expected", TType.I32, (short)2);
  private static final TField RECEIVED_FIELD_DESC = new TField("received", TType.I32, (short)3);

  public String query;
  public static final int QUERY = 1;
  public int expected;
  public static final int EXPECTED = 2;
  public int received;
  public static final int RECEIVED = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean expected = false;
    public boolean received = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(QUERY, new FieldMetaData("query", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(EXPECTED, new FieldMetaData("expected", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(RECEIVED, new FieldMetaData("received", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(WrongQueryTypeException.class, metaDataMap);
  }

  public WrongQueryTypeException() {
  }

  public WrongQueryTypeException(
    String query,
    int expected,
    int received)
  {
    this();
    this.query = query;
    this.expected = expected;
    this.__isset.expected = true;
    this.received = received;
    this.__isset.received = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WrongQueryTypeException(WrongQueryTypeException other) {
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    __isset.expected = other.__isset.expected;
    this.expected = other.expected;
    __isset.received = other.__isset.received;
    this.received = other.received;
  }

  @Override
  public WrongQueryTypeException clone() {
    return new WrongQueryTypeException(this);
  }

  public String getQuery() {
    return this.query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public void unsetQuery() {
    this.query = null;
  }

  // Returns true if field query is set (has been asigned a value) and false otherwise
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getExpected() {
    return this.expected;
  }

  public void setExpected(int expected) {
    this.expected = expected;
    this.__isset.expected = true;
  }

  public void unsetExpected() {
    this.__isset.expected = false;
  }

  // Returns true if field expected is set (has been asigned a value) and false otherwise
  public boolean isSetExpected() {
    return this.__isset.expected;
  }

  public void setExpectedIsSet(boolean value) {
    this.__isset.expected = value;
  }

  public int getReceived() {
    return this.received;
  }

  public void setReceived(int received) {
    this.received = received;
    this.__isset.received = true;
  }

  public void unsetReceived() {
    this.__isset.received = false;
  }

  // Returns true if field received is set (has been asigned a value) and false otherwise
  public boolean isSetReceived() {
    return this.__isset.received;
  }

  public void setReceivedIsSet(boolean value) {
    this.__isset.received = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case EXPECTED:
      if (value == null) {
        unsetExpected();
      } else {
        setExpected((Integer)value);
      }
      break;

    case RECEIVED:
      if (value == null) {
        unsetReceived();
      } else {
        setReceived((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case QUERY:
      return getQuery();

    case EXPECTED:
      return getExpected();

    case RECEIVED:
      return getReceived();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case QUERY:
      return isSetQuery();
    case EXPECTED:
      return isSetExpected();
    case RECEIVED:
      return isSetReceived();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WrongQueryTypeException)
      return this.equals((WrongQueryTypeException)that);
    return false;
  }

  public boolean equals(WrongQueryTypeException that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_expected = true;
    boolean that_present_expected = true;
    if (this_present_expected || that_present_expected) {
      if (!(this_present_expected && that_present_expected))
        return false;
      if (this.expected != that.expected)
        return false;
    }

    boolean this_present_received = true;
    boolean that_present_received = true;
    if (this_present_received || that_present_received) {
      if (!(this_present_received && that_present_received))
        return false;
      if (this.received != that.received)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_query = true && (isSetQuery());
    builder.append(present_query);
    if (present_query)
      builder.append(query);

    boolean present_expected = true;
    builder.append(present_expected);
    if (present_expected)
      builder.append(expected);

    boolean present_received = true;
    builder.append(present_received);
    if (present_received)
      builder.append(received);

    return builder.toHashCode();
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case QUERY:
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPECTED:
          if (field.type == TType.I32) {
            this.expected = iprot.readI32();
            this.__isset.expected = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECEIVED:
          if (field.type == TType.I32) {
            this.received = iprot.readI32();
            this.__isset.received = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      oprot.writeFieldBegin(QUERY_FIELD_DESC);
      oprot.writeString(this.query);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPECTED_FIELD_DESC);
    oprot.writeI32(this.expected);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RECEIVED_FIELD_DESC);
    oprot.writeI32(this.received);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WrongQueryTypeException(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expected:");
    String expected_name = QueryType.VALUES_TO_NAMES.get(this.expected);
    if (expected_name != null) {
      sb.append(expected_name);
      sb.append(" (");
    }
    sb.append(this.expected);
    if (expected_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("received:");
    String received_name = QueryType.VALUES_TO_NAMES.get(this.received);
    if (received_name != null) {
      sb.append(received_name);
      sb.append(" (");
    }
    sb.append(this.received);
    if (received_name != null) {
      sb.append(")");
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetExpected() && !QueryType.VALID_VALUES.contains(expected)){
      throw new TProtocolException("The field 'expected' has been assigned the invalid value " + expected);
    }
    if (isSetReceived() && !QueryType.VALID_VALUES.contains(received)){
      throw new TProtocolException("The field 'received' has been assigned the invalid value " + received);
    }
  }

}

