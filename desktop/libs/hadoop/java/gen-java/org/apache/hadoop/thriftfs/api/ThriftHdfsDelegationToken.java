/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftHdfsDelegationToken implements TBase<ThriftHdfsDelegationToken._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftHdfsDelegationToken> {
  private static final TStruct STRUCT_DESC = new TStruct("ThriftHdfsDelegationToken");

  private static final TField DELEGATION_TOKEN_BYTES_FIELD_DESC = new TField("delegationTokenBytes", TType.STRING, (short)1);

  public byte[] delegationTokenBytes;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    DELEGATION_TOKEN_BYTES((short)1, "delegationTokenBytes");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.DELEGATION_TOKEN_BYTES, new FieldMetaData("delegationTokenBytes", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThriftHdfsDelegationToken.class, metaDataMap);
  }

  public ThriftHdfsDelegationToken() {
  }

  public ThriftHdfsDelegationToken(
    byte[] delegationTokenBytes)
  {
    this();
    this.delegationTokenBytes = delegationTokenBytes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftHdfsDelegationToken(ThriftHdfsDelegationToken other) {
    if (other.isSetDelegationTokenBytes()) {
      this.delegationTokenBytes = new byte[other.delegationTokenBytes.length];
      System.arraycopy(other.delegationTokenBytes, 0, delegationTokenBytes, 0, other.delegationTokenBytes.length);
    }
  }

  public ThriftHdfsDelegationToken deepCopy() {
    return new ThriftHdfsDelegationToken(this);
  }

  @Deprecated
  public ThriftHdfsDelegationToken clone() {
    return new ThriftHdfsDelegationToken(this);
  }

  public byte[] getDelegationTokenBytes() {
    return this.delegationTokenBytes;
  }

  public ThriftHdfsDelegationToken setDelegationTokenBytes(byte[] delegationTokenBytes) {
    this.delegationTokenBytes = delegationTokenBytes;
    return this;
  }

  public void unsetDelegationTokenBytes() {
    this.delegationTokenBytes = null;
  }

  /** Returns true if field delegationTokenBytes is set (has been asigned a value) and false otherwise */
  public boolean isSetDelegationTokenBytes() {
    return this.delegationTokenBytes != null;
  }

  public void setDelegationTokenBytesIsSet(boolean value) {
    if (!value) {
      this.delegationTokenBytes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DELEGATION_TOKEN_BYTES:
      if (value == null) {
        unsetDelegationTokenBytes();
      } else {
        setDelegationTokenBytes((byte[])value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DELEGATION_TOKEN_BYTES:
      return getDelegationTokenBytes();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case DELEGATION_TOKEN_BYTES:
      return isSetDelegationTokenBytes();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftHdfsDelegationToken)
      return this.equals((ThriftHdfsDelegationToken)that);
    return false;
  }

  public boolean equals(ThriftHdfsDelegationToken that) {
    if (that == null)
      return false;

    boolean this_present_delegationTokenBytes = true && this.isSetDelegationTokenBytes();
    boolean that_present_delegationTokenBytes = true && that.isSetDelegationTokenBytes();
    if (this_present_delegationTokenBytes || that_present_delegationTokenBytes) {
      if (!(this_present_delegationTokenBytes && that_present_delegationTokenBytes))
        return false;
      if (!java.util.Arrays.equals(this.delegationTokenBytes, that.delegationTokenBytes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftHdfsDelegationToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftHdfsDelegationToken typedOther = (ThriftHdfsDelegationToken)other;

    lastComparison = Boolean.valueOf(isSetDelegationTokenBytes()).compareTo(isSetDelegationTokenBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(delegationTokenBytes, typedOther.delegationTokenBytes);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case DELEGATION_TOKEN_BYTES:
            if (field.type == TType.STRING) {
              this.delegationTokenBytes = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.delegationTokenBytes != null) {
      oprot.writeFieldBegin(DELEGATION_TOKEN_BYTES_FIELD_DESC);
      oprot.writeBinary(this.delegationTokenBytes);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftHdfsDelegationToken(");
    boolean first = true;

    sb.append("delegationTokenBytes:");
    if (this.delegationTokenBytes == null) {
      sb.append("null");
    } else {
        int __delegationTokenBytes_size = Math.min(this.delegationTokenBytes.length, 128);
        for (int i = 0; i < __delegationTokenBytes_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.delegationTokenBytes[i]).length() > 1 ? Integer.toHexString(this.delegationTokenBytes[i]).substring(Integer.toHexString(this.delegationTokenBytes[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.delegationTokenBytes[i]).toUpperCase());
        }
        if (this.delegationTokenBytes.length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

