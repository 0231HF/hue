/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.jobtracker.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftJobQueueList implements TBase<ThriftJobQueueList._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftJobQueueList> {
  private static final TStruct STRUCT_DESC = new TStruct("ThriftJobQueueList");

  private static final TField QUEUES_FIELD_DESC = new TField("queues", TType.LIST, (short)1);

  public List<ThriftJobQueueInfo> queues;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUEUES((short)1, "queues");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.QUEUES, new FieldMetaData("queues", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ThriftJobQueueInfo.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThriftJobQueueList.class, metaDataMap);
  }

  public ThriftJobQueueList() {
  }

  public ThriftJobQueueList(
    List<ThriftJobQueueInfo> queues)
  {
    this();
    this.queues = queues;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftJobQueueList(ThriftJobQueueList other) {
    if (other.isSetQueues()) {
      List<ThriftJobQueueInfo> __this__queues = new ArrayList<ThriftJobQueueInfo>();
      for (ThriftJobQueueInfo other_element : other.queues) {
        __this__queues.add(new ThriftJobQueueInfo(other_element));
      }
      this.queues = __this__queues;
    }
  }

  public ThriftJobQueueList deepCopy() {
    return new ThriftJobQueueList(this);
  }

  @Deprecated
  public ThriftJobQueueList clone() {
    return new ThriftJobQueueList(this);
  }

  public int getQueuesSize() {
    return (this.queues == null) ? 0 : this.queues.size();
  }

  public java.util.Iterator<ThriftJobQueueInfo> getQueuesIterator() {
    return (this.queues == null) ? null : this.queues.iterator();
  }

  public void addToQueues(ThriftJobQueueInfo elem) {
    if (this.queues == null) {
      this.queues = new ArrayList<ThriftJobQueueInfo>();
    }
    this.queues.add(elem);
  }

  public List<ThriftJobQueueInfo> getQueues() {
    return this.queues;
  }

  public ThriftJobQueueList setQueues(List<ThriftJobQueueInfo> queues) {
    this.queues = queues;
    return this;
  }

  public void unsetQueues() {
    this.queues = null;
  }

  /** Returns true if field queues is set (has been asigned a value) and false otherwise */
  public boolean isSetQueues() {
    return this.queues != null;
  }

  public void setQueuesIsSet(boolean value) {
    if (!value) {
      this.queues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUES:
      if (value == null) {
        unsetQueues();
      } else {
        setQueues((List<ThriftJobQueueInfo>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUES:
      return getQueues();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case QUEUES:
      return isSetQueues();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftJobQueueList)
      return this.equals((ThriftJobQueueList)that);
    return false;
  }

  public boolean equals(ThriftJobQueueList that) {
    if (that == null)
      return false;

    boolean this_present_queues = true && this.isSetQueues();
    boolean that_present_queues = true && that.isSetQueues();
    if (this_present_queues || that_present_queues) {
      if (!(this_present_queues && that_present_queues))
        return false;
      if (!this.queues.equals(that.queues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftJobQueueList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftJobQueueList typedOther = (ThriftJobQueueList)other;

    lastComparison = Boolean.valueOf(isSetQueues()).compareTo(isSetQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(queues, typedOther.queues);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case QUEUES:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.queues = new ArrayList<ThriftJobQueueInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ThriftJobQueueInfo _elem2;
                  _elem2 = new ThriftJobQueueInfo();
                  _elem2.read(iprot);
                  this.queues.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.queues != null) {
      oprot.writeFieldBegin(QUEUES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.queues.size()));
        for (ThriftJobQueueInfo _iter3 : this.queues)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftJobQueueList(");
    boolean first = true;

    sb.append("queues:");
    if (this.queues == null) {
      sb.append("null");
    } else {
      sb.append(this.queues);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

