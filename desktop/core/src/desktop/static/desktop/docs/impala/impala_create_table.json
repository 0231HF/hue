{"body":"<div><p>\n      Creates a new table and specifies its characteristics. While creating a table, you\n      optionally specify aspects such as:\n    </p><ul><li>\n        Whether the table is internal or external.\n      </li><li>\n        The columns and associated data types.\n      </li><li>\n        The columns used for physically partitioning the data.\n      </li><li>\n        The file format for data files.\n      </li><li>\n        The HDFS directory where the data files are located.\n      </li></ul><p id=\"../Impala/docs/topics/impala_create_table.xml_syntax_blurb\"><b>Syntax:</b></p><p>\n      The general syntax for creating a table and specifying its columns is as follows:\n    </p><p><b>Explicit column definitions:</b></p><div class=\"sql-docs-code-block\">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><br/>  (<span class=\"sql-docs-variable\">col_name</span><span class=\"sql-docs-variable\">data_type</span><br/>    [COMMENT '<span class=\"sql-docs-variable\">col_comment</span>']<br/>    [, ...]<br/>  )<br/>  [PARTITIONED BY (<span class=\"sql-docs-variable\">col_name</span><span class=\"sql-docs-variable\">data_type</span> [COMMENT '<span class=\"sql-docs-variable\">col_comment</span>'], ...)]<br/>  <span class=\"sql-docs-inline-code\">[SORT BY ([<span class=\"sql-docs-variable\">column</span> [, <span class=\"sql-docs-variable\">column</span> ...]])]</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  [ROW FORMAT <span class=\"sql-docs-variable\">row_format</span>]<br/>  [WITH SERDEPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>  [STORED AS <span class=\"sql-docs-variable\">file_format</span>]<br/>  [LOCATION '<span class=\"sql-docs-variable\">hdfs_path</span>']<br/>  <span class=\"sql-docs-inline-code\">[CACHED IN '<span class=\"sql-docs-variable\">pool_name</span>'</span><span class=\"sql-docs-inline-code\">[WITH REPLICATION = <span class=\"sql-docs-variable\">integer</span>]</span> | UNCACHED]<br/>  [TBLPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/></div><p><b>CREATE TABLE AS SELECT:</b></p><div class=\"sql-docs-code-block\">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] <span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><span class=\"sql-docs-inline-code\">[PARTITIONED BY (<span class=\"sql-docs-variable\">col_name</span>[, ...])]</span><span class=\"sql-docs-inline-code\">[SORT BY ([<span class=\"sql-docs-variable\">column</span> [, <span class=\"sql-docs-variable\">column</span> ...]])]</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  [ROW FORMAT <span class=\"sql-docs-variable\">row_format</span>]<br/>  [WITH SERDEPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>  <span class=\"sql-docs-inline-code\">[STORED AS <span class=\"sql-docs-variable\">ctas_file_format</span>]</span><br/>  [LOCATION '<span class=\"sql-docs-variable\">hdfs_path</span>']<br/>  <span class=\"sql-docs-inline-code\">  [CACHED IN '<span class=\"sql-docs-variable\">pool_name</span>'</span><span class=\"sql-docs-inline-code\">[WITH REPLICATION = <span class=\"sql-docs-variable\">integer</span>]</span> | UNCACHED]<br/>  [TBLPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>AS<br/>  <span class=\"sql-docs-variable\">select_statement</span></div><div class=\"sql-docs-code-block\">primitive_type:<br/>    TINYINT<br/>  | SMALLINT<br/>  | INT<br/>  | BIGINT<br/>  | BOOLEAN<br/>  | FLOAT<br/>  | DOUBLE<br/>  <span class=\"sql-docs-inline-code\">| DECIMAL</span><br/>  | STRING<br/>  <span class=\"sql-docs-inline-code\">| CHAR</span><span class=\"sql-docs-inline-code\">| VARCHAR</span><br/>  | TIMESTAMP<br/><br/><span class=\"sql-docs-inline-code\">complex_type:<br/>    struct_type<br/>  | array_type<br/>  | map_type<br/><br/>struct_type: STRUCT < <span class=\"sql-docs-variable\">name</span> : <span class=\"sql-docs-variable\">primitive_or_complex_type</span> [COMMENT '<span class=\"sql-docs-variable\">comment_string</span>'], ... ><br/><br/>array_type: ARRAY < <span class=\"sql-docs-variable\">primitive_or_complex_type</span> ><br/><br/>map_type: MAP < <span class=\"sql-docs-variable\">primitive_type</span>, <span class=\"sql-docs-variable\">primitive_or_complex_type</span> ><br/></span><br/>row_format:<br/>  DELIMITED [FIELDS TERMINATED BY '<span class=\"sql-docs-variable\">char</span>' [ESCAPED BY '<span class=\"sql-docs-variable\">char</span>']]<br/>  [LINES TERMINATED BY '<span class=\"sql-docs-variable\">char</span>']<br/><br/>file_format:<br/>    PARQUET<br/>  | TEXTFILE<br/>  | AVRO<br/>  | SEQUENCEFILE<br/>  | RCFILE<br/><br/><span class=\"sql-docs-inline-code\">ctas_file_format:<br/>    PARQUET<br/>  | TEXTFILE</span></div><p><b>Column definitions inferred from data file:</b></p><div class=\"sql-docs-code-block\">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><br/>  LIKE PARQUET '<span class=\"sql-docs-variable\">hdfs_path_of_parquet_file</span>'<br/>  [PARTITIONED BY (<span class=\"sql-docs-variable\">col_name</span><span class=\"sql-docs-variable\">data_type</span> [COMMENT '<span class=\"sql-docs-variable\">col_comment</span>'], ...)]<br/>  <span class=\"sql-docs-inline-code\">[SORT BY ([<span class=\"sql-docs-variable\">column</span> [, <span class=\"sql-docs-variable\">column</span> ...]])]</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  [ROW FORMAT <span class=\"sql-docs-variable\">row_format</span>]<br/>  [WITH SERDEPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>  [STORED AS <span class=\"sql-docs-variable\">file_format</span>]<br/>  [LOCATION '<span class=\"sql-docs-variable\">hdfs_path</span>']<br/><span class=\"sql-docs-inline-code\">  [CACHED IN '<span class=\"sql-docs-variable\">pool_name</span>'</span><span class=\"sql-docs-inline-code\">[WITH REPLICATION = <span class=\"sql-docs-variable\">integer</span>]</span> | UNCACHED]<br/>  [TBLPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>data_type:<br/>    <span class=\"sql-docs-variable\">primitive_type</span><br/>  | array_type<br/>  | map_type<br/>  | struct_type<br/></div><p><b>Kudu tables:</b></p><div class=\"sql-docs-code-block\">CREATE TABLE [IF NOT EXISTS] [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><br/>  (<span class=\"sql-docs-variable\">col_name</span><span class=\"sql-docs-variable\">data_type</span><span class=\"sql-docs-inline-code\">[<span class=\"sql-docs-variable\">kudu_column_attribute</span> ...]</span><br/>    [COMMENT '<span class=\"sql-docs-variable\">col_comment</span>']<br/>    [, ...]<br/>    [PRIMARY KEY (<span class=\"sql-docs-variable\">col_name</span>[, ...])]<br/>  )<br/>  <span class=\"sql-docs-inline-code\">[PARTITION BY <span class=\"sql-docs-variable\">kudu_partition_clause</span>]</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/></div><p><b>Kudu column attributes:</b><div class=\"sql-docs-code-block\"><br/>  PRIMARY KEY<br/>| [NOT] NULL<br/>| ENCODING <span class=\"sql-docs-variable\">codec</span><br/>| COMPRESSION <span class=\"sql-docs-variable\">algorithm</span><br/>| DEFAULT <span class=\"sql-docs-variable\">constant</span><br/>| BLOCK_SIZE <span class=\"sql-docs-variable\">number</span></div></p><p><b>kudu_partition_clause:</b><div class=\"sql-docs-code-block\"><br/>kudu_partition_clause ::= [ <span class=\"sql-docs-variable\">hash_clause</span> [, ...]] [, <span class=\"sql-docs-variable\">range_clause</span> ]<br/><br/>hash_clause ::=<br/>  HASH [ (<span class=\"sql-docs-variable\">pk_col</span> [, ...]) ]<br/>    PARTITIONS <span class=\"sql-docs-variable\">n</span><br/><br/>range_clause ::=<br/>  RANGE [ (<span class=\"sql-docs-variable\">pk_col</span> [, ...]) ]<br/>  (<br/>    {<br/>      PARTITION <span class=\"sql-docs-variable\">constant_expression</span><span class=\"sql-docs-variable\">range_comparison_operator</span> VALUES <span class=\"sql-docs-variable\">range_comparison_operator</span><span class=\"sql-docs-variable\">constant_expression</span><br/>      | PARTITION VALUE = <span class=\"sql-docs-variable\">constant_expression_or_tuple</span><br/>    }<br/>   [, ...]<br/>  )<br/><br/>range_comparison_operator ::= { < | <= }<br/></div></p><p><b>External Kudu tables:</b></p><div class=\"sql-docs-code-block\">CREATE EXTERNAL TABLE [IF NOT EXISTS] [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES ('kudu.table_name'='<span class=\"sql-docs-variable\">internal_kudu_name</span>')]<br/></div><p><b>CREATE TABLE AS SELECT for Kudu tables:</b></p><div class=\"sql-docs-code-block\">CREATE TABLE [IF NOT EXISTS] <span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><br/>  [PRIMARY KEY (<span class=\"sql-docs-variable\">col_name</span>[, ...])]<br/>  [PARTITION BY <span class=\"sql-docs-variable\">kudu_partition_clause</span>]<br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  STORED AS KUDU<br/>  [TBLPROPERTIES ('<span class=\"sql-docs-variable\">key1</span>'='<span class=\"sql-docs-variable\">value1</span>', '<span class=\"sql-docs-variable\">key2</span>'='<span class=\"sql-docs-variable\">value2</span>', ...)]<br/>AS<br/>  <span class=\"sql-docs-variable\">select_statement</span></div><p id=\"../Impala/docs/topics/impala_create_table.xml_ddl_blurb\"><b>Statement type:</b> DDL\n      </p><p><b>Column definitions:</b></p><p>\n      Depending on the form of the <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement, the column\n      definitions are required or not allowed.\n    </p><p>\n      With the <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> and <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span>\n      syntax, you do not specify the columns at all; the column names and types are derived from\n      the source table, query, or data file.\n    </p><p>\n      With the basic <span class=\"sql-docs-inline-code\">CREATE TABLE</span> syntax, you must list one or more columns,\n      its name, type, and optionally a comment, in addition to any columns used as partitioning\n      keys. There is one exception where the column list is not required: when creating an Avro\n      table with the <span class=\"sql-docs-inline-code\">STORED AS AVRO</span> clause, you can omit the list of columns\n      and specify the same metadata as part of the <span class=\"sql-docs-inline-code\">TBLPROPERTIES</span> clause.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_complex_types_blurb\"><b>Complex type considerations:</b></p><p>\n      The Impala complex types (<span class=\"sql-docs-inline-code\">STRUCT</span>, <span class=\"sql-docs-inline-code\">ARRAY</span>, or\n      <span class=\"sql-docs-inline-code\">MAP</span>) are available in Impala 2.3 and higher.\n      Because you can nest these types (for example, to make an array of maps or a struct with\n      an array field), these types are also sometimes referred to as nested types. See\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for usage details.\n    </p><p>\n      Impala can create tables containing complex type columns, with any supported file format.\n      Because currently Impala can only query complex type columns in Parquet tables, creating\n      tables with complex type columns and other file formats such as text is of limited use.\n      For example, you might create a text table including some columns with complex types with\n      Impala, and use Hive as part of your to ingest the nested type data and copy it to an\n      identical Parquet table. Or you might create a partitioned table containing complex type\n      columns using one file format, and use <span class=\"sql-docs-inline-code\">ALTER TABLE</span> to change the file\n      format of individual partitions to Parquet; Impala can then query only the Parquet-format\n      partitions in that table.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_complex_types_partitioning\">\n        Partitioned tables can contain complex type columns.\n        All the partition key columns must be scalar types.\n      </p><p><b>Internal and external tables (EXTERNAL and LOCATION clauses):</b></p><p>\n      By default, Impala creates an <q>internal</q> table, where Impala manages the underlying\n      data files for the table, and physically deletes the data files when you drop the table.\n      If you specify the <span class=\"sql-docs-inline-code\">EXTERNAL</span> clause, Impala treats the table as an\n      <q>external</q> table, where the data files are typically produced outside Impala and\n      queried from their original locations in HDFS, and Impala leaves the data files in place\n      when you drop the table. For details about internal and external tables, see\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#tables\">Overview of Impala Tables</a>.\n    </p><p>\n      Typically, for an external table you include a <span class=\"sql-docs-inline-code\">LOCATION</span> clause to specify\n      the path to the HDFS directory where Impala reads and writes files for the table. For\n      example, if your data pipeline produces Parquet files in the HDFS directory\n      <span class=\"sql-docs-variable\">/user/etl/destination</span>, you might create an external table as follows:\n    </p><div class=\"sql-docs-code-block\">CREATE EXTERNAL TABLE external_parquet (c1 INT, c2 STRING, c3 TIMESTAMP)<br/>  STORED AS PARQUET LOCATION '/user/etl/destination';<br/></div><p>\n      Although the <span class=\"sql-docs-inline-code\">EXTERNAL</span> and <span class=\"sql-docs-inline-code\">LOCATION</span> clauses are often\n      specified together, <span class=\"sql-docs-inline-code\">LOCATION</span> is optional for external tables, and you can\n      also specify <span class=\"sql-docs-inline-code\">LOCATION</span> for internal tables. The difference is all about\n      whether Impala <q>takes control</q> of the underlying data files and moves them when you\n      rename the table, or deletes them when you drop the table. For more about internal and\n      external tables and how they interact with the <span class=\"sql-docs-inline-code\">LOCATION</span> attribute, see\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#tables\">Overview of Impala Tables</a>.\n    </p><p><b>Partitioned tables (PARTITIONED BY clause):</b></p><p>\n      The <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause divides the data files based on the values from\n      one or more specified columns. Impala queries can use the partition metadata to minimize\n      the amount of data that is read from disk or transmitted across the network, particularly\n      during join queries. For details about partitioning, see\n      <span>partitioning</span>.\n    </p><div class=\"sql-docs-note\"><p>\n        All Kudu tables require partitioning, which involves different syntax than non-Kudu\n        tables. See the <span class=\"sql-docs-inline-code\">PARTITION BY</span> clause, rather than <span class=\"sql-docs-inline-code\">PARTITIONED\n        BY</span>, for Kudu tables.\n      </p><p>\n        In Impala 2.10 and higher, the <span class=\"sql-docs-inline-code\">PARTITION BY</span>\n        clause is optional for Kudu tables. If the clause is omitted, Impala automatically\n        constructs a single partition that is not connected to any column. Because such a\n        table cannot take advantage of Kudu features for parallelized queries and\n        query optimizations, omitting the <span class=\"sql-docs-inline-code\">PARTITION BY</span> clause is only\n        appropriate for small lookup tables.\n      </p></div><p>\n      Prior to Impala 2.5, you could use a partitioned table as the\n      source and copy data from it, but could not specify any partitioning clauses for the new\n      table. In Impala 2.5 and higher, you can now use the\n      <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause with a <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>\n      statement. See the examples under the following discussion of the <span class=\"sql-docs-inline-code\">CREATE TABLE AS\n      SELECT</span> syntax variation.\n    </p><p><b>Sorted tables (SORT BY clause):</b></p><p>\n      The optional <span class=\"sql-docs-inline-code\">SORT BY</span> clause lets you specify zero or more columns\n      that are sorted in the data files created by each Impala <span class=\"sql-docs-inline-code\">INSERT</span> or\n      <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> operation. Creating data files that are\n      sorted is most useful for Parquet tables, where the metadata stored inside each file includes\n      the minimum and maximum values for each column in the file. (The statistics apply to each row group\n      within the file; for simplicity, Impala writes a single row group in each file.) Grouping\n      data values together in relatively narrow ranges within each data file makes it possible\n      for Impala to quickly skip over data files that do not contain value ranges indicated in\n      the <span class=\"sql-docs-inline-code\">WHERE</span> clause of a query, and can improve the effectiveness\n      of Parquet encoding and compression.\n    </p><p>\n      This clause is not applicable for Kudu tables or HBase tables. Although it works\n      for other HDFS file formats besides Parquet, the more efficient layout is most\n      evident with Parquet tables, because each Parquet data file includes statistics\n      about the data values in that file.\n    </p><p>\n      The <span class=\"sql-docs-inline-code\">SORT BY</span> columns cannot include any partition key columns\n      for a partitioned table, because those column values are not represented in\n      the underlying data files.\n    </p><p>\n      Because data files can arrive in Impala tables by mechanisms that do not respect\n      the <span class=\"sql-docs-inline-code\">SORT BY</span> clause, such as <span class=\"sql-docs-inline-code\">LOAD DATA</span> or ETL\n      tools that create HDFS files, Impala does not guarantee or rely on the data being\n      sorted. The sorting aspect is only used to create a more efficient layout for\n      Parquet files generated by Impala, which helps to optimize the processing of\n      those Parquet files during Impala queries. During an <span class=\"sql-docs-inline-code\">INSERT</span>\n      or <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> operation, the sorting occurs\n      when the <span class=\"sql-docs-inline-code\">SORT BY</span> clause applies to the destination table\n      for the data, regardless of whether the source table has a <span class=\"sql-docs-inline-code\">SORT BY</span>\n      clause.\n    </p><p>\n      For example, when creating a table intended to contain census data, you might define\n      sort columns such as last name and state. If a data file in this table contains a\n      narrow range of last names, for example from <span class=\"sql-docs-inline-code\">Smith</span> to <span class=\"sql-docs-inline-code\">Smythe</span>,\n      Impala can quickly detect that this data file contains no matches for a <span class=\"sql-docs-inline-code\">WHERE</span>\n      clause such as <span class=\"sql-docs-inline-code\">WHERE last_name = 'Jones'</span> and avoid reading the entire file.\n    </p><div class=\"sql-docs-code-block\">CREATE TABLE census_data (last_name STRING, first_name STRING, state STRING, address STRING)<br/>  SORT BY (last_name, state)<br/>  STORED AS PARQUET;<br/></div><p>\n      Likewise, if an existing table contains data without any sort order, you can reorganize\n      the data in a more efficient way by using <span class=\"sql-docs-inline-code\">INSERT</span> or\n      <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> to copy that data into a new table with a\n      <span class=\"sql-docs-inline-code\">SORT BY</span> clause:\n    </p><div class=\"sql-docs-code-block\">CREATE TABLE sorted_census_data<br/>  SORT BY (last_name, state)<br/>  STORED AS PARQUET<br/>  AS SELECT last_name, first_name, state, address<br/>    FROM unsorted_census_data;<br/></div><p>\n      The metadata for the <span class=\"sql-docs-inline-code\">SORT BY</span> clause is stored in the <span class=\"sql-docs-inline-code\">TBLPROPERTIES</span>\n      fields for the table. Other SQL engines that can interoperate with Impala tables, such as Hive\n      and Spark SQL, do not recognize this property when inserting into a table that has a <span class=\"sql-docs-inline-code\">SORT BY</span>\n      clause.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_kudu_blurb\"><b>Kudu considerations:</b></p><p>\n      Because Kudu tables do not support clauses related to HDFS and S3 data files and\n      partitioning mechanisms, the syntax associated with the <span class=\"sql-docs-inline-code\">STORED AS KUDU</span>\n      clause is shown separately in the above syntax descriptions. Kudu tables have their own\n      syntax for <span class=\"sql-docs-inline-code\">CREATE TABLE</span>, <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>, and\n      <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>. <span class=\"sql-docs-inline-code\">Prior to Impala 2.10,\n      all internal Kudu tables require a <span class=\"sql-docs-inline-code\">PARTITION BY</span> clause, different than\n      the <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause for HDFS-backed tables.</span></p><p>\n      Here are some examples of creating empty Kudu tables:\n    </p><div class=\"sql-docs-code-block\"><span class=\"sql-docs-inline-code\">-- Single partition. Only for Impala 2.10 and higher.<br/>-- Only suitable for small lookup tables.<br/>CREATE TABLE kudu_no_partition_by_clause<br/>  (<br/>    id bigint PRIMARY KEY, s STRING, b BOOLEAN<br/>  )<br/>  STORED AS KUDU;</span><br/><br/>-- Single-column primary key.<br/>CREATE TABLE kudu_t1 (id BIGINT PRIMARY key, s STRING, b BOOLEAN)<br/>  PARTITION BY HASH (id) PARTITIONS 20 STORED AS KUDU;<br/><br/>-- Multi-column primary key.<br/>CREATE TABLE kudu_t2 (id BIGINT, s STRING, b BOOLEAN, PRIMARY KEY (id,s))<br/>  PARTITION BY HASH (s) PARTITIONS 30 STORED AS KUDU;<br/><br/></div><p>\n      Here is an example of creating an external Kudu table:\n    </p><div class=\"sql-docs-code-block\"></div><p>\n      Here is an example of <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> syntax for a Kudu table:\n    </p><div class=\"sql-docs-code-block\"></div><p>\n      The following <span class=\"sql-docs-inline-code\">CREATE TABLE</span> clauses are not supported for Kudu tables:\n    </p><ul><li><span class=\"sql-docs-inline-code\">PARTITIONED BY</span> (Kudu tables use the clause <span class=\"sql-docs-inline-code\">PARTITION\n        BY</span> instead)\n      </li><li><span class=\"sql-docs-inline-code\">LOCATION</span></li><li><span class=\"sql-docs-inline-code\">ROWFORMAT</span></li><li><span class=\"sql-docs-inline-code\">CACHED IN | UNCACHED</span></li><li><span class=\"sql-docs-inline-code\">WITH SERDEPROPERTIES</span></li></ul><p>\n      For more on the <span class=\"sql-docs-inline-code\">PRIMARY KEY</span> clause, see\n      <span>kudu primary key</span> and\n      <span>kudu primary key attribute</span>.\n    </p><p>\n      For more on creating a Kudu table with a specific replication factor, see\n        <span>kudu replication factor</span>.\n    </p><p>\n      For more on the <span class=\"sql-docs-inline-code\">NULL</span> and <span class=\"sql-docs-inline-code\">NOT NULL</span> attributes, see\n      <span>kudu not null attribute</span>.\n    </p><p>\n      For more on the <span class=\"sql-docs-inline-code\">ENCODING</span> attribute, see\n      <span>kudu encoding attribute</span>.\n    </p><p>\n      For more on the <span class=\"sql-docs-inline-code\">COMPRESSION</span> attribute, see\n      <span>kudu compression attribute</span>.\n    </p><p>\n      For more on the <span class=\"sql-docs-inline-code\">DEFAULT</span> attribute, see\n      <span>kudu default attribute</span>.\n    </p><p>\n      For more on the <span class=\"sql-docs-inline-code\">BLOCK_SIZE</span> attribute, see\n      <span>kudu block size attribute</span>.\n    </p><p><b>Partitioning for Kudu tables (PARTITION BY clause)</b></p><p>\n      For Kudu tables, you specify logical partitioning across one or more columns using the\n      <span class=\"sql-docs-inline-code\">PARTITION BY</span> clause. In contrast to partitioning for HDFS-based tables,\n      multiple values for a partition key column can be located in the same partition. The\n      optional <span class=\"sql-docs-inline-code\">HASH</span> clause lets you divide one or a set of partition key\n      columns into a specified number of buckets. You can use more than one\n      <span class=\"sql-docs-inline-code\">HASH</span> clause, specifying a distinct set of partition key columns for each.\n      The optional <span class=\"sql-docs-inline-code\">RANGE</span> clause further subdivides the partitions, based on a\n      set of comparison operations for the partition key columns.\n    </p><p>\n      Here are some examples of the <span class=\"sql-docs-inline-code\">PARTITION BY HASH</span> syntax:\n    </p><div class=\"sql-docs-code-block\"></div><p>\n      Here are some examples of the <span class=\"sql-docs-inline-code\">PARTITION BY RANGE</span> syntax:\n    </p><div class=\"sql-docs-code-block\"></div><p>\n      Here are some examples combining both <span class=\"sql-docs-inline-code\">HASH</span> and <span class=\"sql-docs-inline-code\">RANGE</span>\n      syntax for the <span class=\"sql-docs-inline-code\">PARTITION BY</span> clause:\n    </p><div class=\"sql-docs-code-block\"></div><p>\n      For more usage details and examples of the Kudu partitioning syntax, see\n      .\n    </p><p><b>Specifying file format (STORED AS and ROW FORMAT clauses):</b></p><p>\n      The <span class=\"sql-docs-inline-code\">STORED AS</span> clause identifies the format of the underlying data files.\n      Currently, Impala can query more types of file formats than it can create or insert into.\n      Use Hive to perform any create or data load operations that are not currently available in\n      Impala. For example, Impala can create an Avro, SequenceFile, or RCFile table but cannot\n      insert data into it. There are also Impala-specific procedures for using compression with\n      each kind of file format. For details about working with data files of various formats,\n      see <span>file formats</span>.\n    </p><div class=\"sql-docs-note\">\n      In Impala 1.4.0 and higher, Impala can create Avro tables, which formerly required doing\n      the <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement in Hive. See\n      <span>avro</span> for details and examples.\n    </div><p>\n      By default (when no <span class=\"sql-docs-inline-code\">STORED AS</span> clause is specified), data files in Impala\n      tables are created as text files with Ctrl-A (hex 01) characters as the delimiter.\n\n      Specify the <span class=\"sql-docs-inline-code\">ROW FORMAT DELIMITED</span> clause to produce or ingest data files\n      that use a different delimiter character such as tab or <span class=\"sql-docs-inline-code\">|</span>, or a different\n      line end character such as carriage return or newline. When specifying delimiter and line\n      end characters with the <span class=\"sql-docs-inline-code\">FIELDS TERMINATED BY</span> and <span class=\"sql-docs-inline-code\">LINES TERMINATED\n      BY</span> clauses, use <span class=\"sql-docs-inline-code\">'\\t'</span> for tab, <span class=\"sql-docs-inline-code\">'\\n'</span> for newline\n      or linefeed, <span class=\"sql-docs-inline-code\">'\\r'</span> for carriage return, and\n      <span class=\"sql-docs-inline-code\">\\</span><span class=\"sql-docs-inline-code\">0</span> for ASCII <span class=\"sql-docs-inline-code\">nul</span> (hex 00). For more\n      examples of text tables, see <span>txtfile</span>.\n    </p><p>\n      The <span class=\"sql-docs-inline-code\">ESCAPED BY</span> clause applies both to text files that you create through\n      an <span class=\"sql-docs-inline-code\">INSERT</span> statement to an Impala <span class=\"sql-docs-inline-code\">TEXTFILE</span> table, and to\n      existing data files that you put into an Impala table directory. (You can ingest existing\n      data files either by creating the table with <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE ...\n      LOCATION</span>, the <span class=\"sql-docs-inline-code\">LOAD DATA</span> statement, or through an HDFS operation\n      such as <span class=\"sql-docs-inline-code\">hdfs dfs -put <span class=\"sql-docs-variable\">file</span><span class=\"sql-docs-variable\">hdfs_path</span></span>.) Choose an escape character that is not used\n      anywhere else in the file, and put it in front of each instance of the delimiter character\n      that occurs within a field value. Surrounding field values with quotation marks does not\n      help Impala to parse fields with embedded delimiter characters; the quotation marks are\n      considered to be part of the column value. If you want to use <span class=\"sql-docs-inline-code\">\\</span> as the\n      escape character, specify the clause in <span class=\"sql-docs-inline-code\">impala-shell</span> as <span class=\"sql-docs-inline-code\">ESCAPED\n      BY '\\\\'</span>.\n    </p><div id=\"../Impala/docs/topics/impala_create_table.xml_thorn\" class=\"sql-docs-note\">\n        The <span class=\"sql-docs-inline-code\">CREATE TABLE</span> clauses <span class=\"sql-docs-inline-code\">FIELDS TERMINATED BY</span>, <span class=\"sql-docs-inline-code\">ESCAPED\n        BY</span>, and <span class=\"sql-docs-inline-code\">LINES TERMINATED BY</span> have special rules for the string literal used for\n        their argument, because they all require a single character. You can use a regular character surrounded by\n        single or double quotation marks, an octal sequence such as <span class=\"sql-docs-inline-code\">'\\054'</span> (representing a comma),\n        or an integer in the range '-127'..'128' (with quotation marks but no backslash), which is interpreted as a\n        single-byte ASCII character. Negative values are subtracted from 256; for example, <span class=\"sql-docs-inline-code\">FIELDS\n        TERMINATED BY '-2'</span> sets the field delimiter to ASCII code 254, the <q>Icelandic Thorn</q>\n        character used as a delimiter by some data formats.\n      </div><p><b>Cloning tables (LIKE clause):</b></p><p>\n      To create an empty table with the same columns, comments, and other attributes as another\n      table, use the following variation. The <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE</span> form allows\n      a restricted set of clauses, currently only the <span class=\"sql-docs-inline-code\">LOCATION</span>,\n      <span class=\"sql-docs-inline-code\">COMMENT</span>, and <span class=\"sql-docs-inline-code\">STORED AS</span> clauses.\n    </p><div class=\"sql-docs-code-block\">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span><span class=\"sql-docs-inline-code\">LIKE { [<span class=\"sql-docs-variable\">db_name</span>.]<span class=\"sql-docs-variable\">table_name</span> | PARQUET '<span class=\"sql-docs-variable\">hdfs_path_of_parquet_file</span>' }</span><br/>  [COMMENT '<span class=\"sql-docs-variable\">table_comment</span>']<br/>  [STORED AS <span class=\"sql-docs-variable\">file_format</span>]<br/>  [LOCATION '<span class=\"sql-docs-variable\">hdfs_path</span>']</div><div class=\"sql-docs-note\"><p>\n        To clone the structure of a table and transfer data into it in a single operation, use\n        the <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> syntax described in the next subsection.\n      </p></div><p>\n      When you clone the structure of an existing table using the <span class=\"sql-docs-inline-code\">CREATE TABLE ...\n      LIKE</span> syntax, the new table keeps the same file format as the original one, so you\n      only need to specify the <span class=\"sql-docs-inline-code\">STORED AS</span> clause if you want to use a different\n      file format, or when specifying a view as the original table. (Creating a table\n      <q>like</q> a view produces a text table by default.)\n    </p><p>\n      Although normally Impala cannot create an HBase table directly, Impala can clone the\n      structure of an existing HBase table with the <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE</span>\n      syntax, preserving the file format and metadata from the original table.\n    </p><p>\n      There are some exceptions to the ability to use <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE</span>\n      with an Avro table. For example, you cannot use this technique for an Avro table that is\n      specified with an Avro schema but no columns. When in doubt, check if a <span class=\"sql-docs-inline-code\">CREATE\n      TABLE ... LIKE</span> operation works in Hive; if not, it typically will not work in\n      Impala either.\n    </p><p>\n      If the original table is partitioned, the new table inherits the same partition key\n      columns. Because the new table is initially empty, it does not inherit the actual\n      partitions that exist in the original one. To create partitions in the new table, insert\n      data or issue <span class=\"sql-docs-inline-code\">ALTER TABLE ... ADD PARTITION</span> statements.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_create_table_like_view\">\n        Prior to Impala 1.4.0, it was not possible to use the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE\n        <span class=\"sql-docs-variable\">view_name</span></span> syntax. In Impala 1.4.0 and higher, you can create a table with the\n        same column definitions as a view using the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span> technique. Although\n        <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span> normally inherits the file format of the original table, a view has no\n        underlying file format, so <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE <span class=\"sql-docs-variable\">view_name</span></span> produces a text\n        table by default. To specify a different file format, include a <span class=\"sql-docs-inline-code\">STORED AS\n        <span class=\"sql-docs-variable\">file_format</span></span> clause at the end of the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span>\n        statement.\n      </p><p>\n      Because <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE</span> only manipulates table metadata, not the\n      physical data of the table, issue <span class=\"sql-docs-inline-code\">INSERT INTO TABLE</span> statements afterward\n      to copy any data from the original table into the new one, optionally converting the data\n      to a new file format. (For some file formats, Impala can do a <span class=\"sql-docs-inline-code\">CREATE TABLE ...\n      LIKE</span> to create the table, but Impala cannot insert data in that file format; in\n      these cases, you must load the data in Hive. See\n      <span>file formats</span> for details.)\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_ctas\"><b>CREATE TABLE AS SELECT:</b></p><p>\n      The <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> syntax is a shorthand notation to create a\n      table based on column definitions from another table, and copy data from the source table\n      to the destination table without issuing any separate <span class=\"sql-docs-inline-code\">INSERT</span> statement.\n      This idiom is so popular that it has its own acronym, <q>CTAS</q>.\n    </p><p>\n      The following examples show how to copy data from a source table <span class=\"sql-docs-inline-code\">T1</span> to a\n      variety of destinations tables, applying various transformations to the table properties,\n      table layout, or the data itself as part of the operation:\n    </p><div class=\"sql-docs-code-block\"><br/>-- Sample table to be the source of CTAS operations.<br/>CREATE TABLE t1 (x INT, y STRING);<br/>INSERT INTO t1 VALUES (1, 'one'), (2, 'two'), (3, 'three');<br/><br/>-- Clone all the columns and data from one table to another.<br/>CREATE TABLE clone_of_t1 AS SELECT * FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Clone the columns and data, and convert the data to a different file format.<br/>CREATE TABLE parquet_version_of_t1 STORED AS PARQUET AS SELECT * FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Copy only some rows to the new table.<br/>CREATE TABLE subset_of_t1 AS SELECT * FROM t1 WHERE x >= 2;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 2 row(s) |<br/>+-------------------+<br/><br/>-- Same idea as CREATE TABLE LIKE: clone table layout but do not copy any data.<br/>CREATE TABLE empty_clone_of_t1 AS SELECT * FROM t1 WHERE 1=0;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 0 row(s) |<br/>+-------------------+<br/><br/>-- Reorder and rename columns and transform the data.<br/>CREATE TABLE t5 AS SELECT upper(y) AS s, x+1 AS a, 'Entirely new column' AS n FROM t1;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/>SELECT * FROM t5;<br/>+-------+---+---------------------+<br/>| s     | a | n                   |<br/>+-------+---+---------------------+<br/>| ONE   | 2 | Entirely new column |<br/>| TWO   | 3 | Entirely new column |<br/>| THREE | 4 | Entirely new column |<br/>+-------+---+---------------------+<br/></div><p>\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT Statement</a> for details about query syntax for the\n      <span class=\"sql-docs-inline-code\">SELECT</span> portion of a <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> statement.\n    </p><p>\n      The newly created table inherits the column names that you select from the original table,\n      which you can override by specifying column aliases in the query. Any column or table\n      comments from the original table are not carried over to the new table.\n    </p><div class=\"sql-docs-note\">\n      When using the <span class=\"sql-docs-inline-code\">STORED AS</span> clause with a <span class=\"sql-docs-inline-code\">CREATE TABLE AS\n      SELECT</span> statement, the destination table must be a file format that Impala can\n      write to: currently, text or Parquet. You cannot specify an Avro, SequenceFile, or RCFile\n      table as the destination table for a CTAS operation.\n    </div><p>\n      Prior to Impala 2.5 you could use a partitioned table as the source\n      and copy data from it, but could not specify any partitioning clauses for the new table.\n      In Impala 2.5 and higher, you can now use the <span class=\"sql-docs-inline-code\">PARTITIONED\n      BY</span> clause with a <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> statement. The following\n      example demonstrates how you can copy data from an unpartitioned table in a <span class=\"sql-docs-inline-code\">CREATE\n      TABLE AS SELECT</span> operation, creating a new partitioned table in the process. The\n      main syntax consideration is the column order in the <span class=\"sql-docs-inline-code\">PARTITIONED BY</span>\n      clause and the select list: the partition key columns must be listed last in the select\n      list, in the same order as in the <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause. Therefore, in\n      this case, the column order in the destination table is different from the source table.\n      You also only specify the column names in the <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause, not\n      the data types or column comments.\n    </p><div class=\"sql-docs-code-block\"><br/>create table partitions_no (year smallint, month tinyint, s string);<br/>insert into partitions_no values (2016, 1, 'January 2016'),<br/>  (2016, 2, 'February 2016'), (2016, 3, 'March 2016');<br/><br/>-- Prove that the source table is not partitioned.<br/>show partitions partitions_no;<br/>ERROR: AnalysisException: Table is not partitioned: ctas_partition_by.partitions_no<br/><br/>-- Create new table with partitions based on column values from source table.<br/><b>create table partitions_yes partitioned by (year, month)<br/>  as select s, year, month from partitions_no;</b><br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 3 row(s) |<br/>+-------------------+<br/><br/>-- Prove that the destination table is partitioned.<br/>show partitions partitions_yes;<br/>+-------+-------+-------+--------+------+...<br/>| year  | month | #Rows | #Files | Size |...<br/>+-------+-------+-------+--------+------+...<br/>| 2016  | 1     | -1    | 1      | 13B  |...<br/>| 2016  | 2     | -1    | 1      | 14B  |...<br/>| 2016  | 3     | -1    | 1      | 11B  |...<br/>| Total |       | -1    | 3      | 38B  |...<br/>+-------+-------+-------+--------+------+...<br/></div><p>\n      The most convenient layout for partitioned tables is with all the partition key columns at\n      the end. The CTAS <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> syntax requires that column order in the\n      select list, resulting in that same column order in the destination table.\n    </p><div class=\"sql-docs-code-block\"><br/>describe partitions_no;<br/>+-------+----------+---------+<br/>| name  | type     | comment |<br/>+-------+----------+---------+<br/>| year  | smallint |         |<br/>| month | tinyint  |         |<br/>| s     | string   |         |<br/>+-------+----------+---------+<br/><br/>-- The CTAS operation forced us to put the partition key columns last.<br/>-- Having those columns last works better with idioms such as SELECT *<br/>-- for partitioned tables.<br/>describe partitions_yes;<br/>+-------+----------+---------+<br/>| name  | type     | comment |<br/>+-------+----------+---------+<br/>| s     | string   |         |<br/>| year  | smallint |         |<br/>| month | tinyint  |         |<br/>+-------+----------+---------+<br/></div><p>\n      Attempting to use a select list with the partition key columns not at the end results in\n      an error due to a column name mismatch:\n    </p><div class=\"sql-docs-code-block\"><br/>-- We expect this CTAS to fail because non-key column S<br/>-- comes after key columns YEAR and MONTH in the select list.<br/>create table partitions_maybe partitioned by (year, month)<br/>  as select year, month, s from partitions_no;<br/>ERROR: AnalysisException: Partition column name mismatch: year != month<br/></div><p>\n      For example, the following statements show how you can clone all the data in a table, or a\n      subset of the columns and/or rows, or reorder columns, rename them, or construct them out\n      of expressions:\n    </p><p>\n      As part of a CTAS operation, you can convert the data to any file format that Impala can\n      write (currently, <span class=\"sql-docs-inline-code\">TEXTFILE</span> and <span class=\"sql-docs-inline-code\">PARQUET</span>). You cannot\n      specify the lower-level properties of a text table, such as the delimiter.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_insert_sort_blurb\"><b>Sorting considerations:</b> Although you can specify an <span class=\"sql-docs-inline-code\">ORDER BY</span> clause in an\n        <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> statement, any <span class=\"sql-docs-inline-code\">ORDER BY</span> clause is ignored and the\n        results are not necessarily sorted. An <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> operation potentially creates\n        many different data files, prepared on different data nodes, and therefore the notion of the data being\n        stored in sorted order is impractical.\n      </p><p><b>CREATE TABLE LIKE PARQUET:</b></p><p>\n      The variation <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE PARQUET\n      '<span class=\"sql-docs-variable\">hdfs_path_of_parquet_file</span>'</span> lets you skip the column\n      definitions of the <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement. The column names and data\n      types are automatically configured based on the organization of the specified Parquet data\n      file, which must already reside in HDFS. You can use a data file located outside the\n      Impala database directories, or a file from an existing Impala Parquet table; either way,\n      Impala only uses the column definitions from the file and does not use the HDFS location\n      for the <span class=\"sql-docs-inline-code\">LOCATION</span> attribute of the new table. (Although you can also\n      specify the enclosing directory with the <span class=\"sql-docs-inline-code\">LOCATION</span> attribute, to both use\n      the same schema as the data file and point the Impala table at the associated directory\n      for querying.)\n    </p><p>\n      The following considerations apply when you use the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE\n      PARQUET</span> technique:\n    </p><ul><li>\n        Any column comments from the original table are not preserved in the new table. Each\n        column in the new table has a comment stating the low-level Parquet field type used to\n        deduce the appropriate SQL column type.\n      </li><li>\n        If you use a data file from a partitioned Impala table, any partition key columns from\n        the original table are left out of the new table, because they are represented in HDFS\n        directory names rather than stored in the data file. To preserve the partition\n        information, repeat the same <span class=\"sql-docs-inline-code\">PARTITION</span> clause as in the original\n        <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement.\n      </li><li>\n        The file format of the new table defaults to text, as with other kinds of <span class=\"sql-docs-inline-code\">CREATE\n        TABLE</span> statements. To make the new table also use Parquet format, include the\n        clause <span class=\"sql-docs-inline-code\">STORED AS PARQUET</span> in the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE\n        PARQUET</span> statement.\n      </li><li>\n        If the Parquet data file comes from an existing Impala table, currently, any\n        <span class=\"sql-docs-inline-code\">TINYINT</span> or <span class=\"sql-docs-inline-code\">SMALLINT</span> columns are turned into\n        <span class=\"sql-docs-inline-code\">INT</span> columns in the new table. Internally, Parquet stores such values as\n        32-bit integers.\n      </li><li>\n        When the destination table uses the Parquet file format, the <span class=\"sql-docs-inline-code\">CREATE TABLE AS\n        SELECT</span> and <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> statements always create at least\n        one data file, even if the <span class=\"sql-docs-inline-code\">SELECT</span> part of the statement does not match\n        any rows. You can use such an empty Parquet data file as a template for subsequent\n        <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE PARQUET</span> statements.\n      </li></ul><p>\n      For more details about creating Parquet tables, and examples of the <span class=\"sql-docs-inline-code\">CREATE TABLE\n      LIKE PARQUET</span> syntax, see <span>parquet</span>.\n    </p><p><b>Visibility and Metadata (TBLPROPERTIES and WITH SERDEPROPERTIES clauses):</b></p><p>\n      You can associate arbitrary items of metadata with a table by specifying the\n      <span class=\"sql-docs-inline-code\">TBLPROPERTIES</span> clause. This clause takes a comma-separated list of\n      key-value pairs and stores those items in the metastore database. You can also change the\n      table properties later with an <span class=\"sql-docs-inline-code\">ALTER TABLE</span> statement. You can observe the\n      table properties for different delimiter and escape characters using the <span class=\"sql-docs-inline-code\">DESCRIBE\n      FORMATTED</span> command, and change those settings for an existing table with\n      <span class=\"sql-docs-inline-code\">ALTER TABLE ... SET TBLPROPERTIES</span>.\n    </p><p>\n      You can also associate SerDes properties with the table by specifying key-value pairs\n      through the <span class=\"sql-docs-inline-code\">WITH SERDEPROPERTIES</span> clause. This metadata is not used by\n      Impala, which has its own built-in serializer and deserializer for the file formats it\n      supports. Particular property values might be needed for Hive compatibility with certain\n      variations of file formats, particularly Avro.\n    </p><p>\n      Some DDL operations that interact with other Hadoop components require specifying\n      particular values in the <span class=\"sql-docs-inline-code\">SERDEPROPERTIES</span> or\n      <span class=\"sql-docs-inline-code\">TBLPROPERTIES</span> fields, such as creating an Avro table or an HBase table.\n      (You typically create HBase tables in Hive, because they require additional clauses not\n      currently available in Impala.)\n</p><p>\n      To see the column definitions and column comments for an existing table, for example\n      before issuing a <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE</span> or a <span class=\"sql-docs-inline-code\">CREATE TABLE ... AS\n      SELECT</span> statement, issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE\n      <span class=\"sql-docs-variable\">table_name</span></span>. To see even more detail, such as the location of\n      data files and the values for clauses such as <span class=\"sql-docs-inline-code\">ROW FORMAT</span> and\n      <span class=\"sql-docs-inline-code\">STORED AS</span>, issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED\n      <span class=\"sql-docs-variable\">table_name</span></span>. <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED</span> is also needed\n      to see any overall table comment (as opposed to individual column comments).\n    </p><p>\n      After creating a table, your <span class=\"sql-docs-inline-code\">impala-shell</span> session or another\n      <span class=\"sql-docs-inline-code\">impala-shell</span> connected to the same node can immediately query that\n      table. There might be a brief interval (one statestore heartbeat) before the table can be\n      queried through a different Impala node. To make the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>\n      statement return only when the table is recognized by all Impala nodes in the cluster,\n      enable the <span class=\"sql-docs-inline-code\">SYNC_DDL</span> query option.\n    </p><p><b>HDFS caching (CACHED IN clause):</b></p><p>\n      If you specify the <span class=\"sql-docs-inline-code\">CACHED IN</span> clause, any existing or future data files in\n      the table directory or the partition subdirectories are designated to be loaded into\n      memory with the HDFS caching mechanism. See\n      <span>hdfs caching</span> for details about using the HDFS\n      caching feature.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_impala_cache_replication_factor\">\n        In Impala 2.2 and higher, the optional <span class=\"sql-docs-inline-code\">WITH REPLICATION</span> clause\n        for <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER TABLE</span> lets you specify\n        a <span class=\"sql-docs-variable\">replication factor</span>, the number of hosts on which to cache the same data blocks.\n        When Impala processes a cached data block, where the cache replication factor is greater than 1, Impala randomly\n        selects a host that has a cached copy of that data block. This optimization avoids excessive CPU\n        usage on a single host when the same cached data block is processed multiple times.\n        Where practical, specify a value greater than or equal to the HDFS block replication factor.\n      </p><p><b>Column order</b>:\n    </p><p>\n      If you intend to use the table to hold data files produced by some external source,\n      specify the columns in the same order as they appear in the data files.\n    </p><p>\n      If you intend to insert or copy data into the table through Impala, or if you have control\n      over the way externally produced data files are arranged, use your judgment to specify\n      columns in the most convenient order:\n    </p><ul><li><p>\n          If certain columns are often <span class=\"sql-docs-inline-code\">NULL</span>, specify those columns last. You\n          might produce data files that omit these trailing columns entirely. Impala\n          automatically fills in the <span class=\"sql-docs-inline-code\">NULL</span> values if so.\n        </p></li><li><p>\n          If an unpartitioned table will be used as the source for an <span class=\"sql-docs-inline-code\">INSERT ...\n          SELECT</span> operation into a partitioned table, specify last in the unpartitioned\n          table any columns that correspond to partition key columns in the partitioned table,\n          and in the same order as the partition key columns are declared in the partitioned\n          table. This technique lets you use <span class=\"sql-docs-inline-code\">INSERT ... SELECT *</span> when copying\n          data to the partitioned table, rather than specifying each column name individually.\n        </p></li><li><p>\n          If you specify columns in an order that you later discover is suboptimal, you can\n          sometimes work around the problem without recreating the table. You can create a view\n          that selects columns from the original table in a permuted order, then do a\n          <span class=\"sql-docs-inline-code\">SELECT *</span> from the view. When inserting data into a table, you can\n          specify a permuted order for the inserted columns to match the order in the\n          destination table.\n        </p></li></ul><p id=\"../Impala/docs/topics/impala_create_table.xml_hive_blurb\"><b>Hive considerations:</b></p><p>\n      Impala queries can make use of metadata about the table and columns, such as the number of\n      rows in a table or the number of different values in a column. Prior to Impala 1.2.2, to\n      create this metadata, you issued the <span class=\"sql-docs-inline-code\">ANALYZE TABLE</span> statement in Hive to\n      gather this information, after creating the table and loading representative data into it.\n      In Impala 1.2.2 and higher, the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> statement produces these\n      statistics within Impala, without needing to use Hive at all.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_hbase_blurb\"><b>HBase considerations:</b></p><div class=\"sql-docs-note\"><p>\n        The Impala <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement cannot create an HBase table, because\n        it currently does not support the <span class=\"sql-docs-inline-code\">STORED BY</span> clause needed for HBase\n        tables. Create such tables in Hive, then query them through Impala. For information on\n        using Impala with HBase tables, see <span>impala hbase</span>.\n      </p></div><p id=\"../Impala/docs/topics/impala_create_table.xml_s3_blurb\"><b>Amazon S3 considerations:</b></p><p>\n      To create a table where the data resides in the Amazon Simple Storage Service (S3),\n      specify a <span class=\"sql-docs-inline-code\">s3a://</span> prefix <span class=\"sql-docs-inline-code\">LOCATION</span> attribute pointing to\n      the data files in S3.\n    </p><p>\n      In Impala 2.6 and higher, you can use this special\n      <span class=\"sql-docs-inline-code\">LOCATION</span> syntax as part of a <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>\n      statement.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_s3_ddl\">\n        In Impala 2.6 and higher, Impala DDL statements such as\n        <span class=\"sql-docs-inline-code\">CREATE DATABASE</span>, <span class=\"sql-docs-inline-code\">CREATE TABLE</span>, <span class=\"sql-docs-inline-code\">DROP DATABASE CASCADE</span>,\n        <span class=\"sql-docs-inline-code\">DROP TABLE</span>, and <span class=\"sql-docs-inline-code\">ALTER TABLE [ADD|DROP] PARTITION</span> can create or remove folders\n        as needed in the Amazon S3 system. Prior to Impala 2.6, you had to create folders yourself and point\n        Impala database, tables, or partitions at them, and manually remove folders when no longer needed.\n        See <span>s3</span> for details about reading and writing S3 data with Impala.\n      </p><p id=\"../Impala/docs/topics/impala_create_table.xml_insert_sort_blurb\"><b>Sorting considerations:</b> Although you can specify an <span class=\"sql-docs-inline-code\">ORDER BY</span> clause in an\n        <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> statement, any <span class=\"sql-docs-inline-code\">ORDER BY</span> clause is ignored and the\n        results are not necessarily sorted. An <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> operation potentially creates\n        many different data files, prepared on different data nodes, and therefore the notion of the data being\n        stored in sorted order is impractical.\n      </p><p id=\"../Impala/docs/topics/impala_create_table.xml_hdfs_blurb\"><b>HDFS considerations:</b></p><p>\n      The <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement for an internal table creates a directory in\n      HDFS. The <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span> statement associates the table with an\n      existing HDFS directory, and does not create any new directory in HDFS. To locate the HDFS\n      data directory for a table, issue a <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED\n      <span class=\"sql-docs-variable\">table</span></span> statement. To examine the contents of that HDFS\n      directory, use an OS command such as <span class=\"sql-docs-inline-code\">hdfs dfs -ls\n      hdfs://<span class=\"sql-docs-variable\">path</span></span>, either from the OS command line or through the\n      <span class=\"sql-docs-inline-code\">shell</span> or <span class=\"sql-docs-inline-code\">!</span> commands in <span class=\"sql-docs-inline-code\">impala-shell</span>.\n    </p><p>\n      The <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> syntax creates data files under the table data\n      directory to hold any data copied by the <span class=\"sql-docs-inline-code\">INSERT</span> portion of the statement.\n      (Even if no data is copied, Impala might create one or more empty data files.)\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_permissions_blurb\"><b>HDFS permissions:</b></p><p>\n      The user ID that the <span class=\"sql-docs-inline-code\">impalad</span> daemon runs under, typically the\n      <span class=\"sql-docs-inline-code\">impala</span> user, must have both execute and write permission for the database\n      directory where the table is being created.\n    </p><p id=\"../Impala/docs/topics/impala_create_table.xml_security_blurb\"><b>Security considerations:</b></p><p id=\"../Impala/docs/topics/impala_create_table.xml_redaction_yes\">\n        If these statements in your environment contain sensitive literal values such as credit card numbers or tax\n        identifiers, Impala can redact this sensitive information when displaying the statements in log files and\n        other administrative contexts. See  for details.\n      </p><p id=\"../Impala/docs/topics/impala_create_table.xml_cancel_blurb_maybe\"><b>Cancellation:</b> Certain multi-stage statements (<span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> and\n        <span class=\"sql-docs-inline-code\">COMPUTE STATS</span>) can be cancelled during some stages, when running <span class=\"sql-docs-inline-code\">INSERT</span>\n        or <span class=\"sql-docs-inline-code\">SELECT</span> operations internally. To cancel this statement, use Ctrl-C from the\n        <span class=\"sql-docs-inline-code\">impala-shell</span> interpreter, the  button from the\n         page in Hue, or  from the list of\n        in-flight queries (for a particular node) on the  tab in the Impala web UI\n        (port 25000).\n      </p><p id=\"../Impala/docs/topics/impala_create_table.xml_related_info\"><b>Related information:</b></p><p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#tables\">Overview of Impala Tables</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_table.xml#drop_table\">DROP TABLE Statement</a>,\n      <span>partitioning</span>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#internal_tables\"><h4>Internal Tables</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#external_tables\"><h4>External Tables</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_compute_stats.xml#compute_stats\">COMPUTE STATS Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_sync_ddl.xml#sync_ddl\">SYNC_DDL Query Option</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_show.xml#show_tables\"><h4>SHOW TABLES Statement</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_show.xml#show_create_table\"><h4>SHOW CREATE TABLE Statement</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_describe.xml#describe\">DESCRIBE Statement</a></p></div>","title":"CREATE TABLE Statement"}