{"body":"<div><p><span class=\"sql-docs-variable\">Complex types</span>  (also referred to as <span class=\"sql-docs-variable\">nested types</span> ) let you represent multiple data values within a single\n      row/column position. They differ from the familiar column types such as <span class=\"sql-docs-inline-code\">BIGINT</span>  and <span class=\"sql-docs-inline-code\">STRING</span> , known as\n      <span class=\"sql-docs-variable\">scalar types</span>  or <span class=\"sql-docs-variable\">primitive types</span> , which represent a single data value within a given row/column position.\n      Impala supports the complex types <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , and <span class=\"sql-docs-inline-code\">STRUCT</span>  in Impala 2.3\n      and higher. The Hive <span class=\"sql-docs-inline-code\">UNION</span>  type is not currently supported.\n    </p> <p>\n      Once you understand the basics of complex types, refer to the individual type topics when you need to refresh your memory about syntax\n      and examples:\n    </p> <ul><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_array.xml#array\">ARRAY Complex Type (Impala 2.3 or higher only)</a></li> <li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_struct.xml#struct\">STRUCT Complex Type (Impala 2.3 or higher only)</a></li> <li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_map.xml#map\">MAP Complex Type (Impala 2.3 or higher only)</a></li> </ul> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_benefits\"><h4>Benefits of Impala Complex Types</h4> <div><p>\n        The reasons for using Impala complex types include the following:\n      </p> <ul><li><p>\n            You already have data produced by Hive or other non-Impala component that uses the complex type column names. You might need to\n            convert the underlying data to Parquet to use it with Impala.\n          </p> </li> <li><p>\n            Your data model originates with a non-SQL programming language or a NoSQL data management system. For example, if you are\n            representing Python data expressed as nested lists, dictionaries, and tuples, those data structures correspond closely to Impala\n            <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , and <span class=\"sql-docs-inline-code\">STRUCT</span>  types.\n          </p> </li> <li><p>\n            Your analytic queries involving multiple tables could benefit from greater locality during join processing. By packing more\n            related data items within each HDFS data block, complex types let join queries avoid the network overhead of the traditional\n            Hadoop shuffle or broadcast join techniques.\n          </p> </li> </ul> <p>\n        The Impala complex type support produces result sets with all scalar values, and the scalar components of complex types can be used\n        with all SQL clauses, such as <span class=\"sql-docs-inline-code\">GROUP BY</span> , <span class=\"sql-docs-inline-code\">ORDER BY</span> , all kinds of joins, subqueries, and inline\n        views. The ability to process complex type data entirely in SQL reduces the need to write application-specific code in Java or other\n        programming languages to deconstruct the underlying data structures.\n      </p> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_overview\"><h4>Overview of Impala Complex Types</h4> <div><p>\n        The <span class=\"sql-docs-inline-code\">ARRAY</span>  and <span class=\"sql-docs-inline-code\">MAP</span>  types are closely related: they represent collections with arbitrary numbers of\n        elements, where each element is the same type. In contrast, <span class=\"sql-docs-inline-code\">STRUCT</span>  groups together a fixed number of items into a\n        single element. The parts of a <span class=\"sql-docs-inline-code\">STRUCT</span>  element (the <span class=\"sql-docs-variable\">fields</span> ) can be of different types, and each field\n        has a name.\n      </p> <p>\n        The elements of an <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span> , or the fields of a <span class=\"sql-docs-inline-code\">STRUCT</span> , can also be other\n        complex types. You can construct elaborate data structures with up to 100 levels of nesting. For example, you can make an\n        <span class=\"sql-docs-inline-code\">ARRAY</span>  whose elements are <span class=\"sql-docs-inline-code\">STRUCT</span> s. Within each <span class=\"sql-docs-inline-code\">STRUCT</span> , you can have some fields\n        that are <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , or another kind of <span class=\"sql-docs-inline-code\">STRUCT</span> . The Impala documentation uses the\n        terms complex and nested types interchangeably; for simplicity, it primarily uses the term complex types, to encompass all the\n        properties of these types.\n      </p> <p>\n        When visualizing your data model in familiar SQL terms, you can think of each <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span>  as a\n        miniature table, and each <span class=\"sql-docs-inline-code\">STRUCT</span>  as a row within such a table. By default, the table represented by an\n        <span class=\"sql-docs-inline-code\">ARRAY</span>  has two columns, <span class=\"sql-docs-inline-code\">POS</span>  to represent ordering of elements, and <span class=\"sql-docs-inline-code\">ITEM</span> \n        representing the value of each element. Likewise, by default, the table represented by a <span class=\"sql-docs-inline-code\">MAP</span>  encodes key-value\n        pairs, and therefore has two columns, <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span> .\n</p> <p>\n        The <span class=\"sql-docs-inline-code\">ITEM</span>  and <span class=\"sql-docs-inline-code\">VALUE</span>  names are only required for the very simplest kinds of <span class=\"sql-docs-inline-code\">ARRAY</span> \n        and <span class=\"sql-docs-inline-code\">MAP</span>  columns, ones that hold only scalar values. When the elements within the <span class=\"sql-docs-inline-code\">ARRAY</span>  or\n        <span class=\"sql-docs-inline-code\">MAP</span>  are of type <span class=\"sql-docs-inline-code\">STRUCT</span>  rather than a scalar type, then the result set contains columns with names\n        corresponding to the <span class=\"sql-docs-inline-code\">STRUCT</span>  fields rather than <span class=\"sql-docs-inline-code\">ITEM</span>  or <span class=\"sql-docs-inline-code\">VALUE</span> .\n      </p> <p>\n        You write most queries that process complex type columns using familiar join syntax, even though the data for both sides of the join\n        resides in a single table. The join notation brings together the scalar values from a row with the values from the complex type\n        columns for that same row. The final result set contains all scalar values, allowing you to do all the familiar filtering,\n        aggregation, ordering, and so on for the complex data entirely in SQL or using business intelligence tools that issue SQL queries.\n</p> <p>\n        Behind the scenes, Impala ensures that the processing for each row is done efficiently on a single host, without the network traffic\n        involved in broadcast or shuffle joins. The most common type of join query for tables with complex type columns is <span class=\"sql-docs-inline-code\">INNER\n        JOIN</span> , which returns results only in those cases where the complex type contains some elements. Therefore, most query\n        examples in this section use either the <span class=\"sql-docs-inline-code\">INNER JOIN</span>  clause or the equivalent comma notation.\n      </p> <div class=\"sql-docs-note\"><p>\n          Although Impala can query complex types that are present in Parquet files, Impala currently cannot create new Parquet files\n          containing complex types. Therefore, the discussion and examples presume that you are working with existing Parquet data produced\n          through Hive, Spark, or some other source. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types_ex_hive_etl\"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> </a> for examples of constructing Parquet data\n          files with complex type columns.\n        </p> <p>\n          For learning purposes, you can create empty tables with complex type columns and practice query syntax, even if you do not have\n          sample data with the required structure.\n        </p> </div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_design\"><h4>Design Considerations for Complex Types</h4> <div><p>\n        When planning to use Impala complex types, and designing the Impala schema, first learn how this kind of schema differs from\n        traditional table layouts from the relational database and data warehousing fields. Because you might have already encountered\n        complex types in a Hadoop context while using Hive for ETL, also learn how to write high-performance analytic queries for complex\n        type data using Impala SQL syntax.\n      </p> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_vs_rdbms\"><h4>How Complex Types Differ from Traditional Data Warehouse Schemas</h4> <div><p>\n          Complex types let you associate arbitrary data structures with a particular row. If you are familiar with schema design for\n          relational database management systems or data warehouses, a schema with complex types has the following differences:\n        </p> <ul><li><p>\n              Logically, related values can now be grouped tightly together in the same table.\n            </p> <p>\n              In traditional data warehousing, related values were typically arranged in one of two ways:\n            </p> <ul><li><p>\n                  Split across multiple normalized tables. Foreign key columns specified which rows from each table were associated with\n                  each other. This arrangement avoided duplicate data and therefore the data was compact, but join queries could be\n                  expensive because the related data had to be retrieved from separate locations. (In the case of distributed Hadoop\n                  queries, the joined tables might even be transmitted between different hosts in a cluster.)\n                </p> </li> <li><p>\n                  Flattened into a single denormalized table. Although this layout eliminated some potential performance issues by removing\n                  the need for join queries, the table typically became larger because values were repeated. The extra data volume could\n                  cause performance issues in other parts of the workflow, such as longer ETL cycles or more expensive full-table scans\n                  during queries.\n                </p> </li> </ul> <p>\n              Complex types represent a middle ground that addresses these performance and volume concerns. By physically locating related\n              data within the same data files, complex types increase locality and reduce the expense of join queries. By associating an\n              arbitrary amount of data with a single row, complex types avoid the need to repeat lengthy values such as strings. Because\n              Impala knows which complex type values are associated with each row, you can save storage by avoiding artificial foreign key\n              values that are only used for joins. The flexibility of the <span class=\"sql-docs-inline-code\">STRUCT</span> , <span class=\"sql-docs-inline-code\">ARRAY</span> , and\n              <span class=\"sql-docs-inline-code\">MAP</span>  types lets you model familiar constructs such as fact and dimension tables from a data warehouse, and\n              wide tables representing sparse matrixes.\n            </p> </li> </ul> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_physical\"><h4>Physical Storage for Complex Types</h4> <div><p>\n          Physically, the scalar and complex columns in each row are located adjacent to each other in the same Parquet data file, ensuring\n          that they are processed on the same host rather than being broadcast across the network when cross-referenced within a query. This\n          co-location simplifies the process of copying, converting, and backing all the columns up at once. Because of the column-oriented\n          layout of Parquet files, you can still query only the scalar columns of a table without imposing the I/O penalty of reading the\n          (possibly large) values of the composite columns.\n        </p> <p>\n          Within each Parquet data file, the constituent parts of complex type columns are stored in column-oriented format:\n        </p> <ul><li><p>\n              Each field of a <span class=\"sql-docs-inline-code\">STRUCT</span>  type is stored like a column, with all the scalar values adjacent to each other and\n              encoded, compressed, and so on using the Parquet space-saving techniques.\n            </p> </li> <li><p>\n              For an <span class=\"sql-docs-inline-code\">ARRAY</span>  containing scalar values, all those values (represented by the <span class=\"sql-docs-inline-code\">ITEM</span> \n              pseudocolumn) are stored adjacent to each other.\n            </p> </li> <li><p>\n              For a <span class=\"sql-docs-inline-code\">MAP</span> , the values of the <span class=\"sql-docs-inline-code\">KEY</span>  pseudocolumn are stored adjacent to each other. If the\n              <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumn is a scalar type, its values are also stored adjacent to each other.\n            </p> </li> <li><p>\n              If an <span class=\"sql-docs-inline-code\">ARRAY</span>  element, <span class=\"sql-docs-inline-code\">STRUCT</span>  field, or <span class=\"sql-docs-inline-code\">MAP</span> <span class=\"sql-docs-inline-code\">VALUE</span>  part is\n              another complex type, the column-oriented storage applies to the next level down (or the next level after that, and so on for\n              deeply nested types) where the final elements, fields, or values are of scalar types.\n            </p> </li> </ul> <p>\n          The numbers represented by the <span class=\"sql-docs-inline-code\">POS</span>  pseudocolumn of an <span class=\"sql-docs-inline-code\">ARRAY</span>  are not physically stored in the\n          data files. They are synthesized at query time based on the order of the <span class=\"sql-docs-inline-code\">ARRAY</span>  elements associated with each row.\n        </p> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_file_formats\"><h4>File Format Support for Impala Complex Types</h4> <div><p>\n          Currently, Impala queries support complex type data only in the Parquet file format. See <span>parquet</span>\n          for details about the performance benefits and physical layout of this file format.\n        </p> <p>\n          Because Impala does not parse the data structures containing nested types for unsupported formats such as text, Avro,\n          SequenceFile, or RCFile, you cannot use data files in these formats with Impala, even if the query does not refer to the nested\n          type columns. Also, if a table using an unsupported format originally contained nested type columns, and then those columns were\n          dropped from the table using <span class=\"sql-docs-inline-code\">ALTER TABLE ... DROP COLUMN</span> , any existing data files in the table still contain the\n          nested type data and Impala queries on that table will generate errors.\n        </p> <p>\n            The one exception to the preceding rule is <span class=\"sql-docs-inline-code\">COUNT(*)</span>  queries on RCFile tables that include complex types.\n            Such queries are allowed in Impala 2.6 and higher.\n        </p> <p>\n          You can perform DDL operations for tables involving complex types in\n          most file formats other than Parquet. You cannot create tables in\n          Impala with complex types using text files.\n        </p> <p>\n          You can have a partitioned table with complex type columns that uses\n          a non-Parquet format, and use <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  to change\n          the file format to Parquet for individual partitions. When you put\n          Parquet data files into those partitions, Impala can execute queries\n          against that data as long as the query does not involve any of the\n          non-Parquet partitions.\n        </p> <p>\n          If you use the <span class=\"sql-docs-inline-code\">parquet-tools</span>  command to examine the structure of a Parquet data file that includes complex\n          types, you see that both <span class=\"sql-docs-inline-code\">ARRAY</span>  and <span class=\"sql-docs-inline-code\">MAP</span>  are represented as a <span class=\"sql-docs-inline-code\">Bag</span>  in Parquet\n          terminology, with all fields marked <span class=\"sql-docs-inline-code\">Optional</span>  because Impala allows any column to be nullable.\n        </p> <p>\n          Impala supports either 2-level and 3-level encoding within each Parquet data file. When constructing Parquet data files outside\n          Impala, use either encoding style but do not mix 2-level and 3-level encoding within the same data file.\n        </p> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_vs_normalization\"><h4>Choosing Between Complex Types and Normalized Tables</h4> <div><p>\n          Choosing between multiple normalized fact and dimension tables, or a single table containing complex types, is an important design\n          decision.\n        </p> <ul><li><p>\n              If you are coming from a traditional database or data warehousing background, you might be familiar with how to split up data\n              between tables. Your business intelligence tools might already be optimized for dealing with this kind of multi-table scenario\n              through join queries.\n            </p> </li> <li><p>\n              If you are pulling data from Impala into an application written in a programming language that has data structures analogous\n              to the complex types, such as Python or Java, complex types in Impala could simplify data interchange and improve\n              understandability and reliability of your program logic.\n            </p> </li> <li><p>\n              You might already be faced with existing infrastructure or receive high volumes of data that assume one layout or the other.\n              For example, complex types are popular with web-oriented applications, for example to keep information about an online user\n              all in one place for convenient lookup and analysis, or to deal with sparse or constantly evolving data fields.\n            </p> </li> <li><p>\n              If some parts of the data change over time while related data remains constant, using multiple normalized tables lets you\n              replace certain parts of the data without reloading the entire data set. Conversely, if you receive related data all bundled\n              together, such as in JSON files, using complex types can save the overhead of splitting the related items across multiple\n              tables.\n            </p> </li> <li><p>\n              From a performance perspective:\n            </p> <ul><li><p>\n                  In Parquet tables, Impala can skip columns that are not referenced in a query, avoiding the I/O penalty of reading the\n                  embedded data. When complex types are nested within a column, the data is physically divided at a very granular level; for\n                  example, a query referring to data nested multiple levels deep in a complex type column does not have to read all the data\n                  from that column, only the data for the relevant parts of the column type hierarchy.\n</p> </li> <li><p>\n                  Complex types avoid the possibility of expensive join queries when data from fact and dimension tables is processed in\n                  parallel across multiple hosts. All the information for a row containing complex types is typically to be in the same data\n                  block, and therefore does not need to be transmitted across the network when joining fields that are all part of the same\n                  row.\n                </p> </li> <li><p>\n                  The tradeoff with complex types is that fewer rows fit in each data block. Whether it is better to have more data blocks\n                  with fewer rows, or fewer data blocks with many rows, depends on the distribution of your data and the characteristics of\n                  your query workload. If the complex columns are rarely referenced, using them might lower efficiency. If you are seeing\n                  low parallelism due to a small volume of data (relatively few data blocks) in each table partition, increasing the row\n                  size by including complex columns might produce more data blocks and thus spread the work more evenly across the cluster.\n                  See <span>scalability</span> for more on this advanced topic.\n                </p> </li> </ul> </li> </ul> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_hive\"><h4>Differences Between Impala and Hive Complex Types</h4> <div><p>\n          Impala can query Parquet tables containing <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , and <span class=\"sql-docs-inline-code\">MAP</span>  columns\n          produced by Hive. There are some differences to be aware of between the Impala SQL and HiveQL syntax for complex types, primarily\n          for queries.\n        </p> <p>\n          Impala supports a subset of the syntax that Hive supports for\n          specifying <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , and\n            <span class=\"sql-docs-inline-code\">MAP</span>  types in the <span class=\"sql-docs-inline-code\">CREATE TABLE</span> \n          statements.\n        </p> <p>\n          Because Impala <span class=\"sql-docs-inline-code\">STRUCT</span>  columns include user-specified field names, you use the <span class=\"sql-docs-inline-code\">NAMED_STRUCT()</span> \n          constructor in Hive rather than the <span class=\"sql-docs-inline-code\">STRUCT()</span>  constructor when you populate an Impala <span class=\"sql-docs-inline-code\">STRUCT</span> \n          column using a Hive <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n        </p> <p>\n          The Hive <span class=\"sql-docs-inline-code\">UNION</span>  type is not currently supported in Impala.\n        </p> <p>\n          While Impala usually aims for a high degree of compatibility with HiveQL query syntax, Impala syntax differs from Hive for queries\n          involving complex types. The differences are intended to provide extra flexibility for queries involving these kinds of tables.\n        </p> <ul><li>\n            Impala uses dot notation for referring to element names or elements within complex types, and join notation for\n            cross-referencing scalar columns with the elements of complex types within the same row, rather than the <span class=\"sql-docs-inline-code\">LATERAL\n            VIEW</span>  clause and <span class=\"sql-docs-inline-code\">EXPLODE()</span>  function of HiveQL.\n          </li> <li>\n            Using join notation lets you use all the kinds of join queries with complex type columns. For example, you can use a\n            <span class=\"sql-docs-inline-code\">LEFT OUTER JOIN</span> , <span class=\"sql-docs-inline-code\">LEFT ANTI JOIN</span> , or <span class=\"sql-docs-inline-code\">LEFT SEMI JOIN</span>  query to evaluate\n            different scenarios where the complex columns do or do not contain any elements.\n          </li> <li>\n            You can include references to collection types inside subqueries and inline views. For example, you can construct a\n            <span class=\"sql-docs-inline-code\">FROM</span>  clause where one of the <q>tables</q>  is a subquery against a complex type column, or use a subquery\n            against a complex type column as the argument to an <span class=\"sql-docs-inline-code\">IN</span>  or <span class=\"sql-docs-inline-code\">EXISTS</span>  clause.\n          </li> <li>\n            The Impala pseudocolumn <span class=\"sql-docs-inline-code\">POS</span>  lets you retrieve the position of elements in an array along with the elements\n            themselves, equivalent to the <span class=\"sql-docs-inline-code\">POSEXPLODE()</span>  function of HiveQL. You do not use index notation to retrieve a\n            single array element in a query; the join query loops through the array elements and you use <span class=\"sql-docs-inline-code\">WHERE</span>  clauses to\n            specify which elements to return.\n          </li> <li><p>\n              Join clauses involving complex type columns do not require an <span class=\"sql-docs-inline-code\">ON</span>  or <span class=\"sql-docs-inline-code\">USING</span>  clause. Impala\n              implicitly applies the join key so that the correct array entries or map elements are associated with the correct row from the\n              table.\n            </p> </li> <li><p>\n              Impala does not currently support the <span class=\"sql-docs-inline-code\">UNION</span>  complex type.\n            </p> </li> </ul> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_limits\"><h4>Limitations and Restrictions for Complex Types</h4> <div><p>\n          Complex type columns can only be used in tables or partitions with the Parquet file format.\n        </p> <p>\n          Complex type columns cannot be used as partition key columns in a partitioned table.\n        </p> <p>\n          When you use complex types with the <span class=\"sql-docs-inline-code\">ORDER BY</span> , <span class=\"sql-docs-inline-code\">GROUP BY</span> , <span class=\"sql-docs-inline-code\">HAVING</span> , or\n          <span class=\"sql-docs-inline-code\">WHERE</span>  clauses, you cannot refer to the column name by itself. Instead, you refer to the names of the scalar\n          values within the complex type, such as the <span class=\"sql-docs-inline-code\">ITEM</span> , <span class=\"sql-docs-inline-code\">POS</span> , <span class=\"sql-docs-inline-code\">KEY</span> , or\n          <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumns, or the field names from a <span class=\"sql-docs-inline-code\">STRUCT</span> .\n        </p> <p>\n          The maximum depth of nesting for complex types is 100 levels.\n        </p> <p id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_max_length\">\n            The maximum length of the column definition for any complex type, including declarations for any nested types,\n            is 4000 characters.\n          </p> <p>\n          For ideal performance and scalability, use small or medium-sized collections, where all the complex columns contain at most a few\n          hundred megabytes per row. Remember, all the columns of a row are stored in the same HDFS data block, whose size in Parquet files\n          typically ranges from 256 MB to 1 GB.\n        </p> <p>\n          Including complex type columns in a table introduces some overhead that might make queries that do not reference those columns\n          somewhat slower than Impala queries against tables without any complex type columns. Expect at most a 2x slowdown compared to\n          tables that do not have any complex type columns.\n        </p> <p>\n          Currently, the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span>  statement does not collect any statistics for columns containing complex types.\n          Impala uses heuristics to construct execution plans involving complex type columns.\n        </p> <p>\n          Currently, Impala built-in functions and user-defined functions cannot accept complex types as parameters or produce them as\n          function return values. (When the complex type values are materialized in an Impala result set, the result set contains the scalar\n          components of the values, such as the <span class=\"sql-docs-inline-code\">POS</span>  or <span class=\"sql-docs-inline-code\">ITEM</span>  for an <span class=\"sql-docs-inline-code\">ARRAY</span> , the\n          <span class=\"sql-docs-inline-code\">KEY</span>  or <span class=\"sql-docs-inline-code\">VALUE</span>  for a <span class=\"sql-docs-inline-code\">MAP</span> , or the fields of a <span class=\"sql-docs-inline-code\">STRUCT</span> ; these\n          scalar data items <i>can</i>  be used with built-in functions and UDFs as usual.)\n        </p> <p id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_read_only\">\n        Impala currently cannot write new data files containing complex type columns.\n        Therefore, although the <span class=\"sql-docs-inline-code\">SELECT</span>  statement works for queries\n        involving complex type columns, you cannot use a statement form that writes\n        data to complex type columns, such as <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>  or <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> .\n        To create data files containing complex type data, use the Hive <span class=\"sql-docs-inline-code\">INSERT</span>  statement, or another\n        ETL mechanism such as MapReduce jobs, Spark jobs, Pig, and so on.\n      </p> <p>\n          Currently, Impala can query complex type columns only from Parquet tables or Parquet partitions within partitioned tables.\n          Although you can use complex types in tables with Avro, text, and other file formats as part of your ETL pipeline, for example as\n          intermediate tables populated through Hive, doing analytics through Impala requires that the data eventually ends up in a Parquet\n          table. The requirement for Parquet data files means that you can use complex types with Impala tables hosted on other kinds of\n          file storage systems such as Isilon and Amazon S3, but you cannot use Impala to query complex types from HBase tables. See\n          <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types_file_formats\"><h4>File Format Support for Impala Complex Types</h4> </a> for more details.\n        </p> </div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_using\"><h4>Using Complex Types from SQL</h4> <div><p>\n        When using complex types through SQL in Impala, you learn the notation for <span class=\"sql-docs-inline-code\">< ></span>  delimiters for the complex\n        type columns in <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statements, and how to construct join queries to <q>unpack</q>  the scalar values\n        nested inside the complex data structures. You might need to condense a traditional RDBMS or data warehouse schema into a smaller\n        number of Parquet tables, and use Hive, Spark, Pig, or other mechanism outside Impala to populate the tables with data.\n      </p> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_nested_types_ddl\"><h4>Complex Type Syntax for DDL Statements</h4> <div><p>\n          The definition of <span class=\"sql-docs-variable\">data_type</span> , as seen in the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  and <span class=\"sql-docs-inline-code\">ALTER TABLE</span> \n          statements, now includes complex types in addition to primitive types:\n        </p> <div class=\"sql-docs-code-block\">primitive_type<br/>| array_type<br/>| map_type<br/>| struct_type<br/></div><p>\n          Unions are not currently supported.\n        </p> <p><span class=\"sql-docs-inline-code\">Array</span> , <span class=\"sql-docs-inline-code\">struct</span> , and\n            <span class=\"sql-docs-inline-code\">map</span>  column type declarations are specified in the\n            <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement. You can also add or change\n          the type of complex columns through the <span class=\"sql-docs-inline-code\">ALTER TABLE</span> \n          statement. </p> <p> Currently, Impala queries allow complex types only in tables that\n          use the Parquet format. If an Impala query encounters complex types in\n          a table or partition using another file format, the query returns a\n          runtime error. </p> <p> You can use <span class=\"sql-docs-inline-code\">ALTER TABLE ... SET FILEFORMAT PARQUET</span> \n          to change the file format of an existing table containing complex\n          types to Parquet, after which Impala can query it. Make sure to load\n          Parquet files into the table after changing the file format, because\n          the <span class=\"sql-docs-inline-code\">ALTER TABLE ... SET FILEFORMAT</span>  statement does not\n          convert existing data to the new file format. </p> <p id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_partitioning\">\n        Partitioned tables can contain complex type columns.\n        All the partition key columns must be scalar types.\n      </p> <p>\n          Because use cases for Impala complex types require that you already have Parquet data files produced outside of Impala, you can\n          use the Impala <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE PARQUET</span>  syntax to produce a table with columns that match the structure of an\n          existing Parquet file, including complex type columns for nested data structures. Remember to include the <span class=\"sql-docs-inline-code\">STORED AS\n          PARQUET</span>  clause in this case, because even with <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE PARQUET</span> , the default file format of the\n          resulting table is still text.\n        </p> <p>\n          Because the complex columns are omitted from the result set of an Impala <span class=\"sql-docs-inline-code\">SELECT *</span>  or <span class=\"sql-docs-inline-code\">SELECT\n          <span class=\"sql-docs-variable\">col_name</span> </span>  query, and because Impala currently does not support writing Parquet files with complex type\n          columns, you cannot use the <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>  syntax to create a table with nested type columns.\n        </p> <div class=\"sql-docs-note\"><p>\n            Once you have a table set up with complex type columns, use the <span class=\"sql-docs-inline-code\">DESCRIBE</span>  and <span class=\"sql-docs-inline-code\">SHOW CREATE TABLE</span> \n            statements to see the correct notation with <span class=\"sql-docs-inline-code\"><</span>  and <span class=\"sql-docs-inline-code\">></span>  delimiters and comma and colon\n            separators within the complex type definitions. If you do not have existing data with the same layout as the table, you can\n            query the empty table to practice with the notation for the <span class=\"sql-docs-inline-code\">SELECT</span>  statement. In the <span class=\"sql-docs-inline-code\">SELECT</span> \n            list, you use dot notation and pseudocolumns such as <span class=\"sql-docs-inline-code\">ITEM</span> , <span class=\"sql-docs-inline-code\">KEY</span> , and <span class=\"sql-docs-inline-code\">VALUE</span>  for\n            referring to items within the complex type columns. In the <span class=\"sql-docs-inline-code\">FROM</span>  clause, you use join notation to construct\n            table aliases for any referenced <span class=\"sql-docs-inline-code\">ARRAY</span>  and <span class=\"sql-docs-inline-code\">MAP</span>  columns.\n          </p> </div> <p>\n          For example, when defining a table that holds contact information, you might represent phone numbers differently depending on the\n          expected layout and relationships of the data, and how well you can predict those properties in advance.\n        </p> <p>\n          Here are different ways that you might represent phone numbers in a traditional relational schema, with equivalent representations\n          using complex types.\n        </p> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_sql\"><h4>SQL Statements that Support Complex Types</h4> <div><p>\n          The Impala SQL statements that support complex types are currently\n          <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_table.xml#create_table\">CREATE TABLE</a></span> ,\n          <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE</a></span> ,\n          <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_describe.xml#describe\">DESCRIBE</a></span> ,\n          <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_load_data.xml#load_data\">LOAD DATA</a></span> , and\n          <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT</a></span> . That is, currently Impala can create or alter tables\n          containing complex type columns, examine the structure of a table containing complex type columns, import existing data files\n          containing complex type columns into a table, and query Parquet tables containing complex types.\n        </p> <p id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_read_only\">\n        Impala currently cannot write new data files containing complex type columns.\n        Therefore, although the <span class=\"sql-docs-inline-code\">SELECT</span>  statement works for queries\n        involving complex type columns, you cannot use a statement form that writes\n        data to complex type columns, such as <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>  or <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> .\n        To create data files containing complex type data, use the Hive <span class=\"sql-docs-inline-code\">INSERT</span>  statement, or another\n        ETL mechanism such as MapReduce jobs, Spark jobs, Pig, and so on.\n      </p> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_ddl\"><h4>DDL Statements and Complex Types</h4> <div><p>\n            Column specifications for complex or nested types use <span class=\"sql-docs-inline-code\"><</span>  and <span class=\"sql-docs-inline-code\">></span>  delimiters:\n          </p> <div class=\"sql-docs-code-block\"></div></div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_queries\"><h4>Queries and Complex Types</h4> <div><p>\n            The result set of an Impala query always contains all scalar types; the elements and fields within any complex type queries must\n            be <q>unpacked</q>  using join queries. A query cannot directly retrieve the entire value for a complex type column. Impala\n            returns an error in this case. Queries using <span class=\"sql-docs-inline-code\">SELECT *</span>  are allowed for tables with complex types, but the\n            columns with complex types are skipped.\n          </p> <p>\n            The following example shows how referring directly to a complex type column returns an error, while <span class=\"sql-docs-inline-code\">SELECT *</span>  on\n            the same table succeeds, but only retrieves the scalar columns.\n          </p> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_type_schema_pointer\" class=\"sql-docs-note\">\n      Many of the complex type examples refer to tables\n      such as <span class=\"sql-docs-inline-code\">CUSTOMER</span>  and <span class=\"sql-docs-inline-code\">REGION</span> \n      adapted from the tables used in the TPC-H benchmark.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_sample_schema\"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>\n      for the table definitions.\n      </div> <div class=\"sql-docs-code-block\"></div><p>\n            References to fields within <span class=\"sql-docs-inline-code\">STRUCT</span>  columns use dot notation. If the field name is unambiguous, you can omit\n            qualifiers such as table name, column name, or even the <span class=\"sql-docs-inline-code\">ITEM</span>  or <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumn names for\n            <span class=\"sql-docs-inline-code\">STRUCT</span>  elements inside an <span class=\"sql-docs-inline-code\">ARRAY</span>  or a <span class=\"sql-docs-inline-code\">MAP</span> .\n          </p> <div class=\"sql-docs-code-block\">SELECT id, address.city FROM customers WHERE address.zip = 94305;<br/></div><p>\n            References to elements within <span class=\"sql-docs-inline-code\">ARRAY</span>  columns use the <span class=\"sql-docs-inline-code\">ITEM</span>  pseudocolumn:\n          </p> <div class=\"sql-docs-code-block\">select r_name, r_nations.item.n_name from region, region.r_nations limit 7;<br/>+--------+----------------+<br/>| r_name | item.n_name    |<br/>+--------+----------------+<br/>| EUROPE | UNITED KINGDOM |<br/>| EUROPE | RUSSIA         |<br/>| EUROPE | ROMANIA        |<br/>| EUROPE | GERMANY        |<br/>| EUROPE | FRANCE         |<br/>| ASIA   | VIETNAM        |<br/>| ASIA   | CHINA          |<br/>+--------+----------------+<br/></div><p>\n            References to fields within <span class=\"sql-docs-inline-code\">MAP</span>  columns use the <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumns.\n            In this example, once the query establishes the alias <span class=\"sql-docs-inline-code\">MAP_FIELD</span>  for a <span class=\"sql-docs-inline-code\">MAP</span>  column with a\n            <span class=\"sql-docs-inline-code\">STRING</span>  key and an <span class=\"sql-docs-inline-code\">INT</span>  value, the query can refer to <span class=\"sql-docs-inline-code\">MAP_FIELD.KEY</span>  and\n            <span class=\"sql-docs-inline-code\">MAP_FIELD.VALUE</span> , which have zero, one, or many instances for each row from the containing table.\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            When complex types are nested inside each other, you use a combination of joins, pseudocolumn names, and dot notation to refer\n            to specific fields at the appropriate level. This is the most frequent form of query syntax for complex columns, because the\n            typical use case involves two levels of complex types, such as an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span>  elements.\n          </p> <div class=\"sql-docs-code-block\">SELECT id, phone_numbers.area_code FROM contact_info_many_structs INNER JOIN contact_info_many_structs.phone_numbers phone_numbers LIMIT 3;<br/></div><p>\n            You can express relationships between <span class=\"sql-docs-inline-code\">ARRAY</span>  and <span class=\"sql-docs-inline-code\">MAP</span>  columns at different levels as joins. You\n            include comparison operators between fields at the top level and within the nested type columns so that Impala can do the\n            appropriate join operation.\n          </p> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_type_schema_pointer\" class=\"sql-docs-note\">\n      Many of the complex type examples refer to tables\n      such as <span class=\"sql-docs-inline-code\">CUSTOMER</span>  and <span class=\"sql-docs-inline-code\">REGION</span> \n      adapted from the tables used in the TPC-H benchmark.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_sample_schema\"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>\n      for the table definitions.\n      </div> <p>\n            For example, the following queries work equivalently. They each return customer and order data for customers that have at least\n            one order.\n          </p> <div class=\"sql-docs-code-block\">SELECT c.c_name, o.o_orderkey FROM customer c, c.c_orders o LIMIT 5;<br/>+--------------------+------------+<br/>| c_name             | o_orderkey |<br/>+--------------------+------------+<br/>| Customer#000072578 | 558821     |<br/>| Customer#000072578 | 2079810    |<br/>| Customer#000072578 | 5768068    |<br/>| Customer#000072578 | 1805604    |<br/>| Customer#000072578 | 3436389    |<br/>+--------------------+------------+<br/><br/>SELECT c.c_name, o.o_orderkey FROM customer c INNER JOIN c.c_orders o LIMIT 5;<br/>+--------------------+------------+<br/>| c_name             | o_orderkey |<br/>+--------------------+------------+<br/>| Customer#000072578 | 558821     |<br/>| Customer#000072578 | 2079810    |<br/>| Customer#000072578 | 5768068    |<br/>| Customer#000072578 | 1805604    |<br/>| Customer#000072578 | 3436389    |<br/>+--------------------+------------+<br/></div><p>\n            The following query using an outer join returns customers that have orders, plus customers with no orders (no entries in the\n            <span class=\"sql-docs-inline-code\">C_ORDERS</span>  array):\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            The following query returns <i>only</i>  customers that have no orders. (With <span class=\"sql-docs-inline-code\">LEFT ANTI JOIN</span>  or <span class=\"sql-docs-inline-code\">LEFT\n            SEMI JOIN</span> , the query can only refer to columns from the left-hand table, because by definition there is no matching\n            information in the right-hand table.)\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            You can also perform correlated subqueries to examine the properties of complex type columns for each row in the result set.\n          </p> <p>\n            Count the number of orders per customer. Note the correlated reference to the table alias <span class=\"sql-docs-inline-code\">C</span> . The\n            <span class=\"sql-docs-inline-code\">COUNT(*)</span>  operation applies to all the elements of the <span class=\"sql-docs-inline-code\">C_ORDERS</span>  array for the corresponding\n            row, avoiding the need for a <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause.\n          </p> <div class=\"sql-docs-code-block\">select c_name, howmany FROM customer c, (SELECT COUNT(*) howmany FROM c.c_orders) v limit 5;<br/>+--------------------+---------+<br/>| c_name             | howmany |<br/>+--------------------+---------+<br/>| Customer#000030065 | 15      |<br/>| Customer#000065455 | 18      |<br/>| Customer#000113644 | 21      |<br/>| Customer#000111078 | 0       |<br/>| Customer#000024621 | 0       |<br/>+--------------------+---------+<br/></div><p>\n            Count the number of orders per customer, ignoring any customers that have not placed any orders:\n          </p> <div class=\"sql-docs-code-block\">SELECT c_name, howmany_orders<br/>FROM<br/>  customer c,<br/>  (SELECT COUNT(*) howmany_orders FROM c.c_orders) subq1<br/>WHERE howmany_orders > 0<br/>LIMIT 5;<br/>+--------------------+----------------+<br/>| c_name             | howmany_orders |<br/>+--------------------+----------------+<br/>| Customer#000072578 | 7              |<br/>| Customer#000046378 | 26             |<br/>| Customer#000069815 | 11             |<br/>| Customer#000079058 | 12             |<br/>| Customer#000092239 | 26             |<br/>+--------------------+----------------+<br/></div><p>\n            Count the number of line items in each order. The reference to <span class=\"sql-docs-inline-code\">C.C_ORDERS</span>  in the <span class=\"sql-docs-inline-code\">FROM</span>  clause\n            is needed because the <span class=\"sql-docs-inline-code\">O_ORDERKEY</span>  field is a member of the elements in the <span class=\"sql-docs-inline-code\">C_ORDERS</span>  array. The\n            subquery labelled <span class=\"sql-docs-inline-code\">SUBQ1</span>  is correlated: it is re-evaluated for the <span class=\"sql-docs-inline-code\">C_ORDERS.O_LINEITEMS</span>  array\n            from each row of the <span class=\"sql-docs-inline-code\">CUSTOMERS</span>  table.\n          </p> <div class=\"sql-docs-code-block\">SELECT c_name, o_orderkey, howmany_line_items<br/>FROM<br/>  customer c,<br/>  c.c_orders t2,<br/>  (SELECT COUNT(*) howmany_line_items FROM c.c_orders.o_lineitems) subq1<br/>WHERE howmany_line_items > 0<br/>LIMIT 5;<br/>+--------------------+------------+--------------------+<br/>| c_name             | o_orderkey | howmany_line_items |<br/>+--------------------+------------+--------------------+<br/>| Customer#000020890 | 1884930    | 95                 |<br/>| Customer#000020890 | 4570754    | 95                 |<br/>| Customer#000020890 | 3771072    | 95                 |<br/>| Customer#000020890 | 2555489    | 95                 |<br/>| Customer#000020890 | 919171     | 95                 |<br/>+--------------------+------------+--------------------+<br/></div><p>\n            Get the number of orders, the average order price, and the maximum items in any order per customer. For this example, the\n            subqueries labelled <span class=\"sql-docs-inline-code\">SUBQ1</span>  and <span class=\"sql-docs-inline-code\">SUBQ2</span>  are correlated: they are re-evaluated for each row from\n            the original <span class=\"sql-docs-inline-code\">CUSTOMER</span>  table, and only apply to the complex columns associated with that row.\n          </p> <div class=\"sql-docs-code-block\">SELECT c_name, howmany, average_price, most_items<br/>FROM<br/>  customer c,<br/>  (SELECT COUNT(*) howmany, AVG(o_totalprice) average_price FROM c.c_orders) subq1,<br/>  (SELECT MAX(l_quantity) most_items FROM c.c_orders.o_lineitems ) subq2<br/>LIMIT 5;<br/>+--------------------+---------+---------------+------------+<br/>| c_name             | howmany | average_price | most_items |<br/>+--------------------+---------+---------------+------------+<br/>| Customer#000030065 | 15      | 128908.34     | 50.00      |<br/>| Customer#000088191 | 0       | NULL          | NULL       |<br/>| Customer#000101555 | 10      | 164250.31     | 50.00      |<br/>| Customer#000022092 | 0       | NULL          | NULL       |<br/>| Customer#000036277 | 27      | 166040.06     | 50.00      |<br/>+--------------------+---------+---------------+------------+<br/></div><p>\n            For example, these queries show how to access information about the <span class=\"sql-docs-inline-code\">ARRAY</span>  elements within the\n            <span class=\"sql-docs-inline-code\">CUSTOMER</span>  table from the <q>nested TPC-H</q>  schema, starting with the initial <span class=\"sql-docs-inline-code\">ARRAY</span>  elements\n            and progressing to examine the <span class=\"sql-docs-inline-code\">STRUCT</span>  fields of the <span class=\"sql-docs-inline-code\">ARRAY</span> , and then the elements nested within\n            another <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span> :\n          </p> <div class=\"sql-docs-code-block\"></div></div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_pseudocolumns\"><h4>Pseudocolumns for ARRAY and MAP Types</h4> <div><p>\n          Each element in an <span class=\"sql-docs-inline-code\">ARRAY</span>  type has a position, indexed starting from zero, and a value. Each element in a\n          <span class=\"sql-docs-inline-code\">MAP</span>  type represents a key-value pair. Impala provides pseudocolumns that let you retrieve this metadata as part\n          of a query, or filter query results by including such things in a <span class=\"sql-docs-inline-code\">WHERE</span>  clause. You refer to the pseudocolumns as\n          part of qualified column names in queries:\n        </p> <ul><li><span class=\"sql-docs-inline-code\">ITEM</span> : The value of an array element. If the <span class=\"sql-docs-inline-code\">ARRAY</span>  contains <span class=\"sql-docs-inline-code\">STRUCT</span>  elements,\n            you can refer to either <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_name</span> .ITEM.<span class=\"sql-docs-variable\">field_name</span> </span>  or use the shorthand\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_name</span> .<span class=\"sql-docs-variable\">field_name</span> </span> .\n          </li> <li><span class=\"sql-docs-inline-code\">POS</span> : The position of an element within an array.\n          </li> <li><span class=\"sql-docs-inline-code\">KEY</span> : The value forming the first part of a key-value pair in a map. It is not necessarily unique.\n          </li> <li><span class=\"sql-docs-inline-code\">VALUE</span> : The data item forming the second part of a key-value pair in a map. If the <span class=\"sql-docs-inline-code\">VALUE</span>  part\n            of the <span class=\"sql-docs-inline-code\">MAP</span>  element is a <span class=\"sql-docs-inline-code\">STRUCT</span> , you can refer to either\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_name</span> .VALUE.<span class=\"sql-docs-variable\">field_name</span> </span>  or use the shorthand\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_name</span> .<span class=\"sql-docs-variable\">field_name</span> </span> .\n          </li> </ul> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_item\"><h4 id=\"../Impala/docs/topics/impala_complex_types.xml_pos\">ITEM and POS Pseudocolumns</h4> <div><p>\n            When an <span class=\"sql-docs-inline-code\">ARRAY</span>  column contains <span class=\"sql-docs-inline-code\">STRUCT</span>  elements, you can refer to a field within the\n            <span class=\"sql-docs-inline-code\">STRUCT</span>  using a qualified name of the form\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_column</span> .<span class=\"sql-docs-variable\">field_name</span> </span> . If the <span class=\"sql-docs-inline-code\">ARRAY</span>  contains scalar\n            values, Impala recognizes the special name <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_column</span> .ITEM</span>  to represent the value of each\n            scalar array element. For example, if a column contained an <span class=\"sql-docs-inline-code\">ARRAY</span>  where each element was a\n            <span class=\"sql-docs-inline-code\">STRING</span> , you would use <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_name</span> .ITEM</span>  to refer to each scalar value in the\n            <span class=\"sql-docs-inline-code\">SELECT</span>  list, or the <span class=\"sql-docs-inline-code\">WHERE</span>  or other clauses.\n          </p> <p>\n            This example shows a table with two <span class=\"sql-docs-inline-code\">ARRAY</span>  columns whose elements are of the scalar type\n            <span class=\"sql-docs-inline-code\">STRING</span> . When referring to the values of the array elements in the <span class=\"sql-docs-inline-code\">SELECT</span>  list,\n            <span class=\"sql-docs-inline-code\">WHERE</span>  clause, or <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause, you use the <span class=\"sql-docs-inline-code\">ITEM</span>  pseudocolumn because\n            within the array, the individual elements have no defined names.\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            Because an array is inherently an ordered data structure, Impala recognizes the special name\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">array_column</span> .POS</span>  to represent the numeric position of each element within the array. The\n            <span class=\"sql-docs-inline-code\">POS</span>  pseudocolumn lets you filter or reorder the result set based on the sequence of array elements.\n          </p> <p>\n            The following example uses a table from a flattened version of the TPC-H schema. The <span class=\"sql-docs-inline-code\">REGION</span>  table only has a\n            few rows, such as one row for Europe and one for Asia. The row for each region represents all the countries in that region as an\n            <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span>  elements:\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            To find the countries within a specific region, you use a join query. To find out the order of elements in the array, you also\n            refer to the <span class=\"sql-docs-inline-code\">POS</span>  pseudocolumn in the select list:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > SELECT r1.r_name, r2.n_name, <b>r2.POS</b> > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = 'ASIA';<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | VIETNAM   | 0   |<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | INDONESIA | 3   |<br/>| ASIA   | INDIA     | 4   |<br/>+--------+-----------+-----+<br/></div><p>\n            Once you know the positions of the elements, you can use that information in subsequent queries, for example to change the\n            ordering of results from the complex type column or to filter certain elements from the array:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > SELECT r1.r_name, r2.n_name, r2.POS<br/>                  > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = 'ASIA'<br/>                  > <b>ORDER BY r2.POS DESC</b> ;<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | INDIA     | 4   |<br/>| ASIA   | INDONESIA | 3   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | VIETNAM   | 0   |<br/>+--------+-----------+-----+<br/>[localhost:21000] > SELECT r1.r_name, r2.n_name, r2.POS<br/>                  > FROM region r1 INNER JOIN r1.r_nations r2<br/>                  > WHERE r1.r_name = 'ASIA' AND <b>r2.POS BETWEEN 1 and 3</b> ;<br/>+--------+-----------+-----+<br/>| r_name | n_name    | pos |<br/>+--------+-----------+-----+<br/>| ASIA   | CHINA     | 1   |<br/>| ASIA   | JAPAN     | 2   |<br/>| ASIA   | INDONESIA | 3   |<br/>+--------+-----------+-----+<br/></div></div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_key\"><h4 id=\"../Impala/docs/topics/impala_complex_types.xml_value\">KEY and VALUE Pseudocolumns</h4> <div><p>\n            The <span class=\"sql-docs-inline-code\">MAP</span>  data type is suitable for representing sparse or wide data structures, where each row might only have\n            entries for a small subset of named fields. Because the element names (the map keys) vary depending on the row, a query must be\n            able to refer to both the key and the value parts of each key-value pair. The <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span> \n            pseudocolumns let you refer to the parts of the key-value pair independently within the query, as\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_column</span> .KEY</span>  and <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_column</span> .VALUE</span> .\n          </p> <p>\n            The <span class=\"sql-docs-inline-code\">KEY</span>  must always be a scalar type, such as <span class=\"sql-docs-inline-code\">STRING</span> , <span class=\"sql-docs-inline-code\">BIGINT</span> , or\n            <span class=\"sql-docs-inline-code\">TIMESTAMP</span> . It can be <span class=\"sql-docs-inline-code\">NULL</span> . Values of the <span class=\"sql-docs-inline-code\">KEY</span>  field are not necessarily unique\n            within the same <span class=\"sql-docs-inline-code\">MAP</span> . You apply any required <span class=\"sql-docs-inline-code\">DISTINCT</span> , <span class=\"sql-docs-inline-code\">GROUP BY</span> , and other\n            clauses in the query, and loop through the result set to process all the values matching any specified keys.\n          </p> <p>\n            The <span class=\"sql-docs-inline-code\">VALUE</span>  can be either a scalar type or another complex type. If the <span class=\"sql-docs-inline-code\">VALUE</span>  is a\n            <span class=\"sql-docs-inline-code\">STRUCT</span> , you can construct a qualified name\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_column</span> .VALUE.<span class=\"sql-docs-variable\">struct_field</span> </span>  to refer to the individual fields inside\n            the value part. If the <span class=\"sql-docs-inline-code\">VALUE</span>  is an <span class=\"sql-docs-inline-code\">ARRAY</span>  or another <span class=\"sql-docs-inline-code\">MAP</span> , you must include\n            another join condition that establishes a table alias for <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">map_column</span> .VALUE</span> , and then\n            construct another qualified name using that alias, for example <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">table_alias</span> .ITEM</span>  or\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">table_alias</span> .KEY</span>  and <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">table_alias</span> .VALUE</span> </p> <p>\n            The following example shows different ways to access a <span class=\"sql-docs-inline-code\">MAP</span>  column using the <span class=\"sql-docs-inline-code\">KEY</span>  and\n            <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumns. The <span class=\"sql-docs-inline-code\">DETAILS</span>  column has a <span class=\"sql-docs-inline-code\">STRING</span>  first part with short,\n            standardized values such as <span class=\"sql-docs-inline-code\">'Recurring'</span> , <span class=\"sql-docs-inline-code\">'Lucid'</span> , or <span class=\"sql-docs-inline-code\">'Anxiety'</span> . This is the\n            <q>key</q>  that is used to look up particular kinds of elements from the <span class=\"sql-docs-inline-code\">MAP</span> . The second part, also a\n            <span class=\"sql-docs-inline-code\">STRING</span> , is a longer free-form explanation. Impala gives you the standard pseudocolumn names\n            <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span>  for the two parts, and you apply your own conventions and interpretations to the\n            underlying values.\n          </p> <div class=\"sql-docs-note\">\n            If you find that the single-item nature of the <span class=\"sql-docs-inline-code\">VALUE</span>  makes it difficult to model your data accurately, the\n            solution is typically to add some nesting to the complex type. For example, to have several sets of key-value pairs, make the\n            column an <span class=\"sql-docs-inline-code\">ARRAY</span>  whose elements are <span class=\"sql-docs-inline-code\">MAP</span> . To make a set of key-value pairs that holds more\n            elaborate information, make a <span class=\"sql-docs-inline-code\">MAP</span>  column whose <span class=\"sql-docs-inline-code\">VALUE</span>  part contains an <span class=\"sql-docs-inline-code\">ARRAY</span> \n            or a <span class=\"sql-docs-inline-code\">STRUCT</span> .\n          </div> <div class=\"sql-docs-code-block\">-- What are all the types of dreams that are recorded?<br/>SELECT DISTINCT details.KEY FROM dream_journal, dream_journal.details;<br/><br/>-- How many lucid dreams were recorded?<br/>-- Because there is no GROUP BY, we count the 'Lucid' keys across all rows.<br/>SELECT <b>COUNT(details.KEY)</b> FROM dream_journal, dream_journal.details<br/>WHERE <b>details.KEY = 'Lucid'</b> ;<br/><br/>-- Print a report of a subset of dreams, filtering based on both the lookup key<br/>-- and the detailed value.<br/>SELECT dream_id, <b>details.KEY AS \"Dream Type\"</b> , <b>details.VALUE AS \"Dream Summary\"</b> FROM dream_journal, dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN ('Happy', 'Pleasant', 'Joyous')</b> AND <b>details.VALUE LIKE '%childhood%'</b> ;<br/></div><p>\n            The following example shows a more elaborate version of the previous table, where the <span class=\"sql-docs-inline-code\">VALUE</span>  part of the\n            <span class=\"sql-docs-inline-code\">MAP</span>  entry is a <span class=\"sql-docs-inline-code\">STRUCT</span>  rather than a scalar type. Now instead of referring to the\n            <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumn directly, you use dot notation to refer to the <span class=\"sql-docs-inline-code\">STRUCT</span>  fields inside it.\n          </p> <div class=\"sql-docs-code-block\">-- Do more elaborate reporting and filtering by examining multiple attributes within the same dream.<br/>SELECT dream_id, <b>details.KEY AS \"Dream Type\"</b> , <b>details.VALUE.summary AS \"Dream Summary\"</b> , <b>details.VALUE.duration AS \"Duration\"</b> FROM better_dream_journal, better_dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN ('Anxiety', 'Nightmare')</b> AND <b>details.VALUE.duration > 60</b> AND <b>details.VALUE.woke_up = TRUE</b> ;<br/><br/>-- Remember that if the ITEM or VALUE contains a STRUCT, you can reference<br/>-- the STRUCT fields directly without the .ITEM or .VALUE qualifier.<br/>SELECT dream_id, <b>details.KEY AS \"Dream Type\"</b> , <b>details.summary AS \"Dream Summary\"</b> , <b>details.duration AS \"Duration\"</b> FROM better_dream_journal, better_dream_journal.details<br/>WHERE<br/>  <b>details.KEY IN ('Anxiety', 'Nightmare')</b> AND <b>details.duration > 60</b> AND <b>details.woke_up = TRUE</b> ;<br/></div></div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_etl\"><h4>Loading Data Containing Complex Types</h4> <div><p>\n          Because the Impala <span class=\"sql-docs-inline-code\">INSERT</span>  statement does not currently support creating new data with complex type columns, or\n          copying existing complex type values from one table to another, you primarily use Impala to query Parquet tables with complex\n          types where the data was inserted through Hive, or create tables with complex types where you already have existing Parquet data\n          files.\n        </p> <p>\n          If you have created a Hive table with the Parquet file format and containing complex types, use the same table for Impala queries\n          with no changes. If you have such a Hive table in some other format, use a Hive <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT ... STORED AS\n          PARQUET</span>  or <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span>  statement to produce an equivalent Parquet table that Impala can query.\n        </p> <p>\n          If you have existing Parquet data files containing complex types, located outside of any Impala or Hive table, such as data files\n          created by Spark jobs, you can use an Impala <span class=\"sql-docs-inline-code\">CREATE TABLE ... STORED AS PARQUET</span>  statement, followed by an Impala\n          <span class=\"sql-docs-inline-code\">LOAD DATA</span>  statement to move the data files into the table. As an alternative, you can use an Impala\n          <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>  statement to create a table pointing to the HDFS directory that already contains the data\n          files.\n        </p> <p>\n          Perhaps the simplest way to get started with complex type data is to take a denormalized table containing duplicated values, and\n          use an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span>  statement to copy the data into a Parquet table and condense the repeated values into\n          complex types. With the Hive <span class=\"sql-docs-inline-code\">INSERT</span>  statement, you use the <span class=\"sql-docs-inline-code\">COLLECT_LIST()</span> ,\n          <span class=\"sql-docs-inline-code\">NAMED_STRUCT()</span> , and <span class=\"sql-docs-inline-code\">MAP()</span>  constructor functions within a <span class=\"sql-docs-inline-code\">GROUP BY</span>  query to\n          produce the complex type values. <span class=\"sql-docs-inline-code\">COLLECT_LIST()</span>  turns a sequence of values into an <span class=\"sql-docs-inline-code\">ARRAY</span> .\n          <span class=\"sql-docs-inline-code\">NAMED_STRUCT()</span>  uses the first, third, and so on arguments as the field names for a <span class=\"sql-docs-inline-code\">STRUCT</span> , to\n          match the field names from the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement.\n        </p> <div class=\"sql-docs-note\">\n          Because Hive currently cannot construct individual rows using complex types through the <span class=\"sql-docs-inline-code\">INSERT ... VALUES</span>  syntax,\n          you prepare the data in flat form in a separate table, then copy it to the table with complex columns using <span class=\"sql-docs-inline-code\">INSERT ...\n          SELECT</span>  and the complex type constructors. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types_ex_hive_etl\"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> </a> for\n          examples.\n        </div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_nesting\"><h4>Using Complex Types as Nested Types</h4> <div><p>\n          The <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , and <span class=\"sql-docs-inline-code\">MAP</span>  types can be the top-level types for <q>nested\n          type</q>  columns. That is, each of these types can contain other complex or scalar types, with multiple levels of nesting to a\n          maximum depth of 100. For example, you can have an array of structures, a map containing other maps, a structure containing an\n          array of other structures, and so on. At the lowest level, there are always scalar types making up the fields of a\n          <span class=\"sql-docs-inline-code\">STRUCT</span> , elements of an <span class=\"sql-docs-inline-code\">ARRAY</span> , and keys and values of a <span class=\"sql-docs-inline-code\">MAP</span> .\n        </p> <p>\n          Schemas involving complex types typically use some level of nesting for the complex type columns.\n        </p> <p>\n          For example, to model a relationship like a dimension table and a fact table, you typically use an <span class=\"sql-docs-inline-code\">ARRAY</span>  where\n          each array element is a <span class=\"sql-docs-inline-code\">STRUCT</span> . The <span class=\"sql-docs-inline-code\">STRUCT</span>  fields represent what would traditionally be columns\n          in a separate joined table. It makes little sense to use a <span class=\"sql-docs-inline-code\">STRUCT</span>  as the top-level type for a column, because you\n          could just make the fields of the <span class=\"sql-docs-inline-code\">STRUCT</span>  into regular table columns.\n        </p> <p>\n          Perhaps the only use case for a top-level <span class=\"sql-docs-inline-code\">STRUCT</span>  would be to to allow <span class=\"sql-docs-inline-code\">STRUCT</span>  fields with the\n          same name as columns to coexist in the same table. The following example shows how a table could have a column named\n          <span class=\"sql-docs-inline-code\">ID</span> , and two separate <span class=\"sql-docs-inline-code\">STRUCT</span>  fields also named <span class=\"sql-docs-inline-code\">ID</span> . Because the\n          <span class=\"sql-docs-inline-code\">STRUCT</span>  fields are always referenced using qualified names, the identical <span class=\"sql-docs-inline-code\">ID</span>  names do not cause a\n          conflict.\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          It is common to make the value portion of each key-value pair in a <span class=\"sql-docs-inline-code\">MAP</span>  a <span class=\"sql-docs-inline-code\">STRUCT</span> ,\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span> , or other complex type variation. That way, each key in the <span class=\"sql-docs-inline-code\">MAP</span> \n          can be associated with a flexible and extensible data structure. The key values are not predefined ahead of time (other than by\n          specifying their data type). Therefore, the <span class=\"sql-docs-inline-code\">MAP</span>  can accomodate a rapidly evolving schema, or sparse data\n          structures where each row contains only a few data values drawn from a large set of possible choices.\n        </p> <p>\n          Although you can use an <span class=\"sql-docs-inline-code\">ARRAY</span>  of scalar values as the top-level column in a table, such a simple array is\n          typically of limited use for analytic queries. The only property of the array elements, aside from the element value, is the\n          ordering sequence available through the <span class=\"sql-docs-inline-code\">POS</span>  pseudocolumn. To record any additional item about each array element,\n          such as a <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  or a symbolic name, you use an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span>  rather than\n          of scalar values.\n        </p> <p>\n          If you are considering having multiple <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span>  columns, with related items under the same\n          position in each <span class=\"sql-docs-inline-code\">ARRAY</span>  or the same key in each <span class=\"sql-docs-inline-code\">MAP</span> , prefer to use a <span class=\"sql-docs-inline-code\">STRUCT</span>  to\n          group all the related items into a single <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span> . Doing so avoids the additional storage\n          overhead and potential duplication of key values from having an extra complex type column. Also, because each\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span>  that you reference in the query <span class=\"sql-docs-inline-code\">SELECT</span>  list requires an additional\n          join clause, minimizing the number of complex type columns also makes the query easier to read and maintain, relying more on dot\n          notation to refer to the relevant fields rather than a sequence of join clauses.\n        </p> <p>\n          For example, here is a table with several complex type columns all at the top level and containing only scalar types. To retrieve\n          every data item for the row requires a separate join for each <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span>  column. The fields of\n          the <span class=\"sql-docs-inline-code\">STRUCT</span>  can be referenced using dot notation, but there is no real advantage to using the\n          <span class=\"sql-docs-inline-code\">STRUCT</span>  at the top level rather than just making separate columns <span class=\"sql-docs-inline-code\">FIELD1</span>  and\n          <span class=\"sql-docs-inline-code\">FIELD2</span> .\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          For example, here is a table with columns containing an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span> , a <span class=\"sql-docs-inline-code\">MAP</span> \n          where each key value is a <span class=\"sql-docs-inline-code\">STRUCT</span> , and a <span class=\"sql-docs-inline-code\">MAP</span>  where each key value is an <span class=\"sql-docs-inline-code\">ARRAY</span>  of\n          <span class=\"sql-docs-inline-code\">STRUCT</span> .\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          The <span class=\"sql-docs-inline-code\">DESCRIBE</span>  statement rearranges the <span class=\"sql-docs-inline-code\"><</span>  and <span class=\"sql-docs-inline-code\">></span>  separators and the field\n          names within each <span class=\"sql-docs-inline-code\">STRUCT</span>  for easy readability:\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          To query the complex type columns, you use join notation to refer to the lowest-level scalar values. If the value is an\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  element, the fully qualified name includes the <span class=\"sql-docs-inline-code\">ITEM</span>  pseudocolumn. If the value is inside a\n          <span class=\"sql-docs-inline-code\">MAP</span> , the fully qualified name includes the <span class=\"sql-docs-inline-code\">KEY</span>  or <span class=\"sql-docs-inline-code\">VALUE</span>  pseudocolumn. Each\n          reference to a different <span class=\"sql-docs-inline-code\">ARRAY</span>  or <span class=\"sql-docs-inline-code\">MAP</span>  (even if nested inside another complex type) requires an\n          additional join clause.\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          Once you understand the notation to refer to a particular data item in the <span class=\"sql-docs-inline-code\">SELECT</span>  list, you can use the same\n          qualified name to refer to that data item in other parts of the query, such as the <span class=\"sql-docs-inline-code\">WHERE</span>  clause, <span class=\"sql-docs-inline-code\">ORDER\n          BY</span>  or <span class=\"sql-docs-inline-code\">GROUP BY</span>  clauses, or calls to built-in functions. For example, you might frequently retrieve the\n          <span class=\"sql-docs-inline-code\">VALUE</span>  part of each <span class=\"sql-docs-inline-code\">MAP</span>  item in the <span class=\"sql-docs-inline-code\">SELECT</span>  list, while choosing the specific\n          <span class=\"sql-docs-inline-code\">MAP</span>  items by running comparisons against the <span class=\"sql-docs-inline-code\">KEY</span>  part in the <span class=\"sql-docs-inline-code\">WHERE</span>  clause.\n        </p> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_views\"><h4>Accessing Complex Type Data in Flattened Form Using Views</h4> <div><p>\n          The layout of complex and nested types is largely a physical consideration. The complex type columns reside in the same data files\n          rather than in separate normalized tables, for your convenience in managing related data sets and performance in querying related\n          data sets. You can use views to treat tables with complex types as if they were flattened. By putting the join logic and\n          references to the complex type columns in the view definition, you can query the same tables using existing queries intended for\n          tables containing only scalar columns. This technique also lets you use tables with complex types with BI tools that are not aware\n          of the data types and query notation for accessing complex type columns.\n        </p> <p>\n          For example, the variation of the TPC-H schema containing complex types has a table <span class=\"sql-docs-inline-code\">REGION</span> . This table has 5\n          rows, corresponding to 5 regions such as <span class=\"sql-docs-inline-code\">NORTH AMERICA</span>  and <span class=\"sql-docs-inline-code\">AFRICA</span> . Each row has an\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  column, where each array item is a <span class=\"sql-docs-inline-code\">STRUCT</span>  containing details about a country in that\n          region.\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          The same data could be represented in traditional denormalized form, as a single table where the information about each region is\n          repeated over and over, alongside the information about each country. The nested complex types let us avoid the repetition, while\n          still keeping the data in a single table rather than normalizing across multiple tables.\n        </p> <p>\n          To use this table with a JDBC or ODBC application that expected scalar columns, we could create a view that represented the result\n          set as a set of scalar columns (three columns from the original table, plus three more from the <span class=\"sql-docs-inline-code\">STRUCT</span>  fields of\n          the array elements). In the following examples, any column with an <span class=\"sql-docs-inline-code\">R_*</span>  prefix is taken unchanged from the\n          original table, while any column with an <span class=\"sql-docs-inline-code\">N_*</span>  prefix is extracted from the <span class=\"sql-docs-inline-code\">STRUCT</span>  inside the\n          <span class=\"sql-docs-inline-code\">ARRAY</span> .\n        </p> <div class=\"sql-docs-code-block\">CREATE VIEW region_view AS<br/>  SELECT<br/>    r_regionkey,<br/>    r_name,<br/>    r_comment,<br/>    array_field.item.n_nationkey AS n_nationkey,<br/>    array_field.item.n_name AS n_name,<br/>    array_field.n_comment AS n_comment<br/>FROM<br/>  region, region.r_nations AS array_field;<br/></div><p>\n          Then we point the application queries at the view rather than the original table. From the perspective of the view, there are 25\n          rows in the result set, one for each nation in each region, and queries can refer freely to fields related to the region or the\n          nation.\n        </p> <div class=\"sql-docs-code-block\">-- Retrieve info such as the nation name from the original R_NATIONS array elements.<br/>select n_name from region_view where r_name in ('EUROPE', 'ASIA');<br/>+----------------+<br/>| n_name         |<br/>+----------------+<br/>| UNITED KINGDOM |<br/>| RUSSIA         |<br/>| ROMANIA        |<br/>| GERMANY        |<br/>| FRANCE         |<br/>| VIETNAM        |<br/>| CHINA          |<br/>| JAPAN          |<br/>| INDONESIA      |<br/>| INDIA          |<br/>+----------------+<br/><br/>-- UNITED STATES in AMERICA and UNITED KINGDOM in EUROPE.<br/>SELECT DISTINCT r_name FROM region_view WHERE n_name LIKE 'UNITED%';<br/>+---------+<br/>| r_name  |<br/>+---------+<br/>| AMERICA |<br/>| EUROPE  |<br/>+---------+<br/><br/>-- For conciseness, we only list some view columns in the SELECT list.<br/>-- SELECT * would bring back all the data, unlike SELECT *<br/>-- queries on the original table with complex type columns.<br/>SELECT r_regionkey, r_name, n_nationkey, n_name FROM region_view LIMIT 7;<br/>+-------------+--------+-------------+----------------+<br/>| r_regionkey | r_name | n_nationkey | n_name         |<br/>+-------------+--------+-------------+----------------+<br/>| 3           | EUROPE | 23          | UNITED KINGDOM |<br/>| 3           | EUROPE | 22          | RUSSIA         |<br/>| 3           | EUROPE | 19          | ROMANIA        |<br/>| 3           | EUROPE | 7           | GERMANY        |<br/>| 3           | EUROPE | 6           | FRANCE         |<br/>| 2           | ASIA   | 21          | VIETNAM        |<br/>| 2           | ASIA   | 18          | CHINA          |<br/>+-------------+--------+-------------+----------------+<br/></div></div> </div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_examples\"><h4>Tutorials and Examples for Complex Types</h4> <div><p>\n        The following examples illustrate the query syntax for some common use cases involving complex type columns.\n      </p> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_sample_schema\"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> <div><p>\n          The tables used for earlier examples of complex type syntax are trivial ones with no actual data. The more substantial examples of\n          the complex type feature use these tables, adapted from the schema used for TPC-H testing:\n        </p> <div class=\"sql-docs-code-block\"></div><p>\n          The volume of data used in the following examples is:\n        </p> <div class=\"sql-docs-code-block\"></div></div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_types_ex_hive_etl\"><h4>Constructing Parquet Files with Complex Columns Using Hive</h4> <div><p>\n          The following examples demonstrate the Hive syntax to transform flat data (tables with all scalar columns) into Parquet tables\n          where Impala can query the complex type columns. Each example shows the full sequence of steps, including switching back and forth\n          between Impala and Hive. Although the source table can use any file format, the destination table must use the Parquet file\n          format.\n        </p> <p><b>Create table with <span class=\"sql-docs-inline-code\">ARRAY</span>  in Impala, load data in Hive, query in Impala:</b> </p> <p>\n          This example shows the cycle of creating the tables and querying the complex data in Impala, and using Hive (either the\n          <span class=\"sql-docs-inline-code\">hive</span>  shell or <span class=\"sql-docs-inline-code\">beeline</span> ) for the data loading step. The data starts in flattened, denormalized\n          form in a text table. Hive writes the corresponding Parquet data, including an <span class=\"sql-docs-inline-code\">ARRAY</span>  column. Then Impala can run\n          analytic queries on the Parquet table, using join notation to unpack the <span class=\"sql-docs-inline-code\">ARRAY</span>  column.\n        </p> <div class=\"sql-docs-code-block\">/* Initial DDL and loading of flat, denormalized data happens in impala-shell */</div><div class=\"sql-docs-code-block\"></div><div class=\"sql-docs-code-block\"></div><p><b>Create table with <span class=\"sql-docs-inline-code\">STRUCT</span>  and <span class=\"sql-docs-inline-code\">ARRAY</span>  in Impala, load data in Hive, query in Impala:</b> </p> <p>\n          This example shows the cycle of creating the tables and querying the complex data in Impala, and using Hive (either the\n          <span class=\"sql-docs-inline-code\">hive</span>  shell or <span class=\"sql-docs-inline-code\">beeline</span> ) for the data loading step. The data starts in flattened, denormalized\n          form in a text table. Hive writes the corresponding Parquet data, including a <span class=\"sql-docs-inline-code\">STRUCT</span>  column with an\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  field. Then Impala can run analytic queries on the Parquet table, using join notation to unpack the\n          <span class=\"sql-docs-inline-code\">ARRAY</span>  field from the <span class=\"sql-docs-inline-code\">STRUCT</span>  column.\n        </p> <div class=\"sql-docs-code-block\"></div><div class=\"sql-docs-code-block\"></div><div class=\"sql-docs-code-block\"></div></div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_denormalizing\"><h4>Flattening Normalized Tables into a Single Table with Complex Types</h4> <div><p>\n          One common use for complex types is to embed the contents of one table into another. The traditional technique of denormalizing\n          results in a huge number of rows with some column values repeated over and over. With complex types, you can keep the same number\n          of rows as in the original normalized table, and put all the associated data from the other table in a single new column.\n        </p> <p>\n          In this flattening scenario, you might frequently use a column that is an <span class=\"sql-docs-inline-code\">ARRAY</span>  consisting of\n          <span class=\"sql-docs-inline-code\">STRUCT</span>  elements, where each field within the <span class=\"sql-docs-inline-code\">STRUCT</span>  corresponds to a column name from the table\n          that you are combining.\n        </p> <p>\n          The following example shows a traditional normalized layout using two tables, and then an equivalent layout using complex types in\n          a single table.\n        </p> <div class=\"sql-docs-code-block\"></div></div> </div> <div id=\"../Impala/docs/topics/impala_complex_types.xml_complex_inference\"><h4>Interchanging Complex Type Tables and Data Files with Hive and Other Components</h4> <div><p>\n          You can produce Parquet data files through several Hadoop components and APIs.\n        </p> <p>\n          If you have a Hive-created Parquet table that includes <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> \n          columns, Impala can query that same table in Impala 2.3 and higher, subject to the usual restriction that all other\n          columns are of data types supported by Impala, and also that the file type of the table must be Parquet.\n        </p> <p>\n          If you have a Parquet data file produced outside of Impala, Impala can automatically deduce the appropriate table structure using\n          the syntax <span class=\"sql-docs-inline-code\">CREATE TABLE ... LIKE PARQUET '<span class=\"sql-docs-variable\">hdfs_path_of_parquet_file</span> '</span> . In Impala 2.3\n          and higher, this feature works for Parquet files that include <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , or\n          <span class=\"sql-docs-inline-code\">MAP</span>  types.\n        </p> <div class=\"sql-docs-code-block\"></div></div> </div> </div> ","title":"Complex Types (Impala 2.3 or higher only)"}