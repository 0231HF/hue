{"body":"<div><p>\n      A data type used in <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER\n        TABLE</span> statements.\n    </p><p id=\"../Impala/docs/topics/impala_string.xml_syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and\n        <span class=\"sql-docs-inline-code\">ALTER TABLE</span> statements:\n    </p><div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> STRING</div><p><b>Length:</b></p><p><span class=\"sql-docs-inline-code\">\n      If you need to manipulate string values with precise or\n        maximum lengths, in Impala 2.0 and higher you can declare columns as\n            <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">max_length</span>)</span> or\n            <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">length</span>)</span>, but for best\n        performance use <span class=\"sql-docs-inline-code\">STRING</span> where practical.</span></p><p>\n      Take the following considerations for <span class=\"sql-docs-inline-code\">STRING</span>\n      lengths:\n    </p><ul><li>\n        The hard limit on the size of a <span class=\"sql-docs-inline-code\">STRING</span> and the total\n        size of a row is 2 GB.\n\n        <p>\n          If a query tries to process or create a string\n          larger than this limit, it will return an error to the user.\n        </p></li><li>\n        The limit is 1 GB on <span class=\"sql-docs-inline-code\">STRING</span> when writing to Parquet\n        files.\n      </li><li>\n        Queries operating on strings with 32 KB or less will work reliably and\n        will not hit significant performance or memory problems (unless you have\n        very complex queries, very many columns, etc.)\n      </li><li>\n        Performance and memory consumption may degrade with strings larger\n        than 32 KB.\n      </li><li>\n        The row size, i.e. the total size of all string and other columns, is\n        subject to lower limits at various points in query execution that\n        support spill-to-disk. A few examples for lower row size limits are:\n\n        <ul><li>\n            Rows coming from the right side of any hash join\n          </li><li>\n            Rows coming from either side of a hash join that spills to disk\n          </li><li>\n            Rows being sorted by the <span class=\"sql-docs-inline-code\">SORT</span> operator without a\n            limit\n          </li><li>\n            Rows in a grouping aggregation\n          </li></ul><p>\n          In Impala 2.9 and lower, the default limit of\n          the row size in the above cases is 8 MB.\n        </p><p>\n          In Impala 2.10 and higher, the max row size is configurable on\n          a per-query basis with the <span class=\"sql-docs-inline-code\">MAX_ROW_SIZE</span> query option.\n          Rows up to <span class=\"sql-docs-inline-code\">MAX_ROW_SIZE</span> (which defaults to 512 KB)\n          can always be processed in the above cases. Rows larger than\n            <span class=\"sql-docs-inline-code\">MAX_ROW_SIZE</span> are processed on a best-effort basis.\n          See <span>MAX_ROW_SIZE</span> for more\n          details.\n        </p></li></ul><p><b>Character sets:</b></p><p>\n      For full support in all Impala subsystems, restrict string values to the\n      ASCII character set. Although some UTF-8 character data can be stored in\n      Impala and retrieved through queries, UTF-8 strings containing non-ASCII\n      characters are not guaranteed to work properly in combination with many\n      SQL aspects, including but not limited to:\n    </p><ul><li>\n        String manipulation functions.\n      </li><li>\n        Comparison operators.\n      </li><li>\n        The <span class=\"sql-docs-inline-code\">ORDER BY</span> clause.\n      </li><li> Values in partition key columns.\n      </li></ul><p>\n      For any national language aspects such as collation order or\n      interpreting extended ASCII variants such as ISO-8859-1 or ISO-8859-2\n      encodings, Impala does not include such metadata with the table\n      definition. If you need to sort, manipulate, or display data depending on\n      those national language characteristics of string data, use logic on the\n      application side.\n    </p><p><b>Conversions:</b></p><ul><li><p>\n          Impala does not automatically convert <span class=\"sql-docs-inline-code\">STRING</span> to any\n          numeric type. Impala does automatically convert\n            <span class=\"sql-docs-inline-code\">STRING</span> to <span class=\"sql-docs-inline-code\">TIMESTAMP</span> if the value\n          matches one of the accepted <span class=\"sql-docs-inline-code\">TIMESTAMP</span> formats; see\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_timestamp.xml#timestamp\">TIMESTAMP Data Type</a> for details.\n        </p></li><li><p>\n          You can use <span class=\"sql-docs-inline-code\">CAST()</span> to convert\n            <span class=\"sql-docs-inline-code\">STRING</span> values to <span class=\"sql-docs-inline-code\">TINYINT</span>,\n            <span class=\"sql-docs-inline-code\">SMALLINT</span>, <span class=\"sql-docs-inline-code\">INT</span>,\n            <span class=\"sql-docs-inline-code\">BIGINT</span>, <span class=\"sql-docs-inline-code\">FLOAT</span>,\n            <span class=\"sql-docs-inline-code\">DOUBLE</span>, or <span class=\"sql-docs-inline-code\">TIMESTAMP</span>.\n        </p></li><li><p>\n          You cannot directly cast a <span class=\"sql-docs-inline-code\">STRING</span> value to\n            <span class=\"sql-docs-inline-code\">BOOLEAN</span>. You can use a <span class=\"sql-docs-inline-code\">CASE</span>\n          expression to evaluate string values such as <span class=\"sql-docs-inline-code\">'T'</span>,\n            <span class=\"sql-docs-inline-code\">'true'</span>, and so on and return Boolean\n            <span class=\"sql-docs-inline-code\">true</span> and <span class=\"sql-docs-inline-code\">false</span> values as\n          appropriate.\n        </p></li><li><p>\n          You can cast a <span class=\"sql-docs-inline-code\">BOOLEAN</span> value to\n            <span class=\"sql-docs-inline-code\">STRING</span>, returning <span class=\"sql-docs-inline-code\">'1'</span> for\n            <span class=\"sql-docs-inline-code\">true</span> values and <span class=\"sql-docs-inline-code\">'0'</span> for\n            <span class=\"sql-docs-inline-code\">false</span> values.\n        </p></li></ul><p id=\"../Impala/docs/topics/impala_string.xml_partitioning_blurb\"><b>Partitioning:</b></p><p>\n      Although it might be convenient to use <span class=\"sql-docs-inline-code\">STRING</span> columns\n      for partition keys, even when those columns contain numbers, for\n      performance and scalability it is much better to use numeric columns as\n      partition keys whenever practical. Although the underlying HDFS directory\n      name might be the same in either case, the in-memory storage for the\n      partition key columns is more compact, and computations are faster, if\n      partition key columns such as <span class=\"sql-docs-inline-code\">YEAR</span>,\n        <span class=\"sql-docs-inline-code\">MONTH</span>, <span class=\"sql-docs-inline-code\">DAY</span> and so on are declared as\n        <span class=\"sql-docs-inline-code\">INT</span>, <span class=\"sql-docs-inline-code\">SMALLINT</span>, and so on.\n    </p><p id=\"../Impala/docs/topics/impala_string.xml_zero_length_strings\"><b>Zero-length strings:</b> For purposes of clauses such as <span class=\"sql-docs-inline-code\">DISTINCT</span> and <span class=\"sql-docs-inline-code\">GROUP\n        BY</span>, Impala considers zero-length strings (<span class=\"sql-docs-inline-code\">\"\"</span>), <span class=\"sql-docs-inline-code\">NULL</span>, and space\n        to all be different values.\n      </p><p id=\"../Impala/docs/topics/impala_string.xml_text_bulky\"><b>Text table considerations:</b> Values of this type are potentially larger in text tables than in tables\n        using Parquet or other binary formats.\n      </p><p><b>Avro considerations:</b></p><p id=\"../Impala/docs/topics/impala_string.xml_avro_2gb_strings\">\n        The Avro specification allows string values up to 2**64 bytes in length.\n        Impala queries for Avro tables use 32-bit integers to hold string lengths.\n        In Impala 2.5 and higher, Impala truncates <span class=\"sql-docs-inline-code\">CHAR</span>\n        and <span class=\"sql-docs-inline-code\">VARCHAR</span> values in Avro tables to (2**31)-1 bytes.\n        If a query encounters a <span class=\"sql-docs-inline-code\">STRING</span> value longer than (2**31)-1\n        bytes in an Avro table, the query fails. In earlier releases,\n        encountering such long values in an Avro table could cause a crash.\n      </p><p id=\"../Impala/docs/topics/impala_string.xml_column_stats_variable\"><b>Column statistics considerations:</b> Because the values of this type have variable size, none of the\n        column statistics fields are filled in until you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> statement.\n      </p><p id=\"../Impala/docs/topics/impala_string.xml_example_blurb\"><b>Examples:</b></p><p>\n      The following examples demonstrate double-quoted and single-quoted\n      string literals, and required escaping for quotation marks within string\n      literals:\n    </p><div class=\"sql-docs-code-block\">SELECT 'I am a single-quoted string';<br/>SELECT \"I am a double-quoted string\";<br/>SELECT 'I\\'m a single-quoted string with an apostrophe';<br/>SELECT \"I\\'m a double-quoted string with an apostrophe\";<br/>SELECT 'I am a \"short\" single-quoted string containing quotes';<br/>SELECT \"I am a \\\"short\\\" double-quoted string containing quotes\";<br/></div><p>\n      The following examples demonstrate calls to string manipulation\n      functions to concatenate strings, convert numbers to strings, or pull out\n      substrings:\n    </p><div class=\"sql-docs-code-block\">SELECT CONCAT(\"Once upon a time, there were \", CAST(3 AS STRING), ' little pigs.');<br/>SELECT SUBSTR(\"hello world\",7,5);<br/></div><p>\n      The following examples show how to perform operations on\n        <span class=\"sql-docs-inline-code\">STRING</span> columns within a table:\n    </p><div class=\"sql-docs-code-block\">CREATE TABLE t1 (s1 STRING, s2 STRING);<br/>INSERT INTO t1 VALUES (\"hello\", 'world'), (CAST(7 AS STRING), \"wonders\");<br/>SELECT s1, s2, length(s1) FROM t1 WHERE s2 LIKE 'w%';<br/></div><p id=\"../Impala/docs/topics/impala_string.xml_related_info\"><b>Related information:</b></p><p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#string_literals\"><h4>String Literals</h4></a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_char.xml#char\">CHAR Data Type (Impala 2.0 or higher only)</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_varchar.xml#varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string_functions.xml#string_functions\">Impala String Functions</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datetime_functions.xml#datetime_functions\">Impala Date and Time Functions</a></p></div>","title":"STRING Data Type"}