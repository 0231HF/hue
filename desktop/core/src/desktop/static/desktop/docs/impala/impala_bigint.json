{"body":"<div><p>\n      An 8-byte integer data type used in <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  and <span class=\"sql-docs-inline-code\">ALTER TABLE</span> \n      statements.\n    </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_syntax_blurb\"><b>Syntax:</b> </p> <p>\n      In the column definition of a <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement:\n    </p> <div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> BIGINT</div><p><b>Range:</b>  -9223372036854775808 .. 9223372036854775807. There is no <span class=\"sql-docs-inline-code\">UNSIGNED</span>  subtype.\n    </p> <p><b>Conversions:</b>  Impala automatically converts to a floating-point type (<span class=\"sql-docs-inline-code\">FLOAT</span>  or\n      <span class=\"sql-docs-inline-code\">DOUBLE</span> ) automatically. Use <span class=\"sql-docs-inline-code\">CAST()</span>  to convert to <span class=\"sql-docs-inline-code\">TINYINT</span> ,\n      <span class=\"sql-docs-inline-code\">SMALLINT</span> , <span class=\"sql-docs-inline-code\">INT</span> , <span class=\"sql-docs-inline-code\">STRING</span> , or <span class=\"sql-docs-inline-code\">TIMESTAMP</span> .\n      <span id=\"../Impala/docs/topics/impala_bigint.xml_cast_int_to_timestamp\" class=\"sql-docs-inline-code\">\n          Casting an integer or floating-point value <span class=\"sql-docs-inline-code\">N</span>  to\n        <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  produces a value that is <span class=\"sql-docs-inline-code\">N</span>  seconds past the start of the epoch\n        date (January 1, 1970). By default, the result value represents a date and time in the UTC time zone.\n        If the setting <span class=\"sql-docs-inline-code\">--use_local_tz_for_unix_timestamp_conversions=true</span>  is in effect,\n        the resulting <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  represents a date and time in the local time zone.\n        </span> </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">CREATE TABLE t1 (x BIGINT);<br/>SELECT CAST(1000 AS BIGINT);<br/></div><p id=\"../Impala/docs/topics/impala_bigint.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p><span class=\"sql-docs-inline-code\">BIGINT</span>  is a convenient type to use for column declarations because you can use any kind of\n      integer values in <span class=\"sql-docs-inline-code\">INSERT</span>  statements and they are promoted to <span class=\"sql-docs-inline-code\">BIGINT</span>  where\n      necessary. However, <span class=\"sql-docs-inline-code\">BIGINT</span>  also requires the most bytes of any integer type on disk and in\n      memory, meaning your queries are not as efficient and scalable as possible if you overuse this type.\n      Therefore, prefer to use the smallest integer type with sufficient range to hold all input values, and\n      <span class=\"sql-docs-inline-code\">CAST()</span>  when necessary to the appropriate type.\n    </p> <p>\n      For a convenient and automated way to check the bounds of the <span class=\"sql-docs-inline-code\">BIGINT</span>  type, call the\n      functions <span class=\"sql-docs-inline-code\">MIN_BIGINT()</span>  and <span class=\"sql-docs-inline-code\">MAX_BIGINT()</span> .\n    </p> <p>\n      If an integer value is too large to be represented as a <span class=\"sql-docs-inline-code\">BIGINT</span> , use a\n      <span class=\"sql-docs-inline-code\">DECIMAL</span>  instead with sufficient digits of precision.\n    </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_null_bad_numeric_cast\"><b>NULL considerations:</b>  Casting any non-numeric value to this type produces a <span class=\"sql-docs-inline-code\">NULL</span> \n        value.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_partitioning_good\"><b>Partitioning:</b>  Prefer to use this type for a partition key column. Impala can process the numeric\n        type more efficiently than a <span class=\"sql-docs-inline-code\">STRING</span>  representation of the value.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_hbase_ok\"><b>HBase considerations:</b>  This data type is fully compatible with HBase tables.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_text_bulky\"><b>Text table considerations:</b>  Values of this type are potentially larger in text tables than in tables\n        using Parquet or other binary formats.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_internals_8_bytes\"><b>Internal details:</b>  Represented in memory as an 8-byte value.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_added_forever\"><b>Added in:</b>  Available in all versions of Impala.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_column_stats_constant\"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size\n        fields are always filled in for column statistics, even before you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> \n        statement.\n      </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_sqoop_blurb\"><b>Sqoop considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_bigint.xml_sqoop_timestamp_caveat\"> If you use Sqoop to\n        convert RDBMS data to Parquet, be careful with interpreting any\n        resulting values from <span class=\"sql-docs-inline-code\">DATE</span> , <span class=\"sql-docs-inline-code\">DATETIME</span> ,\n        or <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  columns. The underlying values are\n        represented as the Parquet <span class=\"sql-docs-inline-code\">INT64</span>  type, which is\n        represented as <span class=\"sql-docs-inline-code\">BIGINT</span>  in the Impala table. The Parquet\n        values represent the time in milliseconds, while Impala interprets\n          <span class=\"sql-docs-inline-code\">BIGINT</span>  as the time in seconds. Therefore, if you have\n        a <span class=\"sql-docs-inline-code\">BIGINT</span>  column in a Parquet table that was imported\n        this way from Sqoop, divide the values by 1000 when interpreting as the\n          <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  type.</p> <p id=\"../Impala/docs/topics/impala_bigint.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#numeric_literals\"><h4>Numeric Literals</h4> </a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tinyint.xml#tinyint\">TINYINT Data Type</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_smallint.xml#smallint\">SMALLINT Data Type</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_int.xml#int\">INT Data Type</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_bigint.xml#bigint\">BIGINT Data Type</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_decimal.xml#decimal\">DECIMAL Data Type (Impala 1.4 or higher only)</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_math_functions.xml#math_functions\">Impala Mathematical Functions</a></p> </div> ","title":"BIGINT Data Type"}