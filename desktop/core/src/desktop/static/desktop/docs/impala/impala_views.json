{"body":"<div><p>\n      Views are lightweight logical constructs that act as aliases for queries. You can specify a view name in a\n      query (a <span class=\"sql-docs-inline-code\">SELECT</span>  statement or the <span class=\"sql-docs-inline-code\">SELECT</span>  portion of an\n      <span class=\"sql-docs-inline-code\">INSERT</span>  statement) where you would usually specify a table name.\n    </p> <p>\n      A view lets you:\n    </p> <ul><li>\n        Issue complicated queries with compact and simple syntax:\n<div class=\"sql-docs-code-block\">-- Take a complicated reporting query, plug it into a CREATE VIEW statement...<br/>create view v1 as select c1, c2, avg(c3) from t1 group by c3 order by c1 desc limit 10;<br/>-- ... and now you can produce the report with 1 line of code.<br/>select * from v1;</div></li> <li>\n        Reduce maintenance, by avoiding the duplication of complicated queries across multiple applications in\n        multiple languages:\n<div class=\"sql-docs-code-block\">create view v2 as select t1.c1, t1.c2, t2.c3 from t1 join t2 on (t1.id = t2.id);<br/>-- This simple query is safer to embed in reporting applications than the longer query above.<br/>-- The view definition can remain stable even if the structure of the underlying tables changes.<br/>select c1, c2, c3 from v2;</div></li> <li>\n        Build a new, more refined query on top of the original query by adding new clauses, select-list\n        expressions, function calls, and so on:\n<div class=\"sql-docs-code-block\">create view average_price_by_category as select category, avg(price) as avg_price from products group by category;<br/>create view expensive_categories as select category, avg_price from average_price_by_category order by avg_price desc limit 10000;<br/>create view top_10_expensive_categories as select category, avg_price from expensive_categories limit 10;</div>\n        This technique lets you build up several more or less granular variations of the same query, and switch\n        between them when appropriate.\n</li> <li>\n        Set up aliases with intuitive names for tables, columns, result sets from joins, and so on:\n<div class=\"sql-docs-code-block\">-- The original tables might have cryptic names inherited from a legacy system.<br/>create view action_items as select rrptsk as assignee, treq as due_date, dmisc as notes from vxy_t1_br;<br/>-- You can leave original names for compatibility, build new applications using more intuitive ones.<br/>select assignee, due_date, notes from action_items;</div></li> <li>\n        Swap tables with others that use different file formats, partitioning schemes, and so on without any\n        downtime for data copying or conversion:\n<div class=\"sql-docs-code-block\">create table slow (x int, s string) stored as textfile;<br/>create view report as select s from slow where x between 20 and 30;<br/>-- Query is kind of slow due to inefficient table definition, but it works.<br/>select * from report;<br/><br/>create table fast (s string) partitioned by (x int) stored as parquet;<br/>-- ...Copy data from SLOW to FAST. Queries against REPORT view continue to work...<br/><br/>-- After changing the view definition, queries will be faster due to partitioning,<br/>-- binary format, and compression in the new table.<br/>alter view report as select s from fast where x between 20 and 30;<br/>select * from report;</div></li> <li>\n        Avoid coding lengthy subqueries and repeating the same subquery text in many other queries.\n      </li> <li>\n        Set up fine-grained security where a user can query some columns from a table but not other columns.\n        Because Impala 2.3 and higher support column-level authorization, this technique is no longer\n        required. If you formerly implemented column-level security through views, see\n         for details about the column-level authorization feature.\n      </li> </ul> <p>\n      The SQL statements that configure views are <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_view.xml#create_view\">CREATE VIEW Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_view.xml#alter_view\">ALTER VIEW Statement</a>, and <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_view.xml#drop_view\">DROP VIEW Statement</a>. You can\n      specify view names when querying data (<a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT Statement</a>) and copying data from one\n      table to another (<a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#insert\">INSERT Statement</a>). The <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_with.xml#with\">WITH</a>\n      clause creates an inline view, that only exists for the duration of a single query.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > create view trivial as select * from customer;<br/>[localhost:21000] > create view some_columns as select c_first_name, c_last_name, c_login from customer;<br/>[localhost:21000] > select * from some_columns limit 5;<br/>Query finished, fetching results ...<br/>+--------------+-------------+---------+<br/>| c_first_name | c_last_name | c_login |<br/>+--------------+-------------+---------+<br/>| Javier       | Lewis       |         |<br/>| Amy          | Moses       |         |<br/>| Latisha      | Hamilton    |         |<br/>| Michael      | White       |         |<br/>| Robert       | Moran       |         |<br/>+--------------+-------------+---------+<br/>[localhost:21000] > create view ordered_results as select * from some_columns order by c_last_name desc, c_first_name desc limit 1000;<br/>[localhost:21000] > select * from ordered_results limit 5;<br/>Query: select * from ordered_results limit 5<br/>Query finished, fetching results ...<br/>+--------------+-------------+---------+<br/>| c_first_name | c_last_name | c_login |<br/>+--------------+-------------+---------+<br/>| Thomas       | Zuniga      |         |<br/>| Sarah        | Zuniga      |         |<br/>| Norma        | Zuniga      |         |<br/>| Lloyd        | Zuniga      |         |<br/>| Lisa         | Zuniga      |         |<br/>+--------------+-------------+---------+<br/>Returned 5 row(s) in 0.48s</div><p>\n      The previous example uses descending order for <span class=\"sql-docs-inline-code\">ORDERED_RESULTS</span>  because in the sample TPCD-H\n      data, there are some rows with empty strings for both <span class=\"sql-docs-inline-code\">C_FIRST_NAME</span>  and\n      <span class=\"sql-docs-inline-code\">C_LAST_NAME</span> , making the lowest-ordered names unuseful in a sample query.\n    </p> <div class=\"sql-docs-code-block\">create view visitors_by_day as select day, count(distinct visitors) as howmany from web_traffic group by day;<br/>create view top_10_days as select day, howmany from visitors_by_day order by howmany limit 10;<br/>select * from top_10_days;</div><p id=\"../Impala/docs/topics/impala_views.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p id=\"../Impala/docs/topics/impala_views.xml_describe_formatted_view\">\n        To see the definition of a view, issue a <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED</span>  statement, which shows the\n        query from the original <span class=\"sql-docs-inline-code\">CREATE VIEW</span>  statement:\n<div class=\"sql-docs-code-block\">[localhost:21000] > create view v1 as select * from t1;<br/>[localhost:21000] > describe formatted v1;<br/>Query finished, fetching results ...<br/>+------------------------------+------------------------------+------------+<br/>| name                         | type                         | comment    |<br/>+------------------------------+------------------------------+------------+<br/>| # col_name                   | data_type                    | comment    |<br/>|                              | NULL                         | NULL       |<br/>| x                            | int                          | None       |<br/>| y                            | int                          | None       |<br/>| s                            | string                       | None       |<br/>|                              | NULL                         | NULL       |<br/>| # Detailed Table Information | NULL                         | NULL       |<br/>| Database:                    | views                        | NULL       |<br/>| Owner:                       | doc_demo                     | NULL       |<br/>| CreateTime:                  | Mon Jul 08 15:56:27 EDT 2013 | NULL       |<br/>| LastAccessTime:              | UNKNOWN                      | NULL       |<br/>| Protect Mode:                | None                         | NULL       |<br/>| Retention:                   | 0                            | NULL       |<br/><b>| Table Type:                  | VIRTUAL_VIEW                 | NULL       |</b> | Table Parameters:            | NULL                         | NULL       |<br/>|                              | transient_lastDdlTime        | 1373313387 |<br/>|                              | NULL                         | NULL       |<br/>| # Storage Information        | NULL                         | NULL       |<br/>| SerDe Library:               | null                         | NULL       |<br/>| InputFormat:                 | null                         | NULL       |<br/>| OutputFormat:                | null                         | NULL       |<br/>| Compressed:                  | No                           | NULL       |<br/>| Num Buckets:                 | 0                            | NULL       |<br/>| Bucket Columns:              | []                           | NULL       |<br/>| Sort Columns:                | []                           | NULL       |<br/>|                              | NULL                         | NULL       |<br/>| # View Information           | NULL                         | NULL       |<br/><b>| View Original Text:          | SELECT * FROM t1             | NULL       |<br/>| View Expanded Text:          | SELECT * FROM t1             | NULL       |</b> +------------------------------+------------------------------+------------+<br/></div></p> <p id=\"../Impala/docs/topics/impala_views.xml_create_table_like_view\">\n        Prior to Impala 1.4.0, it was not possible to use the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE\n        <span class=\"sql-docs-variable\">view_name</span> </span>  syntax. In Impala 1.4.0 and higher, you can create a table with the\n        same column definitions as a view using the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span>  technique. Although\n        <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span>  normally inherits the file format of the original table, a view has no\n        underlying file format, so <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE <span class=\"sql-docs-variable\">view_name</span> </span>  produces a text\n        table by default. To specify a different file format, include a <span class=\"sql-docs-inline-code\">STORED AS\n        <span class=\"sql-docs-variable\">file_format</span> </span>  clause at the end of the <span class=\"sql-docs-inline-code\">CREATE TABLE LIKE</span> \n        statement.\n      </p> <p id=\"../Impala/docs/topics/impala_views.xml_complex_types_blurb\"><b>Complex type considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_views.xml_complex_types_views\">\n        For tables containing complex type columns (<span class=\"sql-docs-inline-code\">ARRAY</span> ,\n        <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> ), you typically use\n        join queries to refer to the complex values. You can use views to\n        hide the join notation, making such tables seem like traditional denormalized\n        tables, and making those tables queryable by business intelligence tools\n        that do not have built-in support for those complex types.\n        See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types_views\"><h4>Accessing Complex Type Data in Flattened Form Using Views</h4> </a> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_views.xml_straight_join_nested_queries\">\n        The <span class=\"sql-docs-inline-code\">STRAIGHT_JOIN</span>  hint affects the join order of table references in the query\n        block containing the hint. It does not affect the join order of nested queries, such as views,\n        inline views, or <span class=\"sql-docs-inline-code\">WHERE</span> -clause subqueries. To use this hint for performance\n        tuning of complex queries, apply the hint to all query blocks that need a fixed join order.\n      </p> <p id=\"../Impala/docs/topics/impala_views.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <ul><li><p>\n          You cannot insert into an Impala view. (In some database systems, this operation is allowed and inserts\n          rows into the base table.) You can use a view name on the right-hand side of an <span class=\"sql-docs-inline-code\">INSERT</span> \n          statement, in the <span class=\"sql-docs-inline-code\">SELECT</span>  part.\n        </p> </li> <li><p id=\"../Impala/docs/topics/impala_views.xml_partitions_and_views\">\n        If a view applies to a partitioned table, any partition pruning considers the clauses on both\n        the original query and any additional <span class=\"sql-docs-inline-code\">WHERE</span>  predicates in the query that refers to the view.\n        Prior to Impala 1.4, only the <span class=\"sql-docs-inline-code\">WHERE</span>  clauses on the original query from the\n        <span class=\"sql-docs-inline-code\">CREATE VIEW</span>  statement were used for partition pruning.\n      </p> </li> <li><p id=\"../Impala/docs/topics/impala_views.xml_order_by_view_restriction\">\n        An <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause without an additional <span class=\"sql-docs-inline-code\">LIMIT</span>  clause is ignored in any\n        view definition. If you need to sort the entire result set from a view, use an <span class=\"sql-docs-inline-code\">ORDER BY</span> \n        clause in the <span class=\"sql-docs-inline-code\">SELECT</span>  statement that queries the view. You can still make a simple <q>top\n        10</q>  report by combining the <span class=\"sql-docs-inline-code\">ORDER BY</span>  and <span class=\"sql-docs-inline-code\">LIMIT</span>  clauses in the same\n        view definition:\n<div class=\"sql-docs-code-block\">[localhost:21000] > create table unsorted (x bigint);<br/>[localhost:21000] > insert into unsorted values (1), (9), (3), (7), (5), (8), (4), (6), (2);<br/>[localhost:21000] > create view sorted_view as select x from unsorted order by x;<br/>[localhost:21000] > select x from sorted_view; -- ORDER BY clause in view has no effect.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 9 |<br/>| 3 |<br/>| 7 |<br/>| 5 |<br/>| 8 |<br/>| 4 |<br/>| 6 |<br/>| 2 |<br/>+---+<br/>[localhost:21000] > select x from sorted_view order by x; -- View query requires ORDER BY at outermost level.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 4 |<br/>| 5 |<br/>| 6 |<br/>| 7 |<br/>| 8 |<br/>| 9 |<br/>+---+<br/>[localhost:21000] > create view top_3_view as select x from unsorted order by x limit 3;<br/>[localhost:21000] > select x from top_3_view; -- ORDER BY and LIMIT together in view definition are preserved.<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/></div></p> </li> <li><p id=\"../Impala/docs/topics/impala_views.xml_tablesample_caveat\">\n        The <span class=\"sql-docs-inline-code\">TABLESAMPLE</span>  clause of the <span class=\"sql-docs-inline-code\">SELECT</span> \n        statement does not apply to a table reference derived from a view, a subquery,\n        or anything other than a real base table. This clause only works for tables\n        backed by HDFS or HDFS-like data files, therefore it does not apply to Kudu or\n        HBase tables.\n      </p> </li> </ul> <p><b>Related statements:</b> <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_view.xml#create_view\">CREATE VIEW Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_view.xml#alter_view\">ALTER VIEW Statement</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_view.xml#drop_view\">DROP VIEW Statement</a></p> </div> ","title":"Overview of Impala Views"}