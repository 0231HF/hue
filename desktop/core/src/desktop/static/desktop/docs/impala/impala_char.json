{"body":"<div><p>\n      A fixed-length character type, padded with trailing spaces if necessary to achieve the specified length. If\n      values are longer than the specified length, Impala truncates any trailing characters.\n    </p> <p id=\"../Impala/docs/topics/impala_char.xml_syntax_blurb\"><b>Syntax:</b> </p> <p>\n      In the column definition of a <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement:\n    </p> <div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> CHAR(<span class=\"sql-docs-variable\">length</span> )</div><p>\n      The maximum length you can specify is 255.\n    </p> <p><b>Semantics of trailing spaces:</b> </p> <ul><li>\n        When you store a <span class=\"sql-docs-inline-code\">CHAR</span>  value shorter than the specified length in a table, queries return\n        the value padded with trailing spaces if necessary; the resulting value has the same length as specified in\n        the column definition.\n      </li> <li>\n        If you store a <span class=\"sql-docs-inline-code\">CHAR</span>  value containing trailing spaces in a table, those trailing spaces are\n        not stored in the data file. When the value is retrieved by a query, the result could have a different\n        number of trailing spaces. That is, the value includes however many spaces are needed to pad it to the\n        specified length of the column.\n      </li> <li>\n        If you compare two <span class=\"sql-docs-inline-code\">CHAR</span>  values that differ only in the number of trailing spaces, those\n        values are considered identical.\n      </li> </ul> <p id=\"../Impala/docs/topics/impala_char.xml_partitioning_bad\"><b>Partitioning:</b>  This type can be used for partition key columns. Because of the efficiency advantage\n        of numeric values over character-based values, if the partition key is a string representation of a number,\n        prefer to use an integer type with sufficient range (<span class=\"sql-docs-inline-code\">INT</span> , <span class=\"sql-docs-inline-code\">BIGINT</span> , and so\n        on) where practical.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_hbase_no\"><b>HBase considerations:</b>  This data type cannot be used with HBase tables.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_parquet_blurb\"><b>Parquet considerations:</b> </p> <ul><li>\n        This type can be read from and written to Parquet files.\n      </li> <li>\n        There is no requirement for a particular level of Parquet.\n      </li> <li>\n        Parquet files generated by Impala and containing this type can be freely interchanged with other components\n        such as Hive and MapReduce.\n      </li> <li>\n        Any trailing spaces, whether implicitly or explicitly specified, are not written to the Parquet data files.\n      </li> <li>\n        Parquet data files might contain values that are longer than allowed by the\n        <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">n</span> )</span>  length limit. Impala ignores any extra trailing characters when\n        it processes those values during a query.\n      </li> </ul> <p id=\"../Impala/docs/topics/impala_char.xml_text_blurb\"><b>Text table considerations:</b> </p> <p>\n      Text data files might contain values that are longer than allowed for a particular\n      <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">n</span> )</span>  column. Any extra trailing characters are ignored when Impala\n      processes those values during a query. Text data files can also contain values that are shorter than the\n      defined length limit, and Impala pads them with trailing spaces up to the specified length. Any text data\n      files produced by Impala <span class=\"sql-docs-inline-code\">INSERT</span>  statements do not include any trailing blanks for\n      <span class=\"sql-docs-inline-code\">CHAR</span>  columns.\n    </p> <p><b>Avro considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_char.xml_avro_2gb_strings\">\n        The Avro specification allows string values up to 2**64 bytes in length.\n        Impala queries for Avro tables use 32-bit integers to hold string lengths.\n        In Impala 2.5 and higher, Impala truncates <span class=\"sql-docs-inline-code\">CHAR</span> \n        and <span class=\"sql-docs-inline-code\">VARCHAR</span>  values in Avro tables to (2**31)-1 bytes.\n        If a query encounters a <span class=\"sql-docs-inline-code\">STRING</span>  value longer than (2**31)-1\n        bytes in an Avro table, the query fails. In earlier releases,\n        encountering such long values in an Avro table could cause a crash.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_compatibility_blurb\"><b>Compatibility:</b> </p> <p>\n      This type is available using Impala 2.0 or higher.\n    </p> <p>\n      Some other database systems make the length specification optional. For Impala, the length is required.\n    </p> <p id=\"../Impala/docs/topics/impala_char.xml_internals_max_bytes\"><b>Internal details:</b>  Represented in memory as a byte array with the same size as the length\n        specification. Values that are shorter than the specified length are padded on the right with trailing\n        spaces.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_added_in_20\"><b>Added in:</b> Impala 2.0.0</p> <p id=\"../Impala/docs/topics/impala_char.xml_column_stats_constant\"><b>Column statistics considerations:</b>  Because this type has a fixed size, the maximum and average size\n        fields are always filled in for column statistics, even before you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> \n        statement.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_udf_blurb_no\"><b>UDF considerations:</b>  This type cannot be used for the argument or return type of a user-defined\n        function (UDF) or user-defined aggregate function (UDA).\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      These examples show how trailing spaces are not considered significant when comparing or processing\n      <span class=\"sql-docs-inline-code\">CHAR</span>  values. <span class=\"sql-docs-inline-code\">CAST()</span>  truncates any longer string to fit within the defined\n      length. If a <span class=\"sql-docs-inline-code\">CHAR</span>  value is shorter than the specified length, it is padded on the right with\n      spaces until it matches the specified length. Therefore, <span class=\"sql-docs-inline-code\">LENGTH()</span>  represents the length\n      including any trailing spaces, and <span class=\"sql-docs-inline-code\">CONCAT()</span>  also treats the column value as if it has\n      trailing spaces.\n    </p> <div class=\"sql-docs-code-block\">select cast('x' as char(4)) = cast('x   ' as char(4)) as \"unpadded equal to padded\";<br/>+--------------------------+<br/>| unpadded equal to padded |<br/>+--------------------------+<br/>| true                     |<br/>+--------------------------+<br/><br/>create table char_length(c char(3));<br/>insert into char_length values (cast('1' as char(3))), (cast('12' as char(3))), (cast('123' as char(3))), (cast('123456' as char(3)));<br/>select concat(\"[\",c,\"]\") as c, length(c) from char_length;<br/>+-------+-----------+<br/>| c     | length(c) |<br/>+-------+-----------+<br/>| [1  ] | 3         |<br/>| [12 ] | 3         |<br/>| [123] | 3         |<br/>| [123] | 3         |<br/>+-------+-----------+<br/></div><p>\n      This example shows a case where data values are known to have a specific length, where <span class=\"sql-docs-inline-code\">CHAR</span> \n      is a logical data type to use.\n</p> <div class=\"sql-docs-code-block\">create table addresses<br/>  (id bigint,<br/>   street_name string,<br/>   state_abbreviation char(2),<br/>   country_abbreviation char(2));<br/></div><p>\n      The following example shows how values written by Impala do not physically include the trailing spaces. It\n      creates a table using text format, with <span class=\"sql-docs-inline-code\">CHAR</span>  values much shorter than the declared length,\n      and then prints the resulting data file to show that the delimited values are not separated by spaces. The\n      same behavior applies to binary-format Parquet data files.\n    </p> <div class=\"sql-docs-code-block\">create table char_in_text (a char(20), b char(30), c char(40))<br/>  row format delimited fields terminated by ',';<br/><br/>insert into char_in_text values (cast('foo' as char(20)), cast('bar' as char(30)), cast('baz' as char(40))), (cast('hello' as char(20)), cast('goodbye' as char(30)), cast('aloha' as char(40)));<br/><br/>-- Running this Linux command inside impala-shell using the ! shortcut.<br/>!hdfs dfs -cat 'hdfs://127.0.0.1:8020/user/hive/warehouse/impala_doc_testing.db/char_in_text/*.*';<br/>foo,bar,baz<br/>hello,goodbye,aloha<br/></div><p>\n      The following example further illustrates the treatment of spaces. It replaces the contents of the previous\n      table with some values including leading spaces, trailing spaces, or both. Any leading spaces are preserved\n      within the data file, but trailing spaces are discarded. Then when the values are retrieved by a query, the\n      leading spaces are retrieved verbatim while any necessary trailing spaces are supplied by Impala.\n    </p> <div class=\"sql-docs-code-block\">insert overwrite char_in_text values (cast('trailing   ' as char(20)), cast('   leading and trailing   ' as char(30)), cast('   leading' as char(40)));<br/>!hdfs dfs -cat 'hdfs://127.0.0.1:8020/user/hive/warehouse/impala_doc_testing.db/char_in_text/*.*';<br/>trailing,   leading and trailing,   leading<br/><br/>select concat('[',a,']') as a, concat('[',b,']') as b, concat('[',c,']') as c from char_in_text;<br/>+------------------------+----------------------------------+--------------------------------------------+<br/>| a                      | b                                | c                                          |<br/>+------------------------+----------------------------------+--------------------------------------------+<br/>| [trailing            ] | [   leading and trailing       ] | [   leading                              ] |<br/>+------------------------+----------------------------------+--------------------------------------------+<br/></div><p id=\"../Impala/docs/topics/impala_char.xml_kudu_blurb\"><b>Kudu considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_char.xml_kudu_unsupported_data_type\">\n        Currently, the data types <span class=\"sql-docs-inline-code\">CHAR</span> , <span class=\"sql-docs-inline-code\">VARCHAR</span> ,\n        <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , and <span class=\"sql-docs-inline-code\">STRUCT</span>  cannot be used with Kudu tables.\n      </p> <p id=\"../Impala/docs/topics/impala_char.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <p>\n      Because the blank-padding behavior requires allocating the maximum length for each value in memory, for\n      scalability reasons avoid declaring <span class=\"sql-docs-inline-code\">CHAR</span>  columns that are much longer than typical values in\n      that column.\n    </p> <p id=\"../Impala/docs/topics/impala_char.xml_blobs_are_strings\">\n        All data in <span class=\"sql-docs-inline-code\">CHAR</span>  and <span class=\"sql-docs-inline-code\">VARCHAR</span>  columns must be in a character encoding that\n        is compatible with UTF-8. If you have binary data from another database system (that is, a BLOB type), use\n        a <span class=\"sql-docs-inline-code\">STRING</span>  column to hold it.\n      </p> <p>\n      When an expression compares a <span class=\"sql-docs-inline-code\">CHAR</span>  with a <span class=\"sql-docs-inline-code\">STRING</span>  or\n      <span class=\"sql-docs-inline-code\">VARCHAR</span> , the <span class=\"sql-docs-inline-code\">CHAR</span>  value is implicitly converted to <span class=\"sql-docs-inline-code\">STRING</span> \n      first, with trailing spaces preserved.\n    </p> <div class=\"sql-docs-code-block\">select cast(\"foo  \" as char(5)) = 'foo' as \"char equal to string\";<br/>+----------------------+<br/>| char equal to string |<br/>+----------------------+<br/>| false                |<br/>+----------------------+<br/></div><p>\n      This behavior differs from other popular database systems. To get the expected result of\n      <span class=\"sql-docs-inline-code\">TRUE</span> , cast the expressions on both sides to <span class=\"sql-docs-inline-code\">CHAR</span>  values of the appropriate\n      length:\n    </p> <div class=\"sql-docs-code-block\">select cast(\"foo  \" as char(5)) = cast('foo' as char(3)) as \"char equal to string\";<br/>+----------------------+<br/>| char equal to string |<br/>+----------------------+<br/>| true                 |<br/>+----------------------+<br/></div><p>\n      This behavior is subject to change in future releases.\n    </p> <p id=\"../Impala/docs/topics/impala_char.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string.xml#string\">STRING Data Type</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_varchar.xml#varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#string_literals\"><h4>String Literals</h4> </a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string_functions.xml#string_functions\">Impala String Functions</a></p> </div> ","title":"CHAR Data Type (Impala 2.0 or higher only)"}