{"body":"<div><p>\n      String functions are classified as those primarily accepting or returning <span class=\"sql-docs-inline-code\">STRING</span> ,\n      <span class=\"sql-docs-inline-code\">VARCHAR</span> , or <span class=\"sql-docs-inline-code\">CHAR</span>  data types, for example to measure the length of a string\n      or concatenate two strings together.\n      <ul><li>\n          All the functions that accept <span class=\"sql-docs-inline-code\">STRING</span>  arguments also accept the <span class=\"sql-docs-inline-code\">VARCHAR</span> \n          and <span class=\"sql-docs-inline-code\">CHAR</span>  types introduced in Impala 2.0.\n        </li> <li>\n          Whenever <span class=\"sql-docs-inline-code\">VARCHAR</span>  or <span class=\"sql-docs-inline-code\">CHAR</span>  values are passed to a function that returns a\n          string value, the return type is normalized to <span class=\"sql-docs-inline-code\">STRING</span> . For example, a call to\n          <span class=\"sql-docs-inline-code\">concat()</span>  with a mix of <span class=\"sql-docs-inline-code\">STRING</span> , <span class=\"sql-docs-inline-code\">VARCHAR</span> , and\n          <span class=\"sql-docs-inline-code\">CHAR</span>  arguments produces a <span class=\"sql-docs-inline-code\">STRING</span>  result.\n        </li> </ul> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_related_info\"><b>Related information:</b> </p> <p>\n      The string functions operate mainly on these data types: <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string.xml#string\">STRING Data Type</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_varchar.xml#varchar\">VARCHAR Data Type (Impala 2.0 or higher only)</a>, and <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_char.xml#char\">CHAR Data Type (Impala 2.0 or higher only)</a>.\n    </p> <p><b>Function reference:</b> </p> <p>\n      Impala supports the following string functions:\n    </p> <dl><dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_ascii\"><dt><span class=\"sql-docs-inline-code\">ascii(string str)</span> </dt> <dd><b>Purpose:</b>  Returns the numeric ASCII code of the first character of the argument.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_base64decode\"><dt><span class=\"sql-docs-inline-code\">base64decode(string str)</span> </dt> <dd><b>Purpose:</b> <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            For general information about Base64 encoding, see\n            .\n          </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_use_cases\">\n        The functions <span class=\"sql-docs-inline-code\">base64encode()</span>  and\n        <span class=\"sql-docs-inline-code\">base64decode()</span>  are typically used\n        in combination, to store in an Impala table string data that is\n        problematic to store or transmit. For example, you could use\n        these functions to store string data that uses an encoding\n        other than UTF-8, or to transform the values in contexts that\n        require ASCII values, such as for partition key columns.\n        Keep in mind that base64-encoded values produce different results\n        for string functions such as <span class=\"sql-docs-inline-code\">LENGTH()</span> ,\n        <span class=\"sql-docs-inline-code\">MAX()</span> , and <span class=\"sql-docs-inline-code\">MIN()</span>  than when\n        those functions are called with the unencoded string values.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_charset\">\n        The set of characters that can be generated as output\n        from <span class=\"sql-docs-inline-code\">base64encode()</span> , or specified in\n        the argument string to <span class=\"sql-docs-inline-code\">base64decode()</span> ,\n        are the ASCII uppercase and lowercase letters (A-Z, a-z),\n        digits (0-9), and the punctuation characters\n        <span class=\"sql-docs-inline-code\">+</span> , <span class=\"sql-docs-inline-code\">/</span> , and <span class=\"sql-docs-inline-code\">=</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_alignment\">\n        All return values produced by <span class=\"sql-docs-inline-code\">base64encode()</span> \n        are a multiple of 4 bytes in length. All argument values\n        supplied to <span class=\"sql-docs-inline-code\">base64decode()</span>  must also be a\n        multiple of 4 bytes in length. If a base64-encoded value\n        would otherwise have a different length, it can be padded\n        with trailing <span class=\"sql-docs-inline-code\">=</span>  characters to reach a length\n        that is a multiple of 4 bytes.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_error_handling\">\n        If the argument string to <span class=\"sql-docs-inline-code\">base64decode()</span>  does\n        not represent a valid base64-encoded value, subject to the\n        constraints of the Impala implementation such as the allowed\n        character set, the function returns <span class=\"sql-docs-inline-code\">NULL</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_examples\">\n        The following examples show how to use <span class=\"sql-docs-inline-code\">base64encode()</span> \n        and <span class=\"sql-docs-inline-code\">base64decode()</span>  together to store and retrieve\n        string values:\n<div class=\"sql-docs-code-block\">-- An arbitrary string can be encoded in base 64.<br/>-- The length of the output is a multiple of 4 bytes,<br/>-- padded with trailing = characters if necessary.<br/>select base64encode('hello world') as encoded,<br/>  length(base64encode('hello world')) as length;<br/>+------------------+--------+<br/>| encoded          | length |<br/>+------------------+--------+<br/>| aGVsbG8gd29ybGQ= | 16     |<br/>+------------------+--------+<br/><br/>-- Passing an encoded value to base64decode() produces<br/>-- the original value.<br/>select base64decode('aGVsbG8gd29ybGQ=') as decoded;<br/>+-------------+<br/>| decoded     |<br/>+-------------+<br/>| hello world |<br/>+-------------+<br/></div>\n\n      These examples demonstrate incorrect encoded values that\n      produce <span class=\"sql-docs-inline-code\">NULL</span>  return values when decoded:\n\n<div class=\"sql-docs-code-block\">-- The input value to base64decode() must be a multiple of 4 bytes.<br/>-- In this case, leaving off the trailing = padding character<br/>-- produces a NULL return value.<br/>select base64decode('aGVsbG8gd29ybGQ') as decoded;<br/>+---------+<br/>| decoded |<br/>+---------+<br/>| NULL    |<br/>+---------+<br/>WARNINGS: UDF WARNING: Invalid base64 string; input length is 15,<br/>  which is not a multiple of 4.<br/><br/>-- The input to base64decode() can only contain certain characters.<br/>-- The $ character in this case causes a NULL return value.<br/>select base64decode('abc$');<br/>+----------------------+<br/>| base64decode('abc$') |<br/>+----------------------+<br/>| NULL                 |<br/>+----------------------+<br/>WARNINGS: UDF WARNING: Could not base64 decode input in space 4; actual output length 0<br/></div>\n\n      These examples demonstrate <q>round-tripping</q>  of an original string to an\n      encoded string, and back again. This technique is applicable if the original\n      source is in an unknown encoding, or if some intermediate processing stage\n      might cause national characters to be misrepresented:\n\n<div class=\"sql-docs-code-block\">select 'circumflex accents: â, ê, î, ô, û' as original,<br/>  base64encode('circumflex accents: â, ê, î, ô, û') as encoded;<br/>+-----------------------------------+------------------------------------------------------+<br/>| original                          | encoded                                              |<br/>+-----------------------------------+------------------------------------------------------+<br/>| circumflex accents: â, ê, î, ô, û | Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= |<br/>+-----------------------------------+------------------------------------------------------+<br/><br/>select base64encode('circumflex accents: â, ê, î, ô, û') as encoded,<br/>  base64decode(base64encode('circumflex accents: â, ê, î, ô, û')) as decoded;<br/>+------------------------------------------------------+-----------------------------------+<br/>| encoded                                              | decoded                           |<br/>+------------------------------------------------------+-----------------------------------+<br/>| Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= | circumflex accents: â, ê, î, ô, û |<br/>+------------------------------------------------------+-----------------------------------+<br/></div></p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_base64encode\"><dt><span class=\"sql-docs-inline-code\">base64encode(string str)</span> </dt> <dd><b>Purpose:</b> <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            For general information about Base64 encoding, see\n            .\n          </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_use_cases\">\n        The functions <span class=\"sql-docs-inline-code\">base64encode()</span>  and\n        <span class=\"sql-docs-inline-code\">base64decode()</span>  are typically used\n        in combination, to store in an Impala table string data that is\n        problematic to store or transmit. For example, you could use\n        these functions to store string data that uses an encoding\n        other than UTF-8, or to transform the values in contexts that\n        require ASCII values, such as for partition key columns.\n        Keep in mind that base64-encoded values produce different results\n        for string functions such as <span class=\"sql-docs-inline-code\">LENGTH()</span> ,\n        <span class=\"sql-docs-inline-code\">MAX()</span> , and <span class=\"sql-docs-inline-code\">MIN()</span>  than when\n        those functions are called with the unencoded string values.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_charset\">\n        The set of characters that can be generated as output\n        from <span class=\"sql-docs-inline-code\">base64encode()</span> , or specified in\n        the argument string to <span class=\"sql-docs-inline-code\">base64decode()</span> ,\n        are the ASCII uppercase and lowercase letters (A-Z, a-z),\n        digits (0-9), and the punctuation characters\n        <span class=\"sql-docs-inline-code\">+</span> , <span class=\"sql-docs-inline-code\">/</span> , and <span class=\"sql-docs-inline-code\">=</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_alignment\">\n        All return values produced by <span class=\"sql-docs-inline-code\">base64encode()</span> \n        are a multiple of 4 bytes in length. All argument values\n        supplied to <span class=\"sql-docs-inline-code\">base64decode()</span>  must also be a\n        multiple of 4 bytes in length. If a base64-encoded value\n        would otherwise have a different length, it can be padded\n        with trailing <span class=\"sql-docs-inline-code\">=</span>  characters to reach a length\n        that is a multiple of 4 bytes.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_base64_examples\">\n        The following examples show how to use <span class=\"sql-docs-inline-code\">base64encode()</span> \n        and <span class=\"sql-docs-inline-code\">base64decode()</span>  together to store and retrieve\n        string values:\n<div class=\"sql-docs-code-block\">-- An arbitrary string can be encoded in base 64.<br/>-- The length of the output is a multiple of 4 bytes,<br/>-- padded with trailing = characters if necessary.<br/>select base64encode('hello world') as encoded,<br/>  length(base64encode('hello world')) as length;<br/>+------------------+--------+<br/>| encoded          | length |<br/>+------------------+--------+<br/>| aGVsbG8gd29ybGQ= | 16     |<br/>+------------------+--------+<br/><br/>-- Passing an encoded value to base64decode() produces<br/>-- the original value.<br/>select base64decode('aGVsbG8gd29ybGQ=') as decoded;<br/>+-------------+<br/>| decoded     |<br/>+-------------+<br/>| hello world |<br/>+-------------+<br/></div>\n\n      These examples demonstrate incorrect encoded values that\n      produce <span class=\"sql-docs-inline-code\">NULL</span>  return values when decoded:\n\n<div class=\"sql-docs-code-block\">-- The input value to base64decode() must be a multiple of 4 bytes.<br/>-- In this case, leaving off the trailing = padding character<br/>-- produces a NULL return value.<br/>select base64decode('aGVsbG8gd29ybGQ') as decoded;<br/>+---------+<br/>| decoded |<br/>+---------+<br/>| NULL    |<br/>+---------+<br/>WARNINGS: UDF WARNING: Invalid base64 string; input length is 15,<br/>  which is not a multiple of 4.<br/><br/>-- The input to base64decode() can only contain certain characters.<br/>-- The $ character in this case causes a NULL return value.<br/>select base64decode('abc$');<br/>+----------------------+<br/>| base64decode('abc$') |<br/>+----------------------+<br/>| NULL                 |<br/>+----------------------+<br/>WARNINGS: UDF WARNING: Could not base64 decode input in space 4; actual output length 0<br/></div>\n\n      These examples demonstrate <q>round-tripping</q>  of an original string to an\n      encoded string, and back again. This technique is applicable if the original\n      source is in an unknown encoding, or if some intermediate processing stage\n      might cause national characters to be misrepresented:\n\n<div class=\"sql-docs-code-block\">select 'circumflex accents: â, ê, î, ô, û' as original,<br/>  base64encode('circumflex accents: â, ê, î, ô, û') as encoded;<br/>+-----------------------------------+------------------------------------------------------+<br/>| original                          | encoded                                              |<br/>+-----------------------------------+------------------------------------------------------+<br/>| circumflex accents: â, ê, î, ô, û | Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= |<br/>+-----------------------------------+------------------------------------------------------+<br/><br/>select base64encode('circumflex accents: â, ê, î, ô, û') as encoded,<br/>  base64decode(base64encode('circumflex accents: â, ê, î, ô, û')) as decoded;<br/>+------------------------------------------------------+-----------------------------------+<br/>| encoded                                              | decoded                           |<br/>+------------------------------------------------------+-----------------------------------+<br/>| Y2lyY3VtZmxleCBhY2NlbnRzOiDDoiwgw6osIMOuLCDDtCwgw7s= | circumflex accents: â, ê, î, ô, û |<br/>+------------------------------------------------------+-----------------------------------+<br/></div></p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_btrim\"><dt><span class=\"sql-docs-inline-code\">btrim(string a)</span> ,\n          <span class=\"sql-docs-inline-code\">btrim(string a, string chars_to_trim)</span> </dt> <dd><b>Purpose:</b>  Removes all instances of one or more characters\n          from the start and end of a <span class=\"sql-docs-inline-code\">STRING</span>  value.\n          By default, removes only spaces.\n          If a non-<span class=\"sql-docs-inline-code\">NULL</span>  optional second argument is specified, the function removes all\n          occurrences of characters in that second argument from the beginning and\n          end of the string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show the default <span class=\"sql-docs-inline-code\">btrim()</span>  behavior,\n            and what changes when you specify the optional second argument.\n            All the examples bracket the output value with <span class=\"sql-docs-inline-code\">[ ]</span> \n            so that you can see any leading or trailing spaces in the <span class=\"sql-docs-inline-code\">btrim()</span>  result.\n            By default, the function removes and number of both leading and trailing spaces.\n            When the second argument is specified, any number of occurrences of any\n            character in the second argument are removed from the start and end of the\n            input string; in this case, spaces are not removed (unless they are part of the second\n            argument) and any instances of the characters are not removed if they do not come\n            right at the beginning or end of the string.\n          </p> <div class=\"sql-docs-code-block\">-- Remove multiple spaces before and one space after.<br/>select concat('[',btrim('    hello '),']');<br/>+---------------------------------------+<br/>| concat('[', btrim('    hello '), ']') |<br/>+---------------------------------------+<br/>| [hello]                               |<br/>+---------------------------------------+<br/><br/>-- Remove any instances of x or y or z at beginning or end. Leave spaces alone.<br/>select concat('[',btrim('xy    hello zyzzxx','xyz'),']');<br/>+------------------------------------------------------+<br/>| concat('[', btrim('xy    hello zyzzxx', 'xyz'), ']') |<br/>+------------------------------------------------------+<br/>| [    hello ]                                         |<br/>+------------------------------------------------------+<br/><br/>-- Remove any instances of x or y or z at beginning or end.<br/>-- Leave x, y, z alone in the middle of the string.<br/>select concat('[',btrim('xyhelxyzlozyzzxx','xyz'),']');<br/>+----------------------------------------------------+<br/>| concat('[', btrim('xyhelxyzlozyzzxx', 'xyz'), ']') |<br/>+----------------------------------------------------+<br/>| [helxyzlo]                                         |<br/>+----------------------------------------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_char_length\"><dt><span class=\"sql-docs-inline-code\">char_length(string a), <span id=\"../Impala/docs/topics/impala_string_functions.xml_character_length\" class=\"sql-docs-inline-code\">character_length(string a)</span> </span> </dt> <dd><b>Purpose:</b>  Returns the length in characters of the argument string, including any\n          trailing spaces that pad a <span class=\"sql-docs-inline-code\">CHAR</span>  value.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            When applied to a <span class=\"sql-docs-inline-code\">STRING</span>  value, it returns the\n            same result as the <span class=\"sql-docs-inline-code\">length()</span>  function. When applied\n            to a <span class=\"sql-docs-inline-code\">CHAR</span>  value, it might return a larger value\n            than <span class=\"sql-docs-inline-code\">length()</span>  does, to account for trailing spaces\n            in the <span class=\"sql-docs-inline-code\">CHAR</span> .\n          </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_length_demo\">\n        The following example demonstrates how <span class=\"sql-docs-inline-code\">length()</span> \n        and <span class=\"sql-docs-inline-code\">char_length()</span>  sometimes produce the same result,\n        and sometimes produce different results depending on the type of the\n        argument and the presence of trailing spaces for <span class=\"sql-docs-inline-code\">CHAR</span> \n        values. The <span class=\"sql-docs-inline-code\">S</span>  and <span class=\"sql-docs-inline-code\">C</span>  values are\n        displayed with enclosing quotation marks to show any trailing spaces.\n<div id=\"../Impala/docs/topics/impala_string_functions.xml_length_demo_example\" class=\"sql-docs-code-block\">create table length_demo (s string, c char(5));<br/>insert into length_demo values<br/>  ('a',cast('a' as char(5))),<br/>  ('abc',cast('abc' as char(5))),<br/>  ('hello',cast('hello' as char(5)));<br/><br/>select concat('\"',s,'\"') as s, concat('\"',c,'\"') as c,<br/>  length(s), length(c),<br/>  char_length(s), char_length(c)<br/>from length_demo;<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/>| s       | c       | length(s) | length(c) | char_length(s) | char_length(c) |<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/>| \"a\"     | \"a    \" | 1         | 1         | 1              | 5              |<br/>| \"abc\"   | \"abc  \" | 3         | 3         | 3              | 5              |<br/>| \"hello\" | \"hello\" | 5         | 5         | 5              | 5              |<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/></div></p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_chr\"><dt><span class=\"sql-docs-inline-code\">chr(int character_code)</span> </dt> <dd><b>Purpose:</b>  Returns a character specified by a decimal code point value.\n          The interpretation and display of the resulting character depends on your system locale.\n          Because consistent processing of Impala string values is only guaranteed\n          for values within the ASCII range, only use this function for values\n          corresponding to ASCII characters.\n          In particular, parameter values greater than 255 return an empty string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p><b>Usage notes:</b>  Can be used as the inverse of the <span class=\"sql-docs-inline-code\">ascii()</span>  function, which\n            converts a character to its numeric ASCII code.\n          </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">SELECT chr(65);<br/>+---------+<br/>| chr(65) |<br/>+---------+<br/>| A       |<br/>+---------+<br/><br/>SELECT chr(97);<br/>+---------+<br/>| chr(97) |<br/>+---------+<br/>| a       |<br/>+---------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_concat\"><dt><span class=\"sql-docs-inline-code\">concat(string a, string b...)</span> </dt> <dd><b>Purpose:</b>  Returns a single string representing all the argument values joined together.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_concat_blurb\"><b>Usage notes:</b> <span class=\"sql-docs-inline-code\">concat()</span>  and <span class=\"sql-docs-inline-code\">concat_ws()</span>  are appropriate for\n        concatenating the values of multiple columns within the same row, while <span class=\"sql-docs-inline-code\">group_concat()</span> \n        joins together values from different rows.\n      </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_concat_ws\"><dt><span class=\"sql-docs-inline-code\">concat_ws(string sep, string a, string b...)</span> </dt> <dd><b>Purpose:</b>  Returns a single string representing the second and following argument values joined\n          together, delimited by a specified separator.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_concat_blurb\"><b>Usage notes:</b> <span class=\"sql-docs-inline-code\">concat()</span>  and <span class=\"sql-docs-inline-code\">concat_ws()</span>  are appropriate for\n        concatenating the values of multiple columns within the same row, while <span class=\"sql-docs-inline-code\">group_concat()</span> \n        joins together values from different rows.\n      </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_find_in_set\"><dt><span class=\"sql-docs-inline-code\">find_in_set(string str, string strList)</span> </dt> <dd><b>Purpose:</b>  Returns the position (starting from 1) of the first occurrence of a specified string\n          within a comma-separated string. Returns <span class=\"sql-docs-inline-code\">NULL</span>  if either argument is\n          <span class=\"sql-docs-inline-code\">NULL</span> , 0 if the search string is not found, or 0 if the search string contains a comma.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_group_concat\"><dt><span class=\"sql-docs-inline-code\">group_concat(string s [, string sep])</span> </dt> <dd><b>Purpose:</b>  Returns a single string representing the argument value concatenated together for each\n          row of the result set. If the optional separator string is specified, the separator is added between each\n          pair of concatenated values.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_concat_blurb\"><b>Usage notes:</b> <span class=\"sql-docs-inline-code\">concat()</span>  and <span class=\"sql-docs-inline-code\">concat_ws()</span>  are appropriate for\n        concatenating the values of multiple columns within the same row, while <span class=\"sql-docs-inline-code\">group_concat()</span> \n        joins together values from different rows.\n      </p> <p>\n            By default, returns a single string covering the whole result set. To include other columns or values\n            in the result set, or to produce multiple concatenated strings for subsets of rows, include a\n            <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause in the query.\n          </p> <p>\n            Strictly speaking, <span class=\"sql-docs-inline-code\">group_concat()</span>  is an aggregate function, not a scalar\n            function like the others in this list.\n            For additional details and examples, see <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_group_concat.xml#group_concat\">GROUP_CONCAT Function</a>.\n          </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_initcap\"><dt><span class=\"sql-docs-inline-code\">initcap(string str)</span> </dt> <dd><b>Purpose:</b>  Returns the input string with the first letter capitalized.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_instr\"><dt><span class=\"sql-docs-inline-code\">instr(string str, string substr <span class=\"sql-docs-inline-code\">[, bigint position [, bigint occurrence ] ]</span> )</span> </dt> <dd><b>Purpose:</b>  Returns the position (starting from 1) of the first occurrence of a substring within a\n          longer string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            If the substring is not present in the string, the function returns 0:\n          </p> <div class=\"sql-docs-code-block\">select instr('foo bar bletch', 'z');<br/>+------------------------------+<br/>| instr('foo bar bletch', 'z') |<br/>+------------------------------+<br/>| 0                            |<br/>+------------------------------+<br/></div><p>\n            The optional third and fourth arguments let you find instances of the substring\n            other than the first instance starting from the left:\n          </p> <ul><li><p>\n                The third argument lets you specify a starting point within the string\n                other than 1:\n              </p> <div class=\"sql-docs-code-block\">-- Restricting the search to positions 7..end,<br/>-- the first occurrence of 'b' is at position 9.<br/>select instr('foo bar bletch', 'b', 7);<br/>+---------------------------------+<br/>| instr('foo bar bletch', 'b', 7) |<br/>+---------------------------------+<br/>| 9                               |<br/>+---------------------------------+<br/><br/>-- If there are no more occurrences after the<br/>-- specified position, the result is 0.<br/>select instr('foo bar bletch', 'b', 10);<br/>+----------------------------------+<br/>| instr('foo bar bletch', 'b', 10) |<br/>+----------------------------------+<br/>| 0                                |<br/>+----------------------------------+<br/></div><p>\n                If the third argument is negative, the search works right-to-left\n                starting that many characters from the right. The return value still\n                represents the position starting from the left side of the string.\n              </p> <div class=\"sql-docs-code-block\">-- Scanning right to left, the first occurrence of 'o'<br/>-- is at position 8. (8th character from the left.)<br/>select instr('hello world','o',-1);<br/>+-------------------------------+<br/>| instr('hello world', 'o', -1) |<br/>+-------------------------------+<br/>| 8                             |<br/>+-------------------------------+<br/><br/>-- Scanning right to left, starting from the 6th character<br/>-- from the right, the first occurrence of 'o' is at<br/>-- position 5 (5th character from the left).<br/>select instr('hello world','o',-6);<br/>+-------------------------------+<br/>| instr('hello world', 'o', -6) |<br/>+-------------------------------+<br/>| 5                             |<br/>+-------------------------------+<br/><br/>-- If there are no more occurrences after the<br/>-- specified position, the result is 0.<br/>select instr('hello world','o',-10);<br/>+--------------------------------+<br/>| instr('hello world', 'o', -10) |<br/>+--------------------------------+<br/>| 0                              |<br/>+--------------------------------+<br/></div></li> <li><p>\n                The fourth argument lets you specify an occurrence other than the first:\n              </p> <div class=\"sql-docs-code-block\">-- 2nd occurrence of 'b' is at position 9.<br/>select instr('foo bar bletch', 'b', 1, 2);<br/>+------------------------------------+<br/>| instr('foo bar bletch', 'b', 1, 2) |<br/>+------------------------------------+<br/>| 9                                  |<br/>+------------------------------------+<br/><br/>-- Negative position argument means scan right-to-left.<br/>-- This example finds second instance of 'b' from the right.<br/>select instr('foo bar bletch', 'b', -1, 2);<br/>+-------------------------------------+<br/>| instr('foo bar bletch', 'b', -1, 2) |<br/>+-------------------------------------+<br/>| 5                                   |<br/>+-------------------------------------+<br/></div><p>\n                If the fourth argument is greater than the number of matching occurrences,\n                the function returns 0:\n              </p> <div class=\"sql-docs-code-block\">-- There is no 3rd occurrence within the string.<br/>select instr('foo bar bletch', 'b', 1, 3);<br/>+------------------------------------+<br/>| instr('foo bar bletch', 'b', 1, 3) |<br/>+------------------------------------+<br/>| 0                                  |<br/>+------------------------------------+<br/><br/>-- There is not even 1 occurrence when scanning<br/>-- the string starting at position 10.<br/>select instr('foo bar bletch', 'b', 10, 1);<br/>+-------------------------------------+<br/>| instr('foo bar bletch', 'b', 10, 1) |<br/>+-------------------------------------+<br/>| 0                                   |<br/>+-------------------------------------+<br/></div><p>\n                The fourth argument cannot be negative or zero. A non-positive value for\n                this argument causes an error:\n              </p> <div class=\"sql-docs-code-block\">select instr('foo bar bletch', 'b', 1, 0);<br/>ERROR: UDF ERROR: Invalid occurrence parameter to instr function: 0<br/><br/>select instr('aaaaaaaaa','aa', 1, -1);<br/>ERROR: UDF ERROR: Invalid occurrence parameter to instr function: -1<br/></div></li> <li><p>\n                If either of the optional arguments is <span class=\"sql-docs-inline-code\">NULL</span> ,\n                the function also returns <span class=\"sql-docs-inline-code\">NULL</span> :\n              </p> <div class=\"sql-docs-code-block\">select instr('foo bar bletch', 'b', null);<br/>+------------------------------------+<br/>| instr('foo bar bletch', 'b', null) |<br/>+------------------------------------+<br/>| NULL                               |<br/>+------------------------------------+<br/><br/>select instr('foo bar bletch', 'b', 1, null);<br/>+---------------------------------------+<br/>| instr('foo bar bletch', 'b', 1, null) |<br/>+---------------------------------------+<br/>| NULL                                  |<br/>+---------------------------------------+<br/></div></li> </ul> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_left\"><dt><span class=\"sql-docs-inline-code\">left(string a, int num_chars)</span> </dt> <dd>\n          See the <span class=\"sql-docs-inline-code\">strleft</span>  function.\n        </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_length\"><dt><span class=\"sql-docs-inline-code\">length(string a)</span> </dt> <dd><b>Purpose:</b>  Returns the length in characters of the argument string,\n          ignoring any trailing spaces in <span class=\"sql-docs-inline-code\">CHAR</span>  values.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            When applied to a <span class=\"sql-docs-inline-code\">STRING</span>  value, it returns the\n            same result as the <span class=\"sql-docs-inline-code\">char_length()</span>  function. When applied\n            to a <span class=\"sql-docs-inline-code\">CHAR</span>  value, it might return a smaller value\n            than <span class=\"sql-docs-inline-code\">char_length()</span>  does, because <span class=\"sql-docs-inline-code\">length()</span> \n            ignores any trailing spaces in the <span class=\"sql-docs-inline-code\">CHAR</span> .\n          </p> <div class=\"sql-docs-note\">\n            Because the behavior of <span class=\"sql-docs-inline-code\">length()</span>  with <span class=\"sql-docs-inline-code\">CHAR</span> \n            values containing trailing spaces is not standardized across the industry,\n            when porting code from other database systems, evaluate the behavior of\n            <span class=\"sql-docs-inline-code\">length()</span>  on the source system and switch to\n            <span class=\"sql-docs-inline-code\">char_length()</span>  for Impala if necessary.\n          </div> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_length_demo\">\n        The following example demonstrates how <span class=\"sql-docs-inline-code\">length()</span> \n        and <span class=\"sql-docs-inline-code\">char_length()</span>  sometimes produce the same result,\n        and sometimes produce different results depending on the type of the\n        argument and the presence of trailing spaces for <span class=\"sql-docs-inline-code\">CHAR</span> \n        values. The <span class=\"sql-docs-inline-code\">S</span>  and <span class=\"sql-docs-inline-code\">C</span>  values are\n        displayed with enclosing quotation marks to show any trailing spaces.\n<div id=\"../Impala/docs/topics/impala_string_functions.xml_length_demo_example\" class=\"sql-docs-code-block\">create table length_demo (s string, c char(5));<br/>insert into length_demo values<br/>  ('a',cast('a' as char(5))),<br/>  ('abc',cast('abc' as char(5))),<br/>  ('hello',cast('hello' as char(5)));<br/><br/>select concat('\"',s,'\"') as s, concat('\"',c,'\"') as c,<br/>  length(s), length(c),<br/>  char_length(s), char_length(c)<br/>from length_demo;<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/>| s       | c       | length(s) | length(c) | char_length(s) | char_length(c) |<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/>| \"a\"     | \"a    \" | 1         | 1         | 1              | 5              |<br/>| \"abc\"   | \"abc  \" | 3         | 3         | 3              | 5              |<br/>| \"hello\" | \"hello\" | 5         | 5         | 5              | 5              |<br/>+---------+---------+-----------+-----------+----------------+----------------+<br/></div></p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_locate\"><dt><span class=\"sql-docs-inline-code\">locate(string substr, string str[, int pos])</span> </dt> <dd><b>Purpose:</b>  Returns the position (starting from 1) of the first occurrence of a substring within a\n          longer string, optionally after a particular position.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">int</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_lower\"><dt><span class=\"sql-docs-inline-code\">lower(string a), <span id=\"../Impala/docs/topics/impala_string_functions.xml_lcase\" class=\"sql-docs-inline-code\">lcase(string a)</span> </span> </dt> <dd><b>Purpose:</b>  Returns the argument string converted to all-lowercase.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_case_insensitive_comparisons_tip\">\n        In Impala 2.5 and higher, you can simplify queries that\n        use many <span class=\"sql-docs-inline-code\">UPPER()</span>  and <span class=\"sql-docs-inline-code\">LOWER()</span>  calls\n        to do case-insensitive comparisons, by using the <span class=\"sql-docs-inline-code\">ILIKE</span> \n        or <span class=\"sql-docs-inline-code\">IREGEXP</span>  operators instead. See\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#ilike\"><h4>ILIKE Operator</h4> </a> and\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#iregexp\"><h4>IREGEXP Operator</h4> </a> for details.\n      </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_lpad\"><dt><span class=\"sql-docs-inline-code\">lpad(string str, int len, string pad)</span> </dt> <dd><b>Purpose:</b>  Returns a string of a specified length, based on the first argument string. If the\n          specified string is too short, it is padded on the left with a repeating sequence of the characters from\n          the pad string. If the specified string is too long, it is truncated on the right.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_ltrim\"><dt><span class=\"sql-docs-inline-code\">ltrim(string a [, string chars_to_trim])</span> </dt> <dd><b>Purpose:</b>  Returns the argument string with all occurrences\n          of characters specified by the second argument removed from\n          the left side. Removes spaces if the second argument is not specified.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_parse_url\"><dt><span class=\"sql-docs-inline-code\">parse_url(string urlString, string partToExtract [, string keyToExtract])</span> </dt> <dd><b>Purpose:</b>  Returns the portion of a URL corresponding to a specified part. The part argument can be\n          <span class=\"sql-docs-inline-code\">'PROTOCOL'</span> , <span class=\"sql-docs-inline-code\">'HOST'</span> , <span class=\"sql-docs-inline-code\">'PATH'</span> , <span class=\"sql-docs-inline-code\">'REF'</span> ,\n          <span class=\"sql-docs-inline-code\">'AUTHORITY'</span> , <span class=\"sql-docs-inline-code\">'FILE'</span> , <span class=\"sql-docs-inline-code\">'USERINFO'</span> , or\n          <span class=\"sql-docs-inline-code\">'QUERY'</span> . Uppercase is required for these literal values. When requesting the\n          <span class=\"sql-docs-inline-code\">QUERY</span>  portion of the URL, you can optionally specify a key to retrieve just the\n          associated value from the key-value pairs in the query string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p><b>Usage notes:</b>  This function is important for the traditional Hadoop use case of interpreting web\n            logs. For example, if the web traffic data features raw URLs not divided into separate table columns,\n            you can count visitors to a particular page by extracting the <span class=\"sql-docs-inline-code\">'PATH'</span>  or\n            <span class=\"sql-docs-inline-code\">'FILE'</span>  field, or analyze search terms by extracting the corresponding key from the\n            <span class=\"sql-docs-inline-code\">'QUERY'</span>  field.\n          </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escape\"><dt><span class=\"sql-docs-inline-code\">regexp_escape(string source)</span> </dt> <dd><b>Purpose:</b>  The <span class=\"sql-docs-inline-code\">regexp_escape</span>  function returns\n          a string escaped for the special character in RE2 library so that the\n          special characters are interpreted literally rather than as special\n          characters. The following special characters are escaped by the\n          function:\n<div class=\"sql-docs-code-block\"></div><p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular\n        Expression syntax used by the Google RE2 library. For details, see\n        <a target=\"_blank\" href=\"https://code.google.com/p/re2/\">the RE2 documentation</a>. It\n        has most idioms familiar from regular expressions in Perl, Python, and so on, including\n        <span class=\"sql-docs-inline-code\">.*?</span>  for non-greedy matches.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the\n        way regular expressions are interpreted by this function. Test any queries that use regular expressions and\n        adjust the expression patterns if necessary. See\n        <span>incompatible changes 200</span> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escapes\">\n        Because the <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter uses the <span class=\"sql-docs-inline-code\">\\</span>  character for escaping,\n        use <span class=\"sql-docs-inline-code\">\\\\</span>  to represent the regular expression escape character in any regular expressions\n        that you submit through <span class=\"sql-docs-inline-code\">impala-shell</span>  . You might prefer to use the equivalent character\n        class names, such as <span class=\"sql-docs-inline-code\">[[:digit:]]</span>  instead of <span class=\"sql-docs-inline-code\">\\d</span>  which you would have to\n        escape as <span class=\"sql-docs-inline-code\">\\\\d</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            This example shows escaping one of special characters in RE2.\n          </p> <div class=\"sql-docs-code-block\">+------------------------------------------------------+<br/>| regexp_escape('Hello.world')                         |<br/>+------------------------------------------------------+<br/>| Hello\\.world                                         |<br/>+------------------------------------------------------+<br/></div><p>\n            This example shows escaping all the special characters in RE2.\n          </p> <div class=\"sql-docs-code-block\"></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_extract\"><dt><span class=\"sql-docs-inline-code\">regexp_extract(string subject, string pattern, int index)</span> </dt> <dd><b>Purpose:</b>  Returns the specified () group from a string based on a regular expression pattern. Group\n          0 refers to the entire extracted string, while group 1, 2, and so on refers to the first, second, and so\n          on <span class=\"sql-docs-inline-code\">(...)</span>  portion.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular\n        Expression syntax used by the Google RE2 library. For details, see\n        <a target=\"_blank\" href=\"https://code.google.com/p/re2/\">the RE2 documentation</a>. It\n        has most idioms familiar from regular expressions in Perl, Python, and so on, including\n        <span class=\"sql-docs-inline-code\">.*?</span>  for non-greedy matches.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the\n        way regular expressions are interpreted by this function. Test any queries that use regular expressions and\n        adjust the expression patterns if necessary. See\n        <span>incompatible changes 200</span> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escapes\">\n        Because the <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter uses the <span class=\"sql-docs-inline-code\">\\</span>  character for escaping,\n        use <span class=\"sql-docs-inline-code\">\\\\</span>  to represent the regular expression escape character in any regular expressions\n        that you submit through <span class=\"sql-docs-inline-code\">impala-shell</span>  . You might prefer to use the equivalent character\n        class names, such as <span class=\"sql-docs-inline-code\">[[:digit:]]</span>  instead of <span class=\"sql-docs-inline-code\">\\d</span>  which you would have to\n        escape as <span class=\"sql-docs-inline-code\">\\\\d</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            This example shows how group 0 matches the full pattern string, including the portion outside any\n            <span class=\"sql-docs-inline-code\">()</span>  group:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_extract('abcdef123ghi456jkl','.*?(\\\\d+)',0);<br/>+------------------------------------------------------+<br/>| regexp_extract('abcdef123ghi456jkl', '.*?(\\\\d+)', 0) |<br/>+------------------------------------------------------+<br/>| abcdef123ghi456                                      |<br/>+------------------------------------------------------+<br/>Returned 1 row(s) in 0.11s</div><p>\n            This example shows how group 1 matches just the contents inside the first <span class=\"sql-docs-inline-code\">()</span>  group in\n            the pattern string:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_extract('abcdef123ghi456jkl','.*?(\\\\d+)',1);<br/>+------------------------------------------------------+<br/>| regexp_extract('abcdef123ghi456jkl', '.*?(\\\\d+)', 1) |<br/>+------------------------------------------------------+<br/>| 456                                                  |<br/>+------------------------------------------------------+<br/>Returned 1 row(s) in 0.11s</div><p>\n            Unlike in earlier Impala releases, the regular expression library used in Impala 2.0 and later supports\n            the <span class=\"sql-docs-inline-code\">.*?</span>  idiom for non-greedy matches. This example shows how a pattern string starting\n            with <span class=\"sql-docs-inline-code\">.*?</span>  matches the shortest possible portion of the source string, returning the\n            rightmost set of lowercase letters. A pattern string both starting and ending with <span class=\"sql-docs-inline-code\">.*?</span> \n            finds two potential matches of equal length, and returns the first one found (the leftmost set of\n            lowercase letters).\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_extract('AbcdBCdefGHI','.*?([[:lower:]]+)',1);<br/>+--------------------------------------------------------+<br/>| regexp_extract('abcdbcdefghi', '.*?([[:lower:]]+)', 1) |<br/>+--------------------------------------------------------+<br/>| def                                                    |<br/>+--------------------------------------------------------+<br/>[localhost:21000] > select regexp_extract('AbcdBCdefGHI','.*?([[:lower:]]+).*?',1);<br/>+-----------------------------------------------------------+<br/>| regexp_extract('abcdbcdefghi', '.*?([[:lower:]]+).*?', 1) |<br/>+-----------------------------------------------------------+<br/>| bcd                                                       |<br/>+-----------------------------------------------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_like\"><dt><span class=\"sql-docs-inline-code\">regexp_like(string source, string pattern[, string options])</span> </dt> <dd><b>Purpose:</b>  Returns <span class=\"sql-docs-inline-code\">true</span>  or <span class=\"sql-docs-inline-code\">false</span>  to indicate\n          whether the source string contains anywhere inside it the regular expression given by the pattern.\n          The optional third argument consists of letter flags that change how the match is performed,\n          such as <span class=\"sql-docs-inline-code\">i</span>  for case-insensitive matching.\n          <p id=\"../Impala/docs/topics/impala_string_functions.xml_syntax_blurb\"><b>Syntax:</b> </p> <p>\n            The flags that you can include in the optional third argument are:\n          </p> <ul><li><span class=\"sql-docs-inline-code\">c</span> : Case-sensitive matching (the default).\n          </li> <li><span class=\"sql-docs-inline-code\">i</span> : Case-insensitive matching. If multiple instances of <span class=\"sql-docs-inline-code\">c</span>  and <span class=\"sql-docs-inline-code\">i</span> \n          are included in the third argument, the last such option takes precedence.\n          </li> <li><span class=\"sql-docs-inline-code\">m</span> : Multi-line matching. The <span class=\"sql-docs-inline-code\">^</span>  and <span class=\"sql-docs-inline-code\">$</span> \n          operators match the start or end of any line within the source string, not the\n          start and end of the entire string.\n          </li> <li><span class=\"sql-docs-inline-code\">n</span> : Newline matching. The <span class=\"sql-docs-inline-code\">.</span>  operator can match the\n          newline character. A repetition operator such as <span class=\"sql-docs-inline-code\">.*</span>  can\n          match a portion of the source string that spans multiple lines.\n          </li> </ul> <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">boolean</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular\n        Expression syntax used by the Google RE2 library. For details, see\n        <a target=\"_blank\" href=\"https://code.google.com/p/re2/\">the RE2 documentation</a>. It\n        has most idioms familiar from regular expressions in Perl, Python, and so on, including\n        <span class=\"sql-docs-inline-code\">.*?</span>  for non-greedy matches.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the\n        way regular expressions are interpreted by this function. Test any queries that use regular expressions and\n        adjust the expression patterns if necessary. See\n        <span>incompatible changes 200</span> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escapes\">\n        Because the <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter uses the <span class=\"sql-docs-inline-code\">\\</span>  character for escaping,\n        use <span class=\"sql-docs-inline-code\">\\\\</span>  to represent the regular expression escape character in any regular expressions\n        that you submit through <span class=\"sql-docs-inline-code\">impala-shell</span>  . You might prefer to use the equivalent character\n        class names, such as <span class=\"sql-docs-inline-code\">[[:digit:]]</span>  instead of <span class=\"sql-docs-inline-code\">\\d</span>  which you would have to\n        escape as <span class=\"sql-docs-inline-code\">\\\\d</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            This example shows how <span class=\"sql-docs-inline-code\">regexp_like()</span>  can test for the existence\n            of various kinds of regular expression patterns within a source string:\n          </p> <div class=\"sql-docs-code-block\"></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_replace\"><dt><span class=\"sql-docs-inline-code\">regexp_replace(string initial, string pattern, string replacement)</span> </dt> <dd><b>Purpose:</b>  Returns the initial argument with the regular expression pattern replaced by the final\n          argument string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular\n        Expression syntax used by the Google RE2 library. For details, see\n        <a target=\"_blank\" href=\"https://code.google.com/p/re2/\">the RE2 documentation</a>. It\n        has most idioms familiar from regular expressions in Perl, Python, and so on, including\n        <span class=\"sql-docs-inline-code\">.*?</span>  for non-greedy matches.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the\n        way regular expressions are interpreted by this function. Test any queries that use regular expressions and\n        adjust the expression patterns if necessary. See\n        <span>incompatible changes 200</span> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escapes\">\n        Because the <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter uses the <span class=\"sql-docs-inline-code\">\\</span>  character for escaping,\n        use <span class=\"sql-docs-inline-code\">\\\\</span>  to represent the regular expression escape character in any regular expressions\n        that you submit through <span class=\"sql-docs-inline-code\">impala-shell</span>  . You might prefer to use the equivalent character\n        class names, such as <span class=\"sql-docs-inline-code\">[[:digit:]]</span>  instead of <span class=\"sql-docs-inline-code\">\\d</span>  which you would have to\n        escape as <span class=\"sql-docs-inline-code\">\\\\d</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            These examples show how you can replace parts of a string matching a pattern with replacement text,\n            which can include backreferences to any <span class=\"sql-docs-inline-code\">()</span>  groups in the pattern string. The\n            backreference numbers start at 1, and any <span class=\"sql-docs-inline-code\">\\</span>  characters must be escaped as\n            <span class=\"sql-docs-inline-code\">\\\\</span> .\n          </p> <p>\n            Replace a character pattern with new text:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_replace('aaabbbaaa','b+','xyz');<br/>+------------------------------------------+<br/>| regexp_replace('aaabbbaaa', 'b+', 'xyz') |<br/>+------------------------------------------+<br/>| aaaxyzaaa                                |<br/>+------------------------------------------+<br/>Returned 1 row(s) in 0.11s</div><p>\n            Replace a character pattern with substitution text that includes the original matching text:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_replace('aaabbbaaa','(b+)','<\\\\1>');<br/>+----------------------------------------------+<br/>| regexp_replace('aaabbbaaa', '(b+)', '<\\\\1>') |<br/>+----------------------------------------------+<br/>| aaa<bbb>aaa                                  |<br/>+----------------------------------------------+<br/>Returned 1 row(s) in 0.11s</div><p>\n            Remove all characters that are not digits:\n          </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select regexp_replace('123-456-789','[^[:digit:]]','');<br/>+---------------------------------------------------+<br/>| regexp_replace('123-456-789', '[^[:digit:]]', '') |<br/>+---------------------------------------------------+<br/>| 123456789                                         |<br/>+---------------------------------------------------+<br/>Returned 1 row(s) in 0.12s</div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_repeat\"><dt><span class=\"sql-docs-inline-code\">repeat(string str, int n)</span> </dt> <dd><b>Purpose:</b>  Returns the argument string repeated a specified number of times.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_replace\"><dt><span class=\"sql-docs-inline-code\">replace(string initial, string target, string replacement)</span> </dt> <dd><b>Purpose:</b>  Returns the initial argument with all occurrences of the target string\n          replaced by the replacement string.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            Because this function does not use any regular expression patterns, it is typically faster\n            than <span class=\"sql-docs-inline-code\">regexp_replace()</span>  for simple string substitutions.\n          </p> <p>\n            If any argument is <span class=\"sql-docs-inline-code\">NULL</span> , the return value is <span class=\"sql-docs-inline-code\">NULL</span> .\n          </p> <p>\n            Matching is case-sensitive.\n          </p> <p>\n            If the replacement string contains another instance of the target\n            string, the expansion is only performed once, instead of\n            applying again to the newly constructed string.\n          </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_added_in_290\"><b>Added in:</b> Impala 2.9.0</p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">-- Replace one string with another.<br/>select replace('hello world','world','earth');<br/>+------------------------------------------+<br/>| replace('hello world', 'world', 'earth') |<br/>+------------------------------------------+<br/>| hello earth                              |<br/>+------------------------------------------+<br/><br/>-- All occurrences of the target string are replaced.<br/>select replace('hello world','o','0');<br/>+----------------------------------+<br/>| replace('hello world', 'o', '0') |<br/>+----------------------------------+<br/>| hell0 w0rld                      |<br/>+----------------------------------+<br/><br/>-- If no match is found, the original string is returned unchanged.<br/>select replace('hello world','xyz','abc');<br/>+--------------------------------------+<br/>| replace('hello world', 'xyz', 'abc') |<br/>+--------------------------------------+<br/>| hello world                          |<br/>+--------------------------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_reverse\"><dt><span class=\"sql-docs-inline-code\">reverse(string a)</span> </dt> <dd><b>Purpose:</b>  Returns the argument string with characters in reversed order.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_right\"><dt><span class=\"sql-docs-inline-code\">right(string a, int num_chars)</span> </dt> <dd>\n          See the <span class=\"sql-docs-inline-code\">strright</span>  function.\n        </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_rpad\"><dt><span class=\"sql-docs-inline-code\">rpad(string str, int len, string pad)</span> </dt> <dd><b>Purpose:</b>  Returns a string of a specified length, based on the first argument string. If the\n          specified string is too short, it is padded on the right with a repeating sequence of the characters from\n          the pad string. If the specified string is too long, it is truncated on the right.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_rtrim\"><dt><span class=\"sql-docs-inline-code\">rtrim(string a [, string chars_to_trim])</span> </dt> <dd><b>Purpose:</b>  Returns the argument string with all occurrences\n          of characters specified by the second argument removed from\n          the right side. Removes spaces if the second argument is not specified.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_space\"><dt><span class=\"sql-docs-inline-code\">space(int n)</span> </dt> <dd><b>Purpose:</b>  Returns a concatenated string of the specified number of spaces. Shorthand for\n          <span class=\"sql-docs-inline-code\">repeat(' ',<span class=\"sql-docs-variable\">n</span> )</span> .\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_split_part\"><dt><span class=\"sql-docs-inline-code\">split_part(string source, string delimiter, bigint n)</span> </dt> <dd><b>Purpose:</b>  Returns the nth field within a delimited string. The\n          fields are numbered starting from 1. The delimiter can consist of\n          multiple characters, not just a single character. All matching of the\n          delimiter is done exactly, not using any regular expression patterns.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2\">\n        In Impala 2.0 and later, the Impala regular expression syntax conforms to the POSIX Extended Regular\n        Expression syntax used by the Google RE2 library. For details, see\n        <a target=\"_blank\" href=\"https://code.google.com/p/re2/\">the RE2 documentation</a>. It\n        has most idioms familiar from regular expressions in Perl, Python, and so on, including\n        <span class=\"sql-docs-inline-code\">.*?</span>  for non-greedy matches.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_re2_warning\">\n        In Impala 2.0 and later, a change in the underlying regular expression library could cause changes in the\n        way regular expressions are interpreted by this function. Test any queries that use regular expressions and\n        adjust the expression patterns if necessary. See\n        <span>incompatible changes 200</span> for details.\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_regexp_escapes\">\n        Because the <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter uses the <span class=\"sql-docs-inline-code\">\\</span>  character for escaping,\n        use <span class=\"sql-docs-inline-code\">\\\\</span>  to represent the regular expression escape character in any regular expressions\n        that you submit through <span class=\"sql-docs-inline-code\">impala-shell</span>  . You might prefer to use the equivalent character\n        class names, such as <span class=\"sql-docs-inline-code\">[[:digit:]]</span>  instead of <span class=\"sql-docs-inline-code\">\\d</span>  which you would have to\n        escape as <span class=\"sql-docs-inline-code\">\\\\d</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            These examples show how to retrieve the nth field from a delimited\n            string:\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            These examples show what happens for out-of-range field positions.\n            Specifying a value less than 1 produces an error. Specifying a value\n            greater than the number of fields returns a zero-length string\n            (which is not the same as <span class=\"sql-docs-inline-code\">NULL</span> ).\n          </p> <div class=\"sql-docs-code-block\"></div><p>\n            These examples show how the delimiter can be a multi-character value:\n          </p> <div class=\"sql-docs-code-block\"></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_strleft\"><dt><span class=\"sql-docs-inline-code\">strleft(string a, int num_chars)</span> </dt> <dd><b>Purpose:</b>  Returns the leftmost characters of the string. Shorthand for a call to\n          <span class=\"sql-docs-inline-code\">substr()</span>  with 2 arguments.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_strright\"><dt><span class=\"sql-docs-inline-code\">strright(string a, int num_chars)</span> </dt> <dd><b>Purpose:</b>  Returns the rightmost characters of the string. Shorthand for a call to\n          <span class=\"sql-docs-inline-code\">substr()</span>  with 2 arguments.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_substr\"><dt><span class=\"sql-docs-inline-code\">substr(string a, int start [, int len]), <span id=\"../Impala/docs/topics/impala_string_functions.xml_substring\" class=\"sql-docs-inline-code\">substring(string a, int start [, int\n          len])</span> </span> </dt> <dd><b>Purpose:</b>  Returns the portion of the string starting at a specified point, optionally with a\n          specified maximum length. The characters in the string are indexed starting at 1.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_translate\"><dt><span class=\"sql-docs-inline-code\">translate(string input, string from, string to)</span> </dt> <dd><b>Purpose:</b>  Returns the input string with a set of characters replaced by another set of characters.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_trim\"><dt><span class=\"sql-docs-inline-code\">trim(string a)</span> </dt> <dd><b>Purpose:</b>  Returns the input string with both leading and trailing spaces removed. The same as\n          passing the string through both <span class=\"sql-docs-inline-code\">ltrim()</span>  and <span class=\"sql-docs-inline-code\">rtrim()</span> .\n          <p><b>Usage notes:</b>  Often used during data cleansing operations during the ETL cycle, if input values might still have surrounding spaces.\n            For a more general-purpose function that can remove other leading and trailing characters besides spaces, see <span class=\"sql-docs-inline-code\">btrim()</span> .\n          </p> <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> </dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_string_functions.xml_upper\"><dt><span class=\"sql-docs-inline-code\">upper(string a), <span id=\"../Impala/docs/topics/impala_string_functions.xml_ucase\" class=\"sql-docs-inline-code\">ucase(string a)</span> </span> </dt> <dd><b>Purpose:</b>  Returns the argument string converted to all-uppercase.\n          <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">string</span> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p id=\"../Impala/docs/topics/impala_string_functions.xml_case_insensitive_comparisons_tip\">\n        In Impala 2.5 and higher, you can simplify queries that\n        use many <span class=\"sql-docs-inline-code\">UPPER()</span>  and <span class=\"sql-docs-inline-code\">LOWER()</span>  calls\n        to do case-insensitive comparisons, by using the <span class=\"sql-docs-inline-code\">ILIKE</span> \n        or <span class=\"sql-docs-inline-code\">IREGEXP</span>  operators instead. See\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#ilike\"><h4>ILIKE Operator</h4> </a> and\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#iregexp\"><h4>IREGEXP Operator</h4> </a> for details.\n      </p> </dd> </dlentry> </dl> </div> ","title":"Impala String Functions"}