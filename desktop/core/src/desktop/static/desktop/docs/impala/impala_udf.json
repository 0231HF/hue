{"body":"<div><p>\n      User-defined functions (frequently abbreviated as UDFs) let you code your own application logic for\n      processing column values during an Impala query. For example, a UDF could perform calculations using an\n      external math library, combine several column values into one, do geospatial calculations, or other kinds of\n      tests and transformations that are outside the scope of the built-in SQL operators and functions.\n    </p><p>\n      You can use UDFs to simplify query logic when producing reports, or to transform data in flexible ways when\n      copying from one table to another with the <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> syntax.\n    </p><p>\n      You might be familiar with this feature from other database products, under names such as stored functions or\n      stored routines.\n</p><p>\n      Impala support for UDFs is available in Impala 1.2 and higher:\n    </p><ul><li>\n        In Impala 1.1, using UDFs in a query required using the Hive shell. (Because Impala and Hive share the same\n        metastore database, you could switch to Hive to run just those queries requiring UDFs, then switch back to\n        Impala.)\n      </li><li>\n        Starting in Impala 1.2, Impala can run both high-performance native code UDFs written in C++, and\n        Java-based Hive UDFs that you might already have written.\n      </li><li>\n        Impala can run scalar UDFs that return a single value for each row of the result set, and user-defined\n        aggregate functions (UDAFs) that return a value based on a set of rows. Currently, Impala does not support\n        user-defined table functions (UDTFs) or window functions.\n      </li></ul></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_concepts\"><h4>UDF Concepts</h4><div><p>\n        Depending on your use case, you might write all-new functions, reuse Java UDFs that you have already\n        written for Hive, or port Hive Java UDF code to higher-performance native Impala UDFs in C++. You can code\n        either scalar functions for producing results one row at a time, or more complex aggregate functions for\n        doing analysis across. The following sections discuss these different aspects of working with UDFs.\n      </p></div><div id=\"../Impala/docs/topics/impala_udf.xml_udfs_udafs\"><h4>UDFs and UDAFs</h4><div><p>\n          Depending on your use case, the user-defined functions (UDFs) you write might accept or produce different\n          numbers of input and output values:\n        </p><ul><li>\n            The most general kind of user-defined function (the one typically referred to by the abbreviation UDF)\n            takes a single input value and produces a single output value. When used in a query, it is called once\n            for each row in the result set. For example:\n<div class=\"sql-docs-code-block\">select customer_name, is_frequent_customer(customer_id) from customers;<br/>select obfuscate(sensitive_column) from sensitive_data;</div></li><li>\n            A user-defined aggregate function (UDAF) accepts a group of values and returns a single value. You use\n            UDAFs to summarize and condense sets of rows, in the same style as the built-in <span class=\"sql-docs-inline-code\">COUNT</span>,\n            <span class=\"sql-docs-inline-code\">MAX()</span>, <span class=\"sql-docs-inline-code\">SUM()</span>, and <span class=\"sql-docs-inline-code\">AVG()</span> functions. When called in a\n            query that uses the <span class=\"sql-docs-inline-code\">GROUP BY</span> clause, the function is called once for each combination\n            of <span class=\"sql-docs-inline-code\">GROUP BY</span> values. For example:\n<div class=\"sql-docs-code-block\">-- Evaluates multiple rows but returns a single value.<br/>select closest_restaurant(latitude, longitude) from places;<br/><br/>-- Evaluates batches of rows and returns a separate value for each batch.<br/>select most_profitable_location(store_id, sales, expenses, tax_rate, depreciation) from franchise_data group by year;</div></li><li>\n            Currently, Impala does not support other categories of user-defined functions, such as user-defined\n            table functions (UDTFs) or window functions.\n          </li></ul></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_native_udfs\"><h4>Native Impala UDFs</h4><div><p>\n          Impala supports UDFs written in C++, in addition to supporting existing Hive UDFs written in Java.\n          Where practical, use C++ UDFs because the compiled native code can yield higher performance, with\n          UDF execution time often 10x faster for a C++ UDF than the equivalent Java UDF.\n        </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udfs_hive\"><h4>Using Hive UDFs with Impala</h4><div><p>\n          Impala can run Java-based user-defined functions (UDFs), originally written for Hive, with no changes,\n          subject to the following conditions:\n        </p><ul><li>\n            The parameters and return value must all use scalar data types supported by Impala. For example, complex or nested\n            types are not supported.\n          </li><li>\n            Hive/Java UDFs must extend\n              <span class=\"sql-docs-inline-code\">org.apache.hadoop.hive.ql.exec.UDF</span> class.\n          </li><li>\n            Currently, Hive UDFs that accept or return the <span class=\"sql-docs-inline-code\">TIMESTAMP</span> type are not supported.\n          </li><li>\n            Prior to Impala 2.5 the return type must be a <q>Writable</q> type such as <span class=\"sql-docs-inline-code\">Text</span> or\n            <span class=\"sql-docs-inline-code\">IntWritable</span>, rather than a Java primitive type such as <span class=\"sql-docs-inline-code\">String</span> or\n            <span class=\"sql-docs-inline-code\">int</span>. Otherwise, the UDF returns <span class=\"sql-docs-inline-code\">NULL</span>.\n            <span class=\"sql-docs-inline-code\">In Impala 2.5 and higher, this restriction is lifted, and both\n            UDF arguments and return values can be Java primitive types.</span></li><li>\n            Hive UDAFs and UDTFs are not supported.\n          </li><li>\n            Typically, a Java UDF will execute several times slower in Impala than the equivalent native UDF\n            written in C++.\n          </li><li>\n            In Impala 2.5 and higher, you can transparently call Hive Java UDFs through Impala,\n            or call Impala Java UDFs through Hive. This feature does not apply to built-in Hive functions.\n            Any Impala Java UDFs created with older versions must be re-created using new <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span>\n            syntax, without any signature for arguments or the return value.\n          </li></ul><p>\n          To take full advantage of the Impala architecture and performance features, you can also write\n          Impala-specific UDFs in C++.\n        </p><p>\n          For background about Java-based Hive UDFs, see the\n          <a target=\"_blank\" href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF\">Hive\n          documentation for UDFs</a>. For examples or tutorials for writing such UDFs, search the web for\n          related blog posts.\n        </p><p>\n          The ideal way to understand how to reuse Java-based UDFs (originally written for Hive) with Impala is to\n          take some of the Hive built-in functions (implemented as Java UDFs) and take the applicable JAR files\n          through the UDF deployment process for Impala, creating new UDFs with different names:\n        </p><ol><li>\n            Take a copy of the Hive JAR file containing the Hive built-in functions. For example, the path might be\n            like <span class=\"sql-docs-variable\">/usr/lib/hive/lib/hive-exec-0.10.0.jar</span>, with different version\n            numbers corresponding to your specific level of distro.\n          </li><li>\n            Use <span class=\"sql-docs-inline-code\">jar tf <span class=\"sql-docs-variable\">jar_file</span></span> to see a list of the classes inside the JAR.\n            You will see names like <span class=\"sql-docs-inline-code\">org/apache/hadoop/hive/ql/udf/UDFLower.class</span> and\n            <span class=\"sql-docs-inline-code\">org/apache/hadoop/hive/ql/udf/UDFOPNegative.class</span>. Make a note of the names of the\n            functions you want to experiment with. When you specify the entry points for the Impala <span class=\"sql-docs-inline-code\">CREATE\n            FUNCTION</span> statement, change the slash characters to dots and strip off the\n            <span class=\"sql-docs-inline-code\">.class</span> suffix, for example <span class=\"sql-docs-inline-code\">org.apache.hadoop.hive.ql.udf.UDFLower</span> and\n            <span class=\"sql-docs-inline-code\">org.apache.hadoop.hive.ql.udf.UDFOPNegative</span>.\n          </li><li>\n            Copy that file to an HDFS location that Impala can read. (In the examples here, we renamed the file to\n            <span class=\"sql-docs-variable\">hive-builtins.jar</span> in HDFS for simplicity.)\n          </li><li>\n            For each Java-based UDF that you want to call through Impala, issue a <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span>\n            statement, with a <span class=\"sql-docs-inline-code\">LOCATION</span> clause containing the full HDFS path of the JAR file, and a\n            <span class=\"sql-docs-inline-code\">SYMBOL</span> clause with the fully qualified name of the class, using dots as separators and\n            without the <span class=\"sql-docs-inline-code\">.class</span> extension. Remember that user-defined functions are associated with\n            a particular database, so issue a <span class=\"sql-docs-inline-code\">USE</span> statement for the appropriate database first, or\n            specify the SQL function name as\n            <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">db_name</span>.<span class=\"sql-docs-variable\">function_name</span></span>. Use completely new names\n            for the SQL functions, because Impala UDFs cannot have the same name as Impala built-in functions.\n          </li><li>\n            Call the function from your queries, passing arguments of the correct type to match the function\n            signature. These arguments could be references to columns, arithmetic or other kinds of expressions,\n            the results of <span class=\"sql-docs-inline-code\">CAST</span> functions to ensure correct data types, and so on.\n          </li></ol><div class=\"sql-docs-note\"><p id=\"../Impala/docs/topics/impala_udf.xml_refresh_functions_tip\">\n        In Impala 2.9 and higher, you can refresh the user-defined functions (UDFs)\n        that Impala recognizes, at the database level, by running the <span class=\"sql-docs-inline-code\">REFRESH FUNCTIONS</span>\n        statement with the database name as an argument. Java-based UDFs can be added to the metastore\n        database through Hive <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statements, and made visible to Impala\n        by subsequently running <span class=\"sql-docs-inline-code\">REFRESH FUNCTIONS</span>. For example:\n\n<div class=\"sql-docs-code-block\">CREATE DATABASE shared_udfs;<br/>USE shared_udfs;<br/>...use CREATE FUNCTION statements in Hive to create some Java-based UDFs<br/>   that Impala is not initially aware of...<br/>REFRESH FUNCTIONS shared_udfs;<br/>SELECT udf_created_by_hive(c1) FROM ...<br/></div></p></div><div class=\"sql-docs-example\"><h4>Java UDF Example: Reusing lower() Function</h4><p>\n            For example, the following <span class=\"sql-docs-inline-code\">impala-shell</span> session creates an Impala UDF\n            <span class=\"sql-docs-inline-code\">my_lower()</span> that reuses the Java code for the Hive <span class=\"sql-docs-inline-code\">lower()</span>: built-in\n            function. We cannot call it <span class=\"sql-docs-inline-code\">lower()</span> because Impala does not allow UDFs to have the\n            same name as built-in functions. From SQL, we call the function in a basic way (in a query with no\n            <span class=\"sql-docs-inline-code\">WHERE</span> clause), directly on a column, and on the results of a string expression:\n          </p><div class=\"sql-docs-code-block\">[localhost:21000] > create database udfs;<br/>[localhost:21000] > use udfs;<br/>localhost:21000] > create function lower(string) returns string location '/user/hive/udfs/hive.jar' symbol='org.apache.hadoop.hive.ql.udf.UDFLower';<br/>ERROR: AnalysisException: Function cannot have the same name as a builtin: lower<br/>[localhost:21000] > create function my_lower(string) returns string location '/user/hive/udfs/hive.jar' symbol='org.apache.hadoop.hive.ql.udf.UDFLower';<br/>[localhost:21000] > select my_lower('Some String NOT ALREADY LOWERCASE');<br/>+----------------------------------------------------+<br/>| udfs.my_lower('some string not already lowercase') |<br/>+----------------------------------------------------+<br/>| some string not already lowercase                  |<br/>+----------------------------------------------------+<br/>Returned 1 row(s) in 0.11s<br/>[localhost:21000] > create table t2 (s string);<br/>[localhost:21000] > insert into t2 values ('lower'),('UPPER'),('Init cap'),('CamelCase');<br/>Inserted 4 rows in 2.28s<br/>[localhost:21000] > select * from t2;<br/>+-----------+<br/>| s         |<br/>+-----------+<br/>| lower     |<br/>| UPPER     |<br/>| Init cap  |<br/>| CamelCase |<br/>+-----------+<br/>Returned 4 row(s) in 0.47s<br/>[localhost:21000] > select my_lower(s) from t2;<br/>+------------------+<br/>| udfs.my_lower(s) |<br/>+------------------+<br/>| lower            |<br/>| upper            |<br/>| init cap         |<br/>| camelcase        |<br/>+------------------+<br/>Returned 4 row(s) in 0.54s<br/>[localhost:21000] > select my_lower(concat('ABC ',s,' XYZ')) from t2;<br/>+------------------------------------------+<br/>| udfs.my_lower(concat('abc ', s, ' xyz')) |<br/>+------------------------------------------+<br/>| abc lower xyz                            |<br/>| abc upper xyz                            |<br/>| abc init cap xyz                         |<br/>| abc camelcase xyz                        |<br/>+------------------------------------------+<br/>Returned 4 row(s) in 0.22s</div></div><div class=\"sql-docs-example\"><h4>Java UDF Example: Reusing negative() Function</h4><p>\n            Here is an example that reuses the Hive Java code for the <span class=\"sql-docs-inline-code\">negative()</span> built-in\n            function. This example demonstrates how the data types of the arguments must match precisely with the\n            function signature. At first, we create an Impala SQL function that can only accept an integer\n            argument. Impala cannot find a matching function when the query passes a floating-point argument,\n            although we can call the integer version of the function by casting the argument. Then we overload the\n            same function name to also accept a floating-point argument.\n          </p><div class=\"sql-docs-code-block\">[localhost:21000] > create table t (x int);<br/>[localhost:21000] > insert into t values (1), (2), (4), (100);<br/>Inserted 4 rows in 1.43s<br/>[localhost:21000] > create function my_neg(bigint) returns bigint location '/user/hive/udfs/hive.jar' symbol='org.apache.hadoop.hive.ql.udf.UDFOPNegative';<br/>[localhost:21000] > select my_neg(4);<br/>+----------------+<br/>| udfs.my_neg(4) |<br/>+----------------+<br/>| -4             |<br/>+----------------+<br/>[localhost:21000] > select my_neg(x) from t;<br/>+----------------+<br/>| udfs.my_neg(x) |<br/>+----------------+<br/>| -2             |<br/>| -4             |<br/>| -100           |<br/>+----------------+<br/>Returned 3 row(s) in 0.60s<br/>[localhost:21000] > select my_neg(4.0);<br/>ERROR: AnalysisException: No matching function with signature: udfs.my_neg(FLOAT).<br/>[localhost:21000] > select my_neg(cast(4.0 as int));<br/>+-------------------------------+<br/>| udfs.my_neg(cast(4.0 as int)) |<br/>+-------------------------------+<br/>| -4                            |<br/>+-------------------------------+<br/>Returned 1 row(s) in 0.11s<br/>[localhost:21000] > create function my_neg(double) returns double location '/user/hive/udfs/hive.jar' symbol='org.apache.hadoop.hive.ql.udf.UDFOPNegative';<br/>[localhost:21000] > select my_neg(4.0);<br/>+------------------+<br/>| udfs.my_neg(4.0) |<br/>+------------------+<br/>| -4               |<br/>+------------------+<br/>Returned 1 row(s) in 0.11s</div><p>\n            You can find the sample files mentioned here in .\n          </p></div></div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_runtime\"><h4>Runtime Environment for UDFs</h4><div><p>\n        By default, Impala copies UDFs into <span class=\"sql-docs-variable\">/tmp</span>,\n        and you can configure this location through the <span class=\"sql-docs-inline-code\">--local_library_dir</span>\n        startup flag for the <span class=\"sql-docs-inline-code\">impalad</span> daemon.\n      </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_demo_env\"><h4>Installing the UDF Development Package</h4><div><p>\n        To develop UDFs for Impala, download and install the <span class=\"sql-docs-inline-code\">impala-udf-devel</span> package (RHEL-based\n        distributions) or <span class=\"sql-docs-inline-code\">impala-udf-dev</span> (Ubuntu and Debian). This package contains\n        header files, sample source, and build configuration files.\n      </p><ol><li>\n          Start at .\n        </li><li>\n          Locate the appropriate <span class=\"sql-docs-inline-code\">.repo</span> or list file for your operating system version.\n        </li><li>\n          Use the familiar <span class=\"sql-docs-inline-code\">yum</span>, <span class=\"sql-docs-inline-code\">zypper</span>, or <span class=\"sql-docs-inline-code\">apt-get</span> commands\n          depending on your operating system. For the package name, specify <span class=\"sql-docs-inline-code\">impala-udf-devel</span>\n          (RHEL-based distributions) or <span class=\"sql-docs-inline-code\">impala-udf-dev</span> (Ubuntu and Debian).\n        </li></ol><div class=\"sql-docs-note\">\n        The UDF development code does not rely on Impala being installed on the same machine. You can write and\n        compile UDFs on a minimal development system, then deploy them on a different one for use with Impala.\n      </div><p>\n        When you are ready to start writing your own UDFs, download the sample code and build scripts from\n        .\n        Then see <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udf_coding\"><h4>Writing User-Defined Functions (UDFs)</h4></a> for how to code UDFs, and\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udf_tutorial\"><h4>Examples of Creating and Using UDFs</h4></a> for how to build and run UDFs.\n      </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_coding\"><h4>Writing User-Defined Functions (UDFs)</h4><div><p>\n        Before starting UDF development, make sure to install the development package and download the UDF code\n        samples, as described in <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udf_demo_env\"><h4>Installing the UDF Development Package</h4></a>.\n      </p><p>\n        When writing UDFs:\n      </p><ul><li>\n          Keep in mind the data type differences as you transfer values from the high-level SQL to your lower-level\n          UDF code. For example, in the UDF code you might be much more aware of how many bytes different kinds of\n          integers require.\n        </li><li>\n          Use best practices for function-oriented programming: choose arguments carefully, avoid side effects,\n          make each function do a single thing, and so on.\n        </li></ul></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_exploring\"><h4>Getting Started with UDF Coding</h4><div><p>\n          To understand the layout and member variables and functions of the predefined UDF data types, examine the\n          header file <span class=\"sql-docs-variable\">/usr/include/impala_udf/udf.h</span>:\n        </p><div class=\"sql-docs-code-block\">// This is the only Impala header required to develop UDFs and UDAs. This header<br/>// contains the types that need to be used and the FunctionContext object. The context<br/>// object serves as the interface object between the UDF/UDA and the impala process. </div><p>\n          For the basic declarations needed to write a scalar UDF, see the header file\n          \n          within the sample build environment, which defines a simple function\n          named <span class=\"sql-docs-inline-code\">AddUdf()</span>:\n        </p><div class=\"sql-docs-code-block\">#ifndef IMPALA_UDF_SAMPLE_UDF_H<br/>#define IMPALA_UDF_SAMPLE_UDF_H<br/><br/>#include <impala_udf/udf.h><br/><br/>using namespace impala_udf;<br/><br/>IntVal AddUdf(FunctionContext* context, const IntVal& arg1, const IntVal& arg2);<br/><br/>#endif<br/></div><p>\n          For sample C++ code for a simple function named <span class=\"sql-docs-inline-code\">AddUdf()</span>, see the source file\n          <span class=\"sql-docs-variable\">udf-sample.cc</span> within the sample build environment:\n        </p><div class=\"sql-docs-code-block\">#include \"udf-sample.h\"<br/><br/>// In this sample we are declaring a UDF that adds two ints and returns an int.<br/>IntVal AddUdf(FunctionContext* context, const IntVal& arg1, const IntVal& arg2) {<br/>  if (arg1.is_null || arg2.is_null) return IntVal::null();<br/>  return IntVal(arg1.val + arg2.val);<br/>}<br/><br/>// Multiple UDFs can be defined in the same file</div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udfs_args\"><h4>Data Types for Function Arguments and Return Values</h4><div><p>\n          Each value that a user-defined function can accept as an argument or return as a result value must map to\n          a SQL data type that you could specify for a table column.\n        </p><p id=\"../Impala/docs/topics/impala_udf.xml_udfs_no_complex_types\">\n        Currently, Impala UDFs cannot accept arguments or return values of the Impala complex types\n        (<span class=\"sql-docs-inline-code\">STRUCT</span>, <span class=\"sql-docs-inline-code\">ARRAY</span>, or <span class=\"sql-docs-inline-code\">MAP</span>).\n      </p><p>\n          Each data type has a corresponding structure defined in the C++ and Java header files, with two member\n          fields and some predefined comparison operators and constructors:\n        </p><ul><li><p><span class=\"sql-docs-inline-code\">is_null</span> indicates whether the value is <span class=\"sql-docs-inline-code\">NULL</span> or not.\n              <span class=\"sql-docs-inline-code\">val</span> holds the actual argument or return value when it is non-<span class=\"sql-docs-inline-code\">NULL</span>.\n            </p></li><li><p>\n              Each struct also defines a <span class=\"sql-docs-inline-code\">null()</span> member function that constructs an instance of the\n              struct with the <span class=\"sql-docs-inline-code\">is_null</span> flag set.\n            </p></li><li><p>\n              The built-in SQL comparison operators and clauses such as <span class=\"sql-docs-inline-code\"><</span>,\n              <span class=\"sql-docs-inline-code\">>=</span>, <span class=\"sql-docs-inline-code\">BETWEEN</span>, and <span class=\"sql-docs-inline-code\">ORDER BY</span> all work\n              automatically based on the SQL return type of each UDF. For example, Impala knows how to evaluate\n              <span class=\"sql-docs-inline-code\">BETWEEN 1 AND udf_returning_int(col1)</span> or <span class=\"sql-docs-inline-code\">ORDER BY\n              udf_returning_string(col2)</span> without you declaring any comparison operators within the UDF\n              itself.\n            </p><p>\n              For convenience within your UDF code, each struct defines <span class=\"sql-docs-inline-code\">==</span> and <span class=\"sql-docs-inline-code\">!=</span>\n              operators for comparisons with other structs of the same type. These are for typical C++ comparisons\n              within your own code, not necessarily reproducing SQL semantics. For example, if the\n              <span class=\"sql-docs-inline-code\">is_null</span> flag is set in both structs, they compare as equal. That behavior of\n              <span class=\"sql-docs-inline-code\">null</span> comparisons is different from SQL (where <span class=\"sql-docs-inline-code\">NULL == NULL</span> is\n              <span class=\"sql-docs-inline-code\">NULL</span> rather than <span class=\"sql-docs-inline-code\">true</span>), but more in line with typical C++ behavior.\n            </p></li><li><p>\n              Each kind of struct has one or more constructors that define a filled-in instance of the struct,\n              optionally with default values.\n            </p></li><li><p>\n              Impala cannot process UDFs that accept composite or nested types\n              as arguments or return them as result values. This limitation\n              applies both to Impala UDFs written in C++ and Java-based Hive\n              UDFs.\n            </p></li><li><p>\n              You can overload functions by creating multiple functions with the same SQL name but different\n              argument types. For overloaded functions, you must use different C++ or Java entry point names in the\n              underlying functions.\n            </p></li></ul><p>\n          The data types defined on the C++ side (in <span class=\"sql-docs-variable\">/usr/include/impala_udf/udf.h</span>) are:\n        </p><ul><li><p><span class=\"sql-docs-inline-code\">IntVal</span> represents an <span class=\"sql-docs-inline-code\">INT</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">BigIntVal</span> represents a <span class=\"sql-docs-inline-code\">BIGINT</span> column. Even if you do not need the\n              full range of a <span class=\"sql-docs-inline-code\">BIGINT</span> value, it can be useful to code your function arguments as\n              <span class=\"sql-docs-inline-code\">BigIntVal</span> to make it convenient to call the function with different kinds of integer\n              columns and expressions as arguments. Impala automatically casts smaller integer types to larger ones\n              when appropriate, but does not implicitly cast large integer types to smaller ones.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">SmallIntVal</span> represents a <span class=\"sql-docs-inline-code\">SMALLINT</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">TinyIntVal</span> represents a <span class=\"sql-docs-inline-code\">TINYINT</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">StringVal</span> represents a <span class=\"sql-docs-inline-code\">STRING</span> column. It has a <span class=\"sql-docs-inline-code\">len</span>\n              field representing the length of the string, and a <span class=\"sql-docs-inline-code\">ptr</span> field pointing to the string\n              data. It has constructors that create a new <span class=\"sql-docs-inline-code\">StringVal</span> struct based on a\n              null-terminated C-style string, or a pointer plus a length; these new structs still refer to the\n              original string data rather than allocating a new buffer for the data. It also has a constructor that\n              takes a pointer to a <span class=\"sql-docs-inline-code\">FunctionContext</span> struct and a length, that does allocate space\n              for a new copy of the string data, for use in UDFs that return string values.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">BooleanVal</span> represents a <span class=\"sql-docs-inline-code\">BOOLEAN</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">FloatVal</span> represents a <span class=\"sql-docs-inline-code\">FLOAT</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">DoubleVal</span> represents a <span class=\"sql-docs-inline-code\">DOUBLE</span> column.\n            </p></li><li><p><span class=\"sql-docs-inline-code\">TimestampVal</span> represents a <span class=\"sql-docs-inline-code\">TIMESTAMP</span> column. It has a\n              <span class=\"sql-docs-inline-code\">date</span> field, a 32-bit integer representing the Gregorian date, that is, the days past\n              the epoch date. It also has a <span class=\"sql-docs-inline-code\">time_of_day</span> field, a 64-bit integer representing the\n              current time of day in nanoseconds.\n            </p></li></ul></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_varargs\"><h4>Variable-Length Argument Lists</h4><div><p>\n          UDFs typically take a fixed number of arguments, with each one named explicitly in the signature of your\n          C++ function. Your function can also accept additional optional arguments, all of the same type. For\n          example, you can concatenate two strings, three strings, four strings, and so on. Or you can compare two\n          numbers, three numbers, four numbers, and so on.\n        </p><p>\n          To accept a variable-length argument list, code the signature of your function like this:\n        </p><div class=\"sql-docs-code-block\">StringVal Concat(FunctionContext* context, const StringVal& separator,<br/>  int num_var_args, const StringVal* args);</div><p>\n          In the <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statement, after the type of the first optional argument, include\n          <span class=\"sql-docs-inline-code\">...</span> to indicate it could be followed by more arguments of the same type. For example,\n          the following function accepts a <span class=\"sql-docs-inline-code\">STRING</span> argument, followed by one or more additional\n          <span class=\"sql-docs-inline-code\">STRING</span> arguments:\n        </p><div class=\"sql-docs-code-block\">[localhost:21000] > create function my_concat(string, string ...) returns string location '/user/test_user/udfs/sample.so' symbol='Concat';<br/></div><p>\n          The call from the SQL query must pass at least one argument to the variable-length portion of the\n          argument list.\n        </p><p>\n          When Impala calls the function, it fills in the initial set of required arguments, then passes the number\n          of extra arguments and a pointer to the first of those optional arguments.\n        </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_null\"><h4>Handling NULL Values</h4><div><p>\n          For correctness, performance, and reliability, it is important for each UDF to handle all situations\n          where any <span class=\"sql-docs-inline-code\">NULL</span> values are passed to your function. For example, when passed a\n          <span class=\"sql-docs-inline-code\">NULL</span>, UDFs typically also return <span class=\"sql-docs-inline-code\">NULL</span>. In an aggregate function, which\n          could be passed a combination of real and <span class=\"sql-docs-inline-code\">NULL</span> values, you might make the final value\n          into a <span class=\"sql-docs-inline-code\">NULL</span> (as in <span class=\"sql-docs-inline-code\">CONCAT()</span>), ignore the <span class=\"sql-docs-inline-code\">NULL</span> value\n          (as in <span class=\"sql-docs-inline-code\">AVG()</span>), or treat it the same as a numeric zero or empty string.\n        </p><p>\n          Each parameter type, such as <span class=\"sql-docs-inline-code\">IntVal</span> or <span class=\"sql-docs-inline-code\">StringVal</span>, has an\n          <span class=\"sql-docs-inline-code\">is_null</span> Boolean member.\n\n          Test this flag immediately for each argument to your function, and if it is set, do not refer to the\n          <span class=\"sql-docs-inline-code\">val</span> field of the argument structure. The <span class=\"sql-docs-inline-code\">val</span> field is undefined when\n          the argument is <span class=\"sql-docs-inline-code\">NULL</span>, so your function could go into an infinite loop or produce\n          incorrect results if you skip the special handling for <span class=\"sql-docs-inline-code\">NULL</span>.\n</p><p>\n          If your function returns <span class=\"sql-docs-inline-code\">NULL</span> when passed a <span class=\"sql-docs-inline-code\">NULL</span> value, or in other\n          cases such as when a search string is not found, you can construct a null instance of the return type by\n          using its <span class=\"sql-docs-inline-code\">null()</span> member function.\n        </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_malloc\"><h4>Memory Allocation for UDFs</h4><div><p>\n          By default, memory allocated within a UDF is deallocated when the function exits, which could be before\n          the query is finished. The input arguments remain allocated for the lifetime of the function, so you can\n          refer to them in the expressions for your return values. If you use temporary variables to construct\n          all-new string values, use the <span class=\"sql-docs-inline-code\">StringVal()</span> constructor that takes an initial\n          <span class=\"sql-docs-inline-code\">FunctionContext*</span> argument followed by a length, and copy the data into the newly\n          allocated memory buffer.\n        </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_threads\"><h4>Thread-Safe Work Area for UDFs</h4><div><p>\n          One way to improve performance of UDFs is to specify the optional <span class=\"sql-docs-inline-code\">PREPARE_FN</span> and\n          <span class=\"sql-docs-inline-code\">CLOSE_FN</span> clauses on the <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statement. The <q>prepare</q>\n          function sets up a thread-safe data structure in memory that you can use as a work area. The <q>close</q>\n          function deallocates that memory. Each subsequent call to the UDF within the same thread can access that\n          same memory area. There might be several such memory areas allocated on the same host, as UDFs are\n          parallelized using multiple threads.\n        </p><p>\n          Within this work area, you can set up predefined lookup tables, or record the results of complex\n          operations on data types such as <span class=\"sql-docs-inline-code\">STRING</span> or <span class=\"sql-docs-inline-code\">TIMESTAMP</span>. Saving the\n          results of previous computations rather than repeating the computation each time is an optimization known\n          as <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Memoization\"></a>. For example,\n          if your UDF performs a regular expression match or date manipulation on a column that repeats the same\n          value over and over, you could store the last-computed value or a hash table of already-computed values,\n          and do a fast lookup to find the result for subsequent iterations of the UDF.\n        </p><p>\n          Each such function must have the signature:\n        </p><div class=\"sql-docs-code-block\">void <span class=\"sql-docs-variable\">function_name</span>(impala_udf::FunctionContext*, impala_udf::FunctionContext::FunctionScope)<br/></div><p>\n          Currently, only <span class=\"sql-docs-inline-code\">THREAD_SCOPE</span> is implemented, not <span class=\"sql-docs-inline-code\">FRAGMENT_SCOPE</span>. See\n          <span class=\"sql-docs-variable\">udf.h</span> for details about the scope values.\n        </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_error_handling\"><h4>Error Handling for UDFs</h4><div><p>\n          To handle errors in UDFs, you call functions that are members of the initial\n          <span class=\"sql-docs-inline-code\">FunctionContext*</span> argument passed to your function.\n        </p><p>\n          A UDF can record one or more warnings, for conditions that indicate minor, recoverable problems that do\n          not cause the query to stop. The signature for this function is:\n        </p><div class=\"sql-docs-code-block\">bool AddWarning(const char* warning_msg);</div><p>\n          For a serious problem that requires cancelling the query, a UDF can set an error flag that prevents the\n          query from returning any results. The signature for this function is:\n        </p><div class=\"sql-docs-code-block\">void SetError(const char* error_msg);</div></div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udafs\"><h4>Writing User-Defined Aggregate Functions (UDAFs)</h4><div><p>\n        User-defined aggregate functions (UDAFs or UDAs) are a powerful and flexible category of user-defined\n        functions. If a query processes N rows, calling a UDAF during the query condenses the result set, anywhere\n        from a single value (such as with the <span class=\"sql-docs-inline-code\">SUM</span> or <span class=\"sql-docs-inline-code\">MAX</span> functions), or some\n        number less than or equal to N (as in queries using the <span class=\"sql-docs-inline-code\">GROUP BY</span> or\n        <span class=\"sql-docs-inline-code\">HAVING</span> clause).\n      </p></div><div id=\"../Impala/docs/topics/impala_udf.xml_uda_functions\"><h4>The Underlying Functions for a UDA</h4><div><p>\n          A UDAF must maintain a state value across subsequent calls, so that it can accumulate a result across a\n          set of calls, rather than derive it purely from one set of arguments. For that reason, a UDAF is\n          represented by multiple underlying functions:\n        </p><ul><li>\n            An initialization function that sets any counters to zero, creates empty buffers, and does any other\n            one-time setup for a query.\n          </li><li>\n            An update function that processes the arguments for each row in the query result set and accumulates an\n            intermediate result for each node. For example, this function might increment a counter, append to a\n            string buffer, or set flags.\n          </li><li>\n            A merge function that combines the intermediate results from two different nodes.\n          </li><li>\n            A serialize function that flattens any intermediate values containing pointers, and frees any memory\n            allocated during the init, update, and merge phases.\n          </li><li>\n            A finalize function that either passes through the combined result unchanged, or does one final\n            transformation.\n          </li></ul><p>\n          In the SQL syntax, you create a UDAF by using the statement <span class=\"sql-docs-inline-code\">CREATE AGGREGATE FUNCTION</span>.\n          You specify the entry points of the underlying C++ functions using the clauses <span class=\"sql-docs-inline-code\">INIT_FN</span>,\n          <span class=\"sql-docs-inline-code\">UPDATE_FN</span>, <span class=\"sql-docs-inline-code\">MERGE_FN</span>, <span class=\"sql-docs-inline-code\">SERIALIZE_FN</span>, and\n          <span class=\"sql-docs-inline-code\">FINALIZE_FN</span>.\n        </p><p>\n          For convenience, you can use a naming convention for the underlying functions and Impala automatically\n          recognizes those entry points. Specify the <span class=\"sql-docs-inline-code\">UPDATE_FN</span> clause, using an entry point name\n          containing the string <span class=\"sql-docs-inline-code\">update</span> or <span class=\"sql-docs-inline-code\">Update</span>. When you omit the other\n          <span class=\"sql-docs-inline-code\">_FN</span> clauses from the SQL statement, Impala looks for entry points with names formed by\n          substituting the <span class=\"sql-docs-inline-code\">update</span> or <span class=\"sql-docs-inline-code\">Update</span> portion of the specified name.\n        </p><p>:\n        </p><div class=\"sql-docs-code-block\">#ifndef SAMPLES_UDA_H<br/>#define SAMPLES_UDA_H<br/><br/>#include <impala_udf/udf.h><br/><br/>using namespace impala_udf;<br/><br/>// This is an example of the COUNT aggregate function.<br/>//<br/>// Usage: > create aggregate function my_count(int) returns bigint<br/>//          location '/user/doc_demo/libudasample.so' update_fn='CountUpdate';<br/>//        > select my_count(col) from tbl;<br/><br/>void CountInit(FunctionContext* context, BigIntVal* val);<br/>void CountUpdate(FunctionContext* context, const IntVal& input, BigIntVal* val);<br/>void CountMerge(FunctionContext* context, const BigIntVal& src, BigIntVal* dst);<br/>BigIntVal CountFinalize(FunctionContext* context, const BigIntVal& val);<br/><br/><br/>// This is an example of the AVG(double) aggregate function. This function needs to<br/>// maintain two pieces of state, the current sum and the count. We do this using<br/>// the StringVal intermediate type. When this UDA is registered, it would specify<br/>// 16 bytes (8 byte sum + 8 byte count) as the size for this buffer.<br/>//<br/>// Usage: > create aggregate function my_avg(double) returns string<br/>//          location '/user/doc_demo/libudasample.so' update_fn='AvgUpdate';<br/>//        > select cast(my_avg(col) as double) from tbl;<br/><br/>void AvgInit(FunctionContext* context, StringVal* val);<br/>void AvgUpdate(FunctionContext* context, const DoubleVal& input, StringVal* val);<br/>void AvgMerge(FunctionContext* context, const StringVal& src, StringVal* dst);<br/>const StringVal AvgSerialize(FunctionContext* context, const StringVal& val);<br/>StringVal AvgFinalize(FunctionContext* context, const StringVal& val);<br/><br/><br/>// This is a sample of implementing the STRING_CONCAT aggregate function.<br/>//<br/>// Usage: > create aggregate function string_concat(string, string) returns string<br/>//          location '/user/doc_demo/libudasample.so' update_fn='StringConcatUpdate';<br/>//        > select string_concat(string_col, \",\") from table;<br/><br/>void StringConcatInit(FunctionContext* context, StringVal* val);<br/>void StringConcatUpdate(FunctionContext* context, const StringVal& arg1,<br/>    const StringVal& arg2, StringVal* val);<br/>void StringConcatMerge(FunctionContext* context, const StringVal& src, StringVal* dst);<br/>const StringVal StringConcatSerialize(FunctionContext* context, const StringVal& val);<br/>StringVal StringConcatFinalize(FunctionContext* context, const StringVal& val);<br/><br/><br/>// This is a example of the variance aggregate function.<br/>//<br/>// Usage: > create aggregate function var(double) returns string<br/>//          location '/user/doc_demo/libudasample.so' update_fn='VarianceUpdate';<br/>//        > select cast(var(col) as double) from tbl;<br/><br/>void VarianceInit(FunctionContext* context, StringVal* val);<br/>void VarianceUpdate(FunctionContext* context, const DoubleVal& input, StringVal* val);<br/>void VarianceMerge(FunctionContext* context, const StringVal& src, StringVal* dst);<br/>const StringVal VarianceSerialize(FunctionContext* context, const StringVal& val);<br/>StringVal VarianceFinalize(FunctionContext* context, const StringVal& val);<br/><br/><br/>// An implementation of the Knuth online variance algorithm, which is also single pass and<br/>// more numerically stable.<br/>//<br/>// Usage: > create aggregate function knuth_var(double) returns string<br/>//          location '/user/doc_demo/libudasample.so' update_fn='KnuthVarianceUpdate';<br/>//        > select cast(knuth_var(col) as double) from tbl;<br/><br/>void KnuthVarianceInit(FunctionContext* context, StringVal* val);<br/>void KnuthVarianceUpdate(FunctionContext* context, const DoubleVal& input, StringVal* val);<br/>void KnuthVarianceMerge(FunctionContext* context, const StringVal& src, StringVal* dst);<br/>const StringVal KnuthVarianceSerialize(FunctionContext* context, const StringVal& val);<br/>StringVal KnuthVarianceFinalize(FunctionContext* context, const StringVal& val);<br/><br/><br/>// The different steps of the UDA are composable. In this case, we'the UDA will use the<br/>// other steps from the Knuth variance computation.<br/>//<br/>// Usage: > create aggregate function stddev(double) returns string<br/>//          location '/user/doc_demo/libudasample.so' update_fn='KnuthVarianceUpdate'<br/>//          finalize_fn=\"StdDevFinalize\";<br/>//        > select cast(stddev(col) as double) from tbl;<br/><br/>StringVal StdDevFinalize(FunctionContext* context, const StringVal& val);<br/><br/><br/>// Utility function for serialization to StringVal<br/>template <typename T><br/>StringVal ToStringVal(FunctionContext* context, const T& val);<br/><br/>#endif</div><p>:\n        </p><div class=\"sql-docs-code-block\">#include \"uda-sample.h\"<br/>#include <assert.h><br/>#include <sstream><br/><br/>using namespace impala_udf;<br/>using namespace std;<br/><br/>template <typename T><br/>StringVal ToStringVal(FunctionContext* context, const T& val) {<br/>  stringstream ss;<br/>  ss << val;<br/>  string str = ss.str();<br/>  StringVal string_val(context, str.size());<br/>  memcpy(string_val.ptr, str.c_str(), str.size());<br/>  return string_val;<br/>}<br/><br/>template <><br/>StringVal ToStringVal<DoubleVal>(FunctionContext* context, const DoubleVal& val) {<br/>  if (val.is_null) return StringVal::null();<br/>  return ToStringVal(context, val.val);<br/>}<br/><br/>// ---------------------------------------------------------------------------<br/>// This is a sample of implementing a COUNT aggregate function.<br/>// ---------------------------------------------------------------------------<br/>void CountInit(FunctionContext* context, BigIntVal* val) {<br/>  val->is_null = false;<br/>  val->val = 0;<br/>}<br/><br/>void CountUpdate(FunctionContext* context, const IntVal& input, BigIntVal* val) {<br/>  if (input.is_null) return;<br/>  ++val->val;<br/>}<br/><br/>void CountMerge(FunctionContext* context, const BigIntVal& src, BigIntVal* dst) {<br/>  dst->val += src.val;<br/>}<br/><br/>BigIntVal CountFinalize(FunctionContext* context, const BigIntVal& val) {<br/>  return val;<br/>}<br/><br/>// ---------------------------------------------------------------------------<br/>// This is a sample of implementing a AVG aggregate function.<br/>// ---------------------------------------------------------------------------<br/>struct AvgStruct {<br/>  double sum;<br/>  int64_t count;<br/>};<br/><br/>// Initialize the StringVal intermediate to a zero'd AvgStruct<br/>void AvgInit(FunctionContext* context, StringVal* val) {<br/>  val->is_null = false;<br/>  val->len = sizeof(AvgStruct);<br/>  val->ptr = context->Allocate(val->len);<br/>  memset(val->ptr, 0, val->len);<br/>}<br/><br/>void AvgUpdate(FunctionContext* context, const DoubleVal& input, StringVal* val) {<br/>  if (input.is_null) return;<br/>  assert(!val->is_null);<br/>  assert(val->len == sizeof(AvgStruct));<br/>  AvgStruct* avg = reinterpret_cast<AvgStruct*>(val->ptr);<br/>  avg->sum += input.val;<br/>  ++avg->count;<br/>}<br/><br/>void AvgMerge(FunctionContext* context, const StringVal& src, StringVal* dst) {<br/>  if (src.is_null) return;<br/>  const AvgStruct* src_avg = reinterpret_cast<const AvgStruct*>(src.ptr);<br/>  AvgStruct* dst_avg = reinterpret_cast<AvgStruct*>(dst->ptr);<br/>  dst_avg->sum += src_avg->sum;<br/>  dst_avg->count += src_avg->count;<br/>}<br/><br/>// A serialize function is necesary to free the intermediate state allocation. We use the<br/>// StringVal constructor to allocate memory owned by Impala, copy the intermediate state,<br/>// and free the original allocation. Note that memory allocated by the StringVal ctor is<br/>// not necessarily persisted across UDA function calls, which is why we don't use it in<br/>// AvgInit().<br/>const StringVal AvgSerialize(FunctionContext* context, const StringVal& val) {<br/>  assert(!val.is_null);<br/>  StringVal result(context, val.len);<br/>  memcpy(result.ptr, val.ptr, val.len);<br/>  context->Free(val.ptr);<br/>  return result;<br/>}<br/><br/>StringVal AvgFinalize(FunctionContext* context, const StringVal& val) {<br/>  assert(!val.is_null);<br/>  assert(val.len == sizeof(AvgStruct));<br/>  AvgStruct* avg = reinterpret_cast<AvgStruct*>(val.ptr);<br/>  StringVal result;<br/>  if (avg->count == 0) {<br/>    result = StringVal::null();<br/>  } else {<br/>    // Copies the result to memory owned by Impala<br/>    result = ToStringVal(context, avg->sum / avg->count);<br/>  }<br/>  context->Free(val.ptr);<br/>  return result;<br/>}<br/><br/>// ---------------------------------------------------------------------------<br/>// This is a sample of implementing the STRING_CONCAT aggregate function.<br/>// Example: select string_concat(string_col, \",\") from table<br/>// ---------------------------------------------------------------------------<br/>// Delimiter to use if the separator is NULL.<br/>static const StringVal DEFAULT_STRING_CONCAT_DELIM((uint8_t*)\", \", 2);<br/><br/>void StringConcatInit(FunctionContext* context, StringVal* val) {<br/>  val->is_null = true;<br/>}<br/><br/>void StringConcatUpdate(FunctionContext* context, const StringVal& str,<br/>    const StringVal& separator, StringVal* result) {<br/>  if (str.is_null) return;<br/>  if (result->is_null) {<br/>    // This is the first string, simply set the result to be the value.<br/>    uint8_t* copy = context->Allocate(str.len);<br/>    memcpy(copy, str.ptr, str.len);<br/>    *result = StringVal(copy, str.len);<br/>    return;<br/>  }<br/><br/>  const StringVal* sep_ptr = separator.is_null ? &DEFAULT_STRING_CONCAT_DELIM :<br/>      &separator;<br/><br/>  // We need to grow the result buffer and then append the new string and<br/>  // separator.<br/>  int new_size = result->len + sep_ptr->len + str.len;<br/>  result->ptr = context->Reallocate(result->ptr, new_size);<br/>  memcpy(result->ptr + result->len, sep_ptr->ptr, sep_ptr->len);<br/>  result->len += sep_ptr->len;<br/>  memcpy(result->ptr + result->len, str.ptr, str.len);<br/>  result->len += str.len;<br/>}<br/><br/>void StringConcatMerge(FunctionContext* context, const StringVal& src, StringVal* dst) {<br/>  if (src.is_null) return;<br/>  StringConcatUpdate(context, src, \",\", dst);<br/>}<br/><br/>// A serialize function is necesary to free the intermediate state allocation. We use the<br/>// StringVal constructor to allocate memory owned by Impala, copy the intermediate<br/>// StringVal, and free the intermediate's memory. Note that memory allocated by the<br/>// StringVal ctor is not necessarily persisted across UDA function calls, which is why we<br/>// don't use it in StringConcatUpdate().<br/>const StringVal StringConcatSerialize(FunctionContext* context, const StringVal& val) {<br/>  if (val.is_null) return val;<br/>  StringVal result(context, val.len);<br/>  memcpy(result.ptr, val.ptr, val.len);<br/>  context->Free(val.ptr);<br/>  return result;<br/>}<br/><br/>// Same as StringConcatSerialize().<br/>StringVal StringConcatFinalize(FunctionContext* context, const StringVal& val) {<br/>  if (val.is_null) return val;<br/>  StringVal result(context, val.len);<br/>  memcpy(result.ptr, val.ptr, val.len);<br/>  context->Free(val.ptr);<br/>  return result;<br/>}</div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_intermediate\"><h4>Intermediate Results for UDAs</h4><div><p>\n          A user-defined aggregate function might produce and combine intermediate results during some phases of\n          processing, using a different data type than the final return value. For example, if you implement a\n          function similar to the built-in <span class=\"sql-docs-inline-code\">AVG()</span> function, it must keep track of two values, the\n          number of values counted and the sum of those values. Or, you might accumulate a string value over the\n          course of a UDA, then in the end return a numeric or Boolean result.\n        </p><p>\n          In such a case, specify the data type of the intermediate results using the optional <span class=\"sql-docs-inline-code\">INTERMEDIATE\n          <span class=\"sql-docs-variable\">type_name</span></span> clause of the <span class=\"sql-docs-inline-code\">CREATE AGGREGATE FUNCTION</span> statement.\n          If the intermediate data is a typeless byte array (for example, to represent a C++ struct or array),\n          specify the type name as <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">n</span>)</span>, with <span class=\"sql-docs-variable\">n</span>\n          representing the number of bytes in the intermediate result buffer.\n        </p><p>\n          For an example of this technique, see the <span class=\"sql-docs-inline-code\">trunc_sum()</span> aggregate function, which accumulates\n          intermediate results of type <span class=\"sql-docs-inline-code\">DOUBLE</span> and returns <span class=\"sql-docs-inline-code\">BIGINT</span> at the end.\n          View \n          and \n          on Github.\n        </p></div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_building\"><h4>Building and Deploying UDFs</h4><div><p>\n        This section explains the steps to compile Impala UDFs from C++ source code, and deploy the resulting\n        libraries for use in Impala queries.\n      </p><p>\n        Impala ships with a sample build environment for UDFs, that you can study, experiment with, and adapt for\n        your own use. This sample build environment starts with the <span class=\"sql-docs-inline-code\">cmake</span> configuration command,\n        which reads the file <span class=\"sql-docs-variable\">CMakeLists.txt</span> and generates a <span class=\"sql-docs-variable\">Makefile</span>\n        customized for your particular directory paths. Then the <span class=\"sql-docs-inline-code\">make</span> command runs the actual\n        build steps based on the rules in the <span class=\"sql-docs-variable\">Makefile</span>.\n      </p><p>\n        Impala loads the shared library from an HDFS location. After building a shared library containing one or\n        more UDFs, use <span class=\"sql-docs-inline-code\">hdfs dfs</span> or <span class=\"sql-docs-inline-code\">hadoop fs</span> commands to copy the binary file to\n        an HDFS location readable by Impala.\n      </p><p>\n        The final step in deployment is to issue a <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statement in the\n        <span class=\"sql-docs-inline-code\">impala-shell</span> interpreter to make Impala aware of the new function. See\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_function.xml#create_function\">CREATE FUNCTION Statement</a> for syntax details. Because each function is\n        associated with a particular database, always issue a <span class=\"sql-docs-inline-code\">USE</span> statement to the appropriate\n        database before creating a function, or specify a fully qualified name, that is, <span class=\"sql-docs-inline-code\">CREATE FUNCTION\n        <span class=\"sql-docs-variable\">db_name</span>.<span class=\"sql-docs-variable\">function_name</span></span>.\n      </p><p>\n        As you update the UDF code and redeploy updated versions of a shared library, use <span class=\"sql-docs-inline-code\">DROP\n        FUNCTION</span> and <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> to let Impala pick up the latest version of the\n        code.\n      </p><div class=\"sql-docs-note\"><p id=\"../Impala/docs/topics/impala_udf.xml_udf_persistence_restriction\">\n        In Impala 2.5 and higher, Impala UDFs and UDAs written in C++ are persisted in the metastore database.\n        Java UDFs are also persisted, if they were created with the new <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> syntax for Java UDFs,\n        where the Java function argument and return types are omitted.\n        Java-based UDFs created with the old <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> syntax do not persist across restarts\n        because they are held in the memory of the <span class=\"sql-docs-inline-code\">catalogd</span> daemon.\n        Until you re-create such Java UDFs using the new <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> syntax,\n        you must reload those Java-based UDFs by running the original <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statements again each time\n        you restart the <span class=\"sql-docs-inline-code\">catalogd</span> daemon.\n        Prior to Impala 2.5 the requirement to reload functions after a restart applied to both C++ and Java functions.\n      </p><p>\n          See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_function.xml#create_function\">CREATE FUNCTION Statement</a> and <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_function.xml#drop_function\">DROP FUNCTION Statement</a>\n          for the new syntax for the persistent Java UDFs.\n        </p></div><p>\n        Prerequisites for the build environment are:\n      </p><div class=\"sql-docs-code-block\"># Use the appropriate package installation command for your Linux distribution.<br/>sudo yum install gcc-c++ cmake boost-devel<br/>sudo yum install impala-udf-devel<br/># The package name on Ubuntu and Debian is impala-udf-dev.<br/></div><p>\n        Then, unpack the sample code in <span class=\"sql-docs-variable\">udf_samples.tar.gz</span> and use that as a template to set\n        up your build environment.\n      </p><p>\n        To build the original samples:\n      </p><div class=\"sql-docs-code-block\"># Process CMakeLists.txt and set up appropriate Makefiles.<br/>cmake .<br/># Generate shared libraries from UDF and UDAF sample code,<br/># udf_samples/libudfsample.so and udf_samples/libudasample.so<br/>make</div><p>\n        The sample code to examine, experiment with, and adapt is in these files:\n      </p><ul><li><span class=\"sql-docs-variable\">udf-sample.h</span>: Header file that declares the signature for a scalar UDF\n          (<span class=\"sql-docs-inline-code\">AddUDF</span>).\n        </li><li><span class=\"sql-docs-variable\">udf-sample.cc</span>: Sample source for a simple UDF that adds two integers. Because\n          Impala can reference multiple function entry points from the same shared library, you could add other UDF\n          functions in this file and add their signatures to the corresponding header file.\n        </li><li><span class=\"sql-docs-variable\">udf-sample-test.cc</span>: Basic unit tests for the sample UDF.\n        </li><li><span class=\"sql-docs-variable\">uda-sample.h</span>: Header file that declares the signature for sample aggregate\n          functions. The SQL functions will be called <span class=\"sql-docs-inline-code\">COUNT</span>, <span class=\"sql-docs-inline-code\">AVG</span>, and\n          <span class=\"sql-docs-inline-code\">STRINGCONCAT</span>. Because aggregate functions require more elaborate coding to handle the\n          processing for multiple phases, there are several underlying C++ functions such as\n          <span class=\"sql-docs-inline-code\">CountInit</span>, <span class=\"sql-docs-inline-code\">AvgUpdate</span>, and <span class=\"sql-docs-inline-code\">StringConcatFinalize</span>.\n        </li><li><span class=\"sql-docs-variable\">uda-sample.cc</span>: Sample source for simple UDAFs that demonstrate how to manage the\n          state transitions as the underlying functions are called during the different phases of query processing.\n          <ul><li>\n              The UDAF that imitates the <span class=\"sql-docs-inline-code\">COUNT</span> function keeps track of a single incrementing\n              number; the merge functions combine the intermediate count values from each Impala node, and the\n              combined number is returned verbatim by the finalize function.\n            </li><li>\n              The UDAF that imitates the <span class=\"sql-docs-inline-code\">AVG</span> function keeps track of two numbers, a count of rows\n              processed and the sum of values for a column. These numbers are updated and merged as with\n              <span class=\"sql-docs-inline-code\">COUNT</span>, then the finalize function divides them to produce and return the final\n              average value.\n            </li><li>\n              The UDAF that concatenates string values into a comma-separated list demonstrates how to manage\n              storage for a string that increases in length as the function is called for multiple rows.\n            </li></ul></li><li><span class=\"sql-docs-variable\">uda-sample-test.cc</span>: basic unit tests for the sample UDAFs.\n        </li></ul></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_performance\"><h4>Performance Considerations for UDFs</h4><div><p>\n        Because a UDF typically processes each row of a table, potentially being called billions of times, the\n        performance of each UDF is a critical factor in the speed of the overall ETL or ELT pipeline. Tiny\n        optimizations you can make within the function body can pay off in a big way when the function is called\n        over and over when processing a huge result set.\n      </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_tutorial\"><h4>Examples of Creating and Using UDFs</h4><div><p>\n        This section demonstrates how to create and use all kinds of user-defined functions (UDFs).\n      </p><p>\n        For downloadable examples that you can experiment with, adapt, and use as templates for your own functions,\n        see .\n        You must have already installed the appropriate header files, as explained in\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udf_demo_env\"><h4>Installing the UDF Development Package</h4></a>.\n      </p><div id=\"../Impala/docs/topics/impala_udf.xml_udf_sample_udf\" class=\"sql-docs-example\"><h4>Sample C++ UDFs: HasVowels, CountVowels, StripVowels</h4><p>\n          This example shows 3 separate UDFs that operate on strings and return different data types. In the C++\n          code, the functions are <span class=\"sql-docs-inline-code\">HasVowels()</span> (checks if a string contains any vowels),\n          <span class=\"sql-docs-inline-code\">CountVowels()</span> (returns the number of vowels in a string), and\n          <span class=\"sql-docs-inline-code\">StripVowels()</span> (returns a new string with vowels removed).\n        </p><p>\n          First, we add the signatures for these functions to <span class=\"sql-docs-variable\">udf-sample.h</span> in the demo build\n          environment:\n        </p><div class=\"sql-docs-code-block\">BooleanVal HasVowels(FunctionContext* context, const StringVal& input);<br/>IntVal CountVowels(FunctionContext* context, const StringVal& arg1);<br/>StringVal StripVowels(FunctionContext* context, const StringVal& arg1);</div><p>\n          Then, we add the bodies of these functions to <span class=\"sql-docs-variable\">udf-sample.cc</span>:\n        </p><div class=\"sql-docs-code-block\">BooleanVal HasVowels(FunctionContext* context, const StringVal& input)<br/>{<br/>        if (input.is_null) return BooleanVal::null();<br/><br/>        int index;<br/>        uint8_t *ptr;<br/><br/>        for (ptr = input.ptr, index = 0; index <= input.len; index++, ptr++)<br/>        {<br/>                uint8_t c = tolower(*ptr);<br/>                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')<br/>                {<br/>                        return BooleanVal(true);<br/>                }<br/>        }<br/>        return BooleanVal(false);<br/>}<br/><br/>IntVal CountVowels(FunctionContext* context, const StringVal& arg1)<br/>{<br/>        if (arg1.is_null) return IntVal::null();<br/><br/>        int count;<br/>        int index;<br/>        uint8_t *ptr;<br/><br/>        for (ptr = arg1.ptr, count = 0, index = 0; index <= arg1.len; index++, ptr++)<br/>        {<br/>                uint8_t c = tolower(*ptr);<br/>                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')<br/>                {<br/>                        count++;<br/>                }<br/>        }<br/>        return IntVal(count);<br/>}<br/><br/>StringVal StripVowels(FunctionContext* context, const StringVal& arg1)<br/>{<br/>        if (arg1.is_null) return StringVal::null();<br/><br/>        int index;<br/>        std::string original((const char *)arg1.ptr,arg1.len);<br/>        std::string shorter(\"\");<br/><br/>        for (index = 0; index < original.length(); index++)<br/>        {<br/>                uint8_t c = original[index];<br/>                uint8_t l = tolower(c);<br/><br/>                if (l == 'a' || l == 'e' || l == 'i' || l == 'o' || l == 'u')<br/>                {<br/>                        ;<br/>                }<br/>                else<br/>                {<br/>                    shorter.append(1, (char)c);<br/>                }<br/>        }<br/>// The modified string is stored in 'shorter', which is destroyed when this function ends. We need to make a string val<br/>// and copy the contents.<br/>        StringVal result(context, shorter.size()); // Only the version of the ctor that takes a context object allocates new memory<br/>        memcpy(result.ptr, shorter.c_str(), shorter.size());<br/>        return result;<br/>}</div><p>\n          We build a shared library, <span class=\"sql-docs-variable\">libudfsample.so</span>, and put the library file into HDFS\n          where Impala can read it:\n        </p><div class=\"sql-docs-code-block\">$ make<br/>[  0%] Generating udf_samples/uda-sample.ll<br/>[ 16%] Built target uda-sample-ir<br/>[ 33%] Built target udasample<br/>[ 50%] Built target uda-sample-test<br/>[ 50%] Generating udf_samples/udf-sample.ll<br/>[ 66%] Built target udf-sample-ir<br/>Scanning dependencies of target udfsample<br/>[ 83%] Building CXX object CMakeFiles/udfsample.dir/udf-sample.o<br/>Linking CXX shared library udf_samples/libudfsample.so<br/>[ 83%] Built target udfsample<br/>Linking CXX executable udf_samples/udf-sample-test<br/>[100%] Built target udf-sample-test<br/>$ hdfs dfs -put ./udf_samples/libudfsample.so /user/hive/udfs/libudfsample.so</div><p>\n          Finally, we go into the <span class=\"sql-docs-inline-code\">impala-shell</span> interpreter where we set up some sample data,\n          issue <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statements to set up the SQL function names, and call the\n          functions in some queries:\n        </p><div class=\"sql-docs-code-block\">[localhost:21000] > create database udf_testing;<br/>[localhost:21000] > use udf_testing;<br/><br/>[localhost:21000] > create function has_vowels (string) returns boolean location '/user/hive/udfs/libudfsample.so' symbol='HasVowels';<br/>[localhost:21000] > select has_vowels('abc');<br/>+------------------------+<br/>| udfs.has_vowels('abc') |<br/>+------------------------+<br/>| true                   |<br/>+------------------------+<br/>Returned 1 row(s) in 0.13s<br/>[localhost:21000] > select has_vowels('zxcvbnm');<br/>+----------------------------+<br/>| udfs.has_vowels('zxcvbnm') |<br/>+----------------------------+<br/>| false                      |<br/>+----------------------------+<br/>Returned 1 row(s) in 0.12s<br/>[localhost:21000] > select has_vowels(null);<br/>+-----------------------+<br/>| udfs.has_vowels(null) |<br/>+-----------------------+<br/>| NULL                  |<br/>+-----------------------+<br/>Returned 1 row(s) in 0.11s<br/>[localhost:21000] > select s, has_vowels(s) from t2;<br/>+-----------+--------------------+<br/>| s         | udfs.has_vowels(s) |<br/>+-----------+--------------------+<br/>| lower     | true               |<br/>| UPPER     | true               |<br/>| Init cap  | true               |<br/>| CamelCase | true               |<br/>+-----------+--------------------+<br/>Returned 4 row(s) in 0.24s<br/><br/>[localhost:21000] > create function count_vowels (string) returns int location '/user/hive/udfs/libudfsample.so' symbol='CountVowels';<br/>[localhost:21000] > select count_vowels('cat in the hat');<br/>+-------------------------------------+<br/>| udfs.count_vowels('cat in the hat') |<br/>+-------------------------------------+<br/>| 4                                   |<br/>+-------------------------------------+<br/>Returned 1 row(s) in 0.12s<br/>[localhost:21000] > select s, count_vowels(s) from t2;<br/>+-----------+----------------------+<br/>| s         | udfs.count_vowels(s) |<br/>+-----------+----------------------+<br/>| lower     | 2                    |<br/>| UPPER     | 2                    |<br/>| Init cap  | 3                    |<br/>| CamelCase | 4                    |<br/>+-----------+----------------------+<br/>Returned 4 row(s) in 0.23s<br/>[localhost:21000] > select count_vowels(null);<br/>+-------------------------+<br/>| udfs.count_vowels(null) |<br/>+-------------------------+<br/>| NULL                    |<br/>+-------------------------+<br/>Returned 1 row(s) in 0.12s<br/><br/>[localhost:21000] > create function strip_vowels (string) returns string location '/user/hive/udfs/libudfsample.so' symbol='StripVowels';<br/>[localhost:21000] > select strip_vowels('abcdefg');<br/>+------------------------------+<br/>| udfs.strip_vowels('abcdefg') |<br/>+------------------------------+<br/>| bcdfg                        |<br/>+------------------------------+<br/>Returned 1 row(s) in 0.11s<br/>[localhost:21000] > select strip_vowels('ABCDEFG');<br/>+------------------------------+<br/>| udfs.strip_vowels('abcdefg') |<br/>+------------------------------+<br/>| BCDFG                        |<br/>+------------------------------+<br/>Returned 1 row(s) in 0.12s<br/>[localhost:21000] > select strip_vowels(null);<br/>+-------------------------+<br/>| udfs.strip_vowels(null) |<br/>+-------------------------+<br/>| NULL                    |<br/>+-------------------------+<br/>Returned 1 row(s) in 0.16s<br/>[localhost:21000] > select s, strip_vowels(s) from t2;<br/>+-----------+----------------------+<br/>| s         | udfs.strip_vowels(s) |<br/>+-----------+----------------------+<br/>| lower     | lwr                  |<br/>| UPPER     | PPR                  |<br/>| Init cap  | nt cp                |<br/>| CamelCase | CmlCs                |<br/>+-----------+----------------------+<br/>Returned 4 row(s) in 0.24s</div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_sample_uda\" class=\"sql-docs-example\"><h4>Sample C++ UDA: SumOfSquares</h4><p>\n          This example demonstrates a user-defined aggregate function (UDA) that produces the sum of the squares of\n          its input values.\n        </p><p>\n          The coding for a UDA is a little more involved than a scalar UDF, because the processing is split into\n          several phases, each implemented by a different function. Each phase is relatively straightforward: the\n          <q>update</q> and <q>merge</q> phases, where most of the work is done, read an input value and combine it\n          with some accumulated intermediate value.\n        </p><p>\n          As in our sample UDF from the previous example, we add function signatures to a header file (in this\n          case, <span class=\"sql-docs-variable\">uda-sample.h</span>). Because this is a math-oriented UDA, we make two versions of\n          each function, one accepting an integer value and the other accepting a floating-point value.\n        </p><div class=\"sql-docs-code-block\">void SumOfSquaresInit(FunctionContext* context, BigIntVal* val);<br/>void SumOfSquaresInit(FunctionContext* context, DoubleVal* val);<br/><br/>void SumOfSquaresUpdate(FunctionContext* context, const BigIntVal& input, BigIntVal* val);<br/>void SumOfSquaresUpdate(FunctionContext* context, const DoubleVal& input, DoubleVal* val);<br/><br/>void SumOfSquaresMerge(FunctionContext* context, const BigIntVal& src, BigIntVal* dst);<br/>void SumOfSquaresMerge(FunctionContext* context, const DoubleVal& src, DoubleVal* dst);<br/><br/>BigIntVal SumOfSquaresFinalize(FunctionContext* context, const BigIntVal& val);<br/>DoubleVal SumOfSquaresFinalize(FunctionContext* context, const DoubleVal& val);</div><p>\n          We add the function bodies to a C++ source file (in this case, <span class=\"sql-docs-variable\">uda-sample.cc</span>):\n        </p><div class=\"sql-docs-code-block\">void SumOfSquaresInit(FunctionContext* context, BigIntVal* val) {<br/>  val->is_null = false;<br/>  val->val = 0;<br/>}<br/>void SumOfSquaresInit(FunctionContext* context, DoubleVal* val) {<br/>  val->is_null = false;<br/>  val->val = 0.0;<br/>}<br/><br/>void SumOfSquaresUpdate(FunctionContext* context, const BigIntVal& input, BigIntVal* val) {<br/>  if (input.is_null) return;<br/>  val->val += input.val * input.val;<br/>}<br/>void SumOfSquaresUpdate(FunctionContext* context, const DoubleVal& input, DoubleVal* val) {<br/>  if (input.is_null) return;<br/>  val->val += input.val * input.val;<br/>}<br/><br/>void SumOfSquaresMerge(FunctionContext* context, const BigIntVal& src, BigIntVal* dst) {<br/>  dst->val += src.val;<br/>}<br/>void SumOfSquaresMerge(FunctionContext* context, const DoubleVal& src, DoubleVal* dst) {<br/>  dst->val += src.val;<br/>}<br/><br/>BigIntVal SumOfSquaresFinalize(FunctionContext* context, const BigIntVal& val) {<br/>  return val;<br/>}<br/>DoubleVal SumOfSquaresFinalize(FunctionContext* context, const DoubleVal& val) {<br/>  return val;<br/>}</div><p>\n          As with the sample UDF, we build a shared library and put it into HDFS:\n        </p><div class=\"sql-docs-code-block\">$ make<br/>[  0%] Generating udf_samples/uda-sample.ll<br/>[ 16%] Built target uda-sample-ir<br/>Scanning dependencies of target udasample<br/>[ 33%] Building CXX object CMakeFiles/udasample.dir/uda-sample.o<br/>Linking CXX shared library udf_samples/libudasample.so<br/>[ 33%] Built target udasample<br/>Scanning dependencies of target uda-sample-test<br/>[ 50%] Building CXX object CMakeFiles/uda-sample-test.dir/uda-sample-test.o<br/>Linking CXX executable udf_samples/uda-sample-test<br/>[ 50%] Built target uda-sample-test<br/>[ 50%] Generating udf_samples/udf-sample.ll<br/>[ 66%] Built target udf-sample-ir<br/>[ 83%] Built target udfsample<br/>[100%] Built target udf-sample-test<br/>$ hdfs dfs -put ./udf_samples/libudasample.so /user/hive/udfs/libudasample.so</div><p>\n          To create the SQL function, we issue a <span class=\"sql-docs-inline-code\">CREATE AGGREGATE FUNCTION</span> statement and specify\n          the underlying C++ function names for the different phases:\n        </p><div class=\"sql-docs-code-block\">[localhost:21000] > use udf_testing;<br/><br/>[localhost:21000] > create table sos (x bigint, y double);<br/>[localhost:21000] > insert into sos values (1, 1.1), (2, 2.2), (3, 3.3), (4, 4.4);<br/>Inserted 4 rows in 1.10s<br/><br/>[localhost:21000] > create aggregate function sum_of_squares(bigint) returns bigint<br/>  > location '/user/hive/udfs/libudasample.so'<br/>  > init_fn='SumOfSquaresInit'<br/>  > update_fn='SumOfSquaresUpdate'<br/>  > merge_fn='SumOfSquaresMerge'<br/>  > finalize_fn='SumOfSquaresFinalize';<br/><br/>[localhost:21000] > -- Compute the same value using literals or the UDA;<br/>[localhost:21000] > select 1*1 + 2*2 + 3*3 + 4*4;<br/>+-------------------------------+<br/>| 1 * 1 + 2 * 2 + 3 * 3 + 4 * 4 |<br/>+-------------------------------+<br/>| 30                            |<br/>+-------------------------------+<br/>Returned 1 row(s) in 0.12s<br/>[localhost:21000] > select sum_of_squares(x) from sos;<br/>+------------------------+<br/>| udfs.sum_of_squares(x) |<br/>+------------------------+<br/>| 30                     |<br/>+------------------------+<br/>Returned 1 row(s) in 0.35s</div><p>\n          Until we create the overloaded version of the UDA, it can only handle a single data type. To allow it to\n          handle <span class=\"sql-docs-inline-code\">DOUBLE</span> as well as <span class=\"sql-docs-inline-code\">BIGINT</span>, we issue another <span class=\"sql-docs-inline-code\">CREATE\n          AGGREGATE FUNCTION</span> statement:\n        </p><div class=\"sql-docs-code-block\">[localhost:21000] > select sum_of_squares(y) from sos;<br/>ERROR: AnalysisException: No matching function with signature: udfs.sum_of_squares(DOUBLE).<br/><br/>[localhost:21000] > create aggregate function sum_of_squares(double) returns double<br/>  > location '/user/hive/udfs/libudasample.so'<br/>  > init_fn='SumOfSquaresInit'<br/>  > update_fn='SumOfSquaresUpdate'<br/>  > merge_fn='SumOfSquaresMerge'<br/>  > finalize_fn='SumOfSquaresFinalize';<br/><br/>[localhost:21000] > -- Compute the same value using literals or the UDA;<br/>[localhost:21000] > select 1.1*1.1 + 2.2*2.2 + 3.3*3.3 + 4.4*4.4;<br/>+-----------------------------------------------+<br/>| 1.1 * 1.1 + 2.2 * 2.2 + 3.3 * 3.3 + 4.4 * 4.4 |<br/>+-----------------------------------------------+<br/>| 36.3                                          |<br/>+-----------------------------------------------+<br/>Returned 1 row(s) in 0.12s<br/>[localhost:21000] > select sum_of_squares(y) from sos;<br/>+------------------------+<br/>| udfs.sum_of_squares(y) |<br/>+------------------------+<br/>| 36.3                   |<br/>+------------------------+<br/>Returned 1 row(s) in 0.35s</div><p>\n          Typically, you use a UDA in queries with <span class=\"sql-docs-inline-code\">GROUP BY</span> clauses, to produce a result set with\n          a separate aggregate value for each combination of values from the <span class=\"sql-docs-inline-code\">GROUP BY</span> clause.\n          Let's change our sample table to use <span class=\"sql-docs-inline-code\">0</span> to indicate rows containing even values, and\n          <span class=\"sql-docs-inline-code\">1</span> to flag rows containing odd values. Then the <span class=\"sql-docs-inline-code\">GROUP BY</span> query can\n          return two values, the sum of the squares for the even values, and the sum of the squares for the odd\n          values:\n        </p><div class=\"sql-docs-code-block\">[localhost:21000] > insert overwrite sos values (1, 1), (2, 0), (3, 1), (4, 0);<br/>Inserted 4 rows in 1.24s<br/><br/>[localhost:21000] > -- Compute 1 squared + 3 squared, and 2 squared + 4 squared;<br/>[localhost:21000] > select y, sum_of_squares(x) from sos group by y;<br/>+---+------------------------+<br/>| y | udfs.sum_of_squares(x) |<br/>+---+------------------------+<br/>| 1 | 10                     |<br/>| 0 | 20                     |<br/>+---+------------------------+<br/>Returned 2 row(s) in 0.43s</div></div></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_security\"><h4>Security Considerations for User-Defined Functions</h4><div><p>\n        When the Impala authorization feature is enabled:\n      </p><ul><li>\n          To call a UDF in a query, you must have the required read privilege for any databases and tables used in\n          the query.\n        </li><li>\n          Because incorrectly coded UDFs could cause performance or capacity problems, for example by going into\n          infinite loops or allocating excessive amounts of memory, only an administrative user can create UDFs.\n          That is, to execute the <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> statement requires the <span class=\"sql-docs-inline-code\">ALL</span>\n          privilege on the server.\n        </li></ul><p>\n        See <span>authorization</span> for details about authorization in Impala.\n      </p></div></div><div id=\"../Impala/docs/topics/impala_udf.xml_udf_limits\"><h4>Limitations and Restrictions for Impala UDFs</h4><div><p>\n        The following limitations and restrictions apply to Impala UDFs in the current release:\n      </p><ul><li>\n          Impala does not support Hive UDFs that accept or return composite or nested types, or other types not\n          available in Impala tables.\n        </li><li><p id=\"../Impala/docs/topics/impala_udf.xml_current_user_caveat\">\n        The Hive <span class=\"sql-docs-inline-code\">current_user()</span> function cannot be\n        called from a Java UDF through Impala.\n      </p></li><li>\n          All Impala UDFs must be deterministic, that is, produce the same output each time when passed the same\n          argument values. For example, an Impala UDF must not call functions such as <span class=\"sql-docs-inline-code\">rand()</span> to\n          produce different values for each invocation. It must not retrieve data from external sources, such as\n          from disk or over the network.\n        </li><li>\n          An Impala UDF must not spawn other threads or processes.\n        </li><li>\n          Prior to Impala 2.5 when the <span class=\"sql-docs-inline-code\">catalogd</span> process is restarted,\n          all UDFs become undefined and must be reloaded. In Impala 2.5 and higher, this\n          limitation only applies to older Java UDFs. Re-create those UDFs using the new\n          <span class=\"sql-docs-inline-code\">CREATE FUNCTION</span> syntax for Java UDFs, which excludes the function signature,\n          to remove the limitation entirely.\n        </li><li>\n          Impala currently does not support user-defined table functions (UDTFs).\n        </li><li>\n          The <span class=\"sql-docs-inline-code\">CHAR</span> and <span class=\"sql-docs-inline-code\">VARCHAR</span> types cannot be used as input arguments or return\n          values for UDFs.\n        </li></ul></div></div>","title":"Impala User-Defined Functions (UDFs)"}