{"body":"<div><p>\n      The <span class=\"sql-docs-inline-code\">OFFSET</span>  clause in a <span class=\"sql-docs-inline-code\">SELECT</span>  query causes the result set to start some\n      number of rows after the logical first item. The result set is numbered starting from zero, so <span class=\"sql-docs-inline-code\">OFFSET\n      0</span>  produces the same result as leaving out the <span class=\"sql-docs-inline-code\">OFFSET</span>  clause. Always use this clause\n      in combination with <span class=\"sql-docs-inline-code\">ORDER BY</span>  (so that it is clear which item should be first, second, and so\n      on) and <span class=\"sql-docs-inline-code\">LIMIT</span>  (so that the result set covers a bounded range, such as items 0-9, 100-199,\n      and so on).\n    </p> <p id=\"../Impala/docs/topics/impala_offset.xml_limit_and_offset\">\n        In Impala 1.2.1 and higher, you can combine a <span class=\"sql-docs-inline-code\">LIMIT</span>  clause with an <span class=\"sql-docs-inline-code\">OFFSET</span> \n        clause to produce a small result set that is different from a top-N query, for example, to return items 11\n        through 20. This technique can be used to simulate <q>paged</q>  results. Because Impala queries typically\n        involve substantial amounts of I/O, use this technique only for compatibility in cases where you cannot\n        rewrite the application logic. For best performance and scalability, wherever practical, query as many\n        items as you expect to need, cache them on the application side, and display small groups of results to\n        users using application logic.\n      </p> <p id=\"../Impala/docs/topics/impala_offset.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      The following example shows how you could run a <q>paging</q>  query originally written for a traditional\n      database application. Because typical Impala queries process megabytes or gigabytes of data and read large\n      data files from disk each time, it is inefficient to run a separate query to retrieve each small group of\n      items. Use this technique only for compatibility while porting older applications, then rewrite the\n      application code to use a single query with a large result set, and display pages of results from the cached\n      result set.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > create table numbers (x int);<br/>[localhost:21000] > insert into numbers select x from very_long_sequence;<br/>Inserted 1000000 rows in 1.34s<br/>[localhost:21000] > select x from numbers order by x limit 5 offset 0;<br/>+----+<br/>| x  |<br/>+----+<br/>| 1  |<br/>| 2  |<br/>| 3  |<br/>| 4  |<br/>| 5  |<br/>+----+<br/>[localhost:21000] > select x from numbers order by x limit 5 offset 5;<br/>+----+<br/>| x  |<br/>+----+<br/>| 6  |<br/>| 7  |<br/>| 8  |<br/>| 9  |<br/>| 10 |<br/>+----+<br/></div></div> ","title":"OFFSET Clause"}