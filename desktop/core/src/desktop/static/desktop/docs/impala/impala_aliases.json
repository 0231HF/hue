{"body":"<div><p>\n      When you write the names of tables, columns, or column expressions in a query, you can assign an alias at the\n      same time. Then you can specify the alias rather than the original name when making other references to the\n      table or column in the same statement. You typically specify aliases that are shorter, easier to remember, or\n      both than the original names. The aliases are printed in the query header, making them useful for\n      self-documenting output.\n    </p> <p>\n      To set up an alias, add the <span class=\"sql-docs-inline-code\">AS <span class=\"sql-docs-variable\">alias</span> </span>  clause immediately after any table,\n      column, or expression name in the <span class=\"sql-docs-inline-code\">SELECT</span>  list or <span class=\"sql-docs-inline-code\">FROM</span>  list of a query. The\n      <span class=\"sql-docs-inline-code\">AS</span>  keyword is optional; you can also specify the alias immediately after the original name.\n    </p> <div class=\"sql-docs-code-block\">-- Make the column headers of the result set easier to understand.<br/>SELECT c1 AS name, c2 AS address, c3 AS phone FROM table_with_terse_columns;<br/>SELECT SUM(ss_xyz_dollars_net) AS total_sales FROM table_with_cryptic_columns;<br/>-- The alias can be a quoted string for extra readability.<br/>SELECT c1 AS \"Employee ID\", c2 AS \"Date of hire\" FROM t1;<br/>-- The AS keyword is optional.<br/>SELECT c1 \"Employee ID\", c2 \"Date of hire\" FROM t1;<br/><br/>-- The table aliases assigned in the FROM clause can be used both earlier<br/>-- in the query (the SELECT list) and later (the WHERE clause).<br/>SELECT one.name, two.address, three.phone<br/>  FROM census one, building_directory two, phonebook three<br/>WHERE one.id = two.id and two.id = three.id;<br/><br/>-- The aliases c1 and c2 let the query handle columns with the same names from 2 joined tables.<br/>-- The aliases t1 and t2 let the query abbreviate references to long or cryptically named tables.<br/>SELECT t1.column_n AS c1, t2.column_n AS c2 FROM long_name_table AS t1, very_long_name_table2 AS t2<br/>  WHERE c1 = c2;<br/>SELECT t1.column_n c1, t2.column_n c2 FROM table1 t1, table2 t2<br/>  WHERE c1 = c2;<br/></div><p>\n      To use an alias name that matches one of the Impala reserved keywords (listed in\n      <span>reserved words</span>), surround the identifier with either single or\n      double quotation marks, or <span class=\"sql-docs-inline-code\">``</span>  characters (backticks).\n    </p> <p><span id=\"../Impala/docs/topics/impala_aliases.xml_aliases_vs_identifiers\" class=\"sql-docs-inline-code\"> Aliases follow the same rules as identifiers when it comes to case\n        insensitivity. Aliases can be longer than identifiers (up to the maximum length of a Java string) and can\n        include additional characters such as spaces and dashes when they are quoted using backtick characters.\n        </span> </p> <p id=\"../Impala/docs/topics/impala_aliases.xml_complex_types_blurb\"><b>Complex type considerations:</b> </p> <p>\n      Queries involving the complex types (<span class=\"sql-docs-inline-code\">ARRAY</span> ,\n      <span class=\"sql-docs-inline-code\">STRUCT</span> , and <span class=\"sql-docs-inline-code\">MAP</span> ), typically make\n      extensive use of table aliases. These queries involve join clauses\n      where the complex type column is treated as a joined table.\n      To construct two-part or three-part qualified names for the\n      complex column elements in the <span class=\"sql-docs-inline-code\">FROM</span>  list,\n      sometimes it is syntactically required to construct a table\n      alias for the complex column where it is referenced in the join clause.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details and examples.\n    </p> <p><b>Alternatives:</b> </p> <p id=\"../Impala/docs/topics/impala_aliases.xml_views_vs_identifiers\">\n        Another way to define different names for the same tables or columns is to create views. See\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_views.xml#views\">Overview of Impala Views</a> for details.\n      </p> </div> ","title":"Overview of Impala Aliases"}