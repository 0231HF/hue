{"body":"<div><p>\n      Specify the <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause in queries that use aggregation functions, such as\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_count.xml#count\">COUNT()</a></span> ,\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_sum.xml#sum\">SUM()</a></span> ,\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_avg.xml#avg\">AVG()</a></span> ,\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_min.xml#min\">MIN()</a></span> , and\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_max.xml#max\">MAX()</a></span> . Specify in the\n      <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_group_by.xml#group_by\">GROUP BY</a></span>  clause the names of all the\n      columns that do not participate in the aggregation operation.\n    </p> <p id=\"../Impala/docs/topics/impala_group_by.xml_complex_types_blurb\"><b>Complex type considerations:</b> </p> <p>\n      In Impala 2.3 and higher, the complex data types <span class=\"sql-docs-inline-code\">STRUCT</span> ,\n      <span class=\"sql-docs-inline-code\">ARRAY</span> , and <span class=\"sql-docs-inline-code\">MAP</span>  are available. These columns cannot\n      be referenced directly in the <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause.\n      When you query a complex type column, you use join notation to <q>unpack</q>  the elements\n      of the complex type, and within the join query you can include an <span class=\"sql-docs-inline-code\">ORDER BY</span> \n      clause to control the order in the result set of the scalar elements from the complex type.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about Impala support for complex types.\n    </p> <p id=\"../Impala/docs/topics/impala_group_by.xml_zero_length_strings\"><b>Zero-length strings:</b>  For purposes of clauses such as <span class=\"sql-docs-inline-code\">DISTINCT</span>  and <span class=\"sql-docs-inline-code\">GROUP\n        BY</span> , Impala considers zero-length strings (<span class=\"sql-docs-inline-code\">\"\"</span> ), <span class=\"sql-docs-inline-code\">NULL</span> , and space\n        to all be different values.\n      </p> <p id=\"../Impala/docs/topics/impala_group_by.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      For example, the following query finds the 5 items that sold the highest total quantity (using the\n      <span class=\"sql-docs-inline-code\">SUM()</span>  function, and also counts the number of sales transactions for those items (using the\n      <span class=\"sql-docs-inline-code\">COUNT()</span>  function). Because the column representing the item IDs is not used in any\n      aggregation functions, we specify that column in the <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause.\n    </p> <div class=\"sql-docs-code-block\">select<br/>  <b>ss_item_sk</b> as Item,<br/>  <b>count</b> (ss_item_sk) as Times_Purchased,<br/>  <b>sum</b> (ss_quantity) as Total_Quantity_Purchased<br/>from store_sales<br/>  <b>group by ss_item_sk</b> order by sum(ss_quantity) desc<br/>  limit 5;<br/>+-------+-----------------+--------------------------+<br/>| item  | times_purchased | total_quantity_purchased |<br/>+-------+-----------------+--------------------------+<br/>| 9325  | 372             | 19072                    |<br/>| 4279  | 357             | 18501                    |<br/>| 7507  | 371             | 18475                    |<br/>| 5953  | 369             | 18451                    |<br/>| 16753 | 375             | 18446                    |<br/>+-------+-----------------+--------------------------+</div><p>\n      The <span class=\"sql-docs-inline-code\">HAVING</span>  clause lets you filter the results of aggregate functions, because you cannot\n      refer to those expressions in the <span class=\"sql-docs-inline-code\">WHERE</span>  clause. For example, to find the 5 lowest-selling\n      items that were included in at least 100 sales transactions, we could use this query:\n    </p> <div class=\"sql-docs-code-block\">select<br/>  <b>ss_item_sk</b> as Item,<br/>  <b>count</b> (ss_item_sk) as Times_Purchased,<br/>  <b>sum</b> (ss_quantity) as Total_Quantity_Purchased<br/>from store_sales<br/>  <b>group by ss_item_sk</b> <b>having times_purchased >= 100</b> order by sum(ss_quantity)<br/>  limit 5;<br/>+-------+-----------------+--------------------------+<br/>| item  | times_purchased | total_quantity_purchased |<br/>+-------+-----------------+--------------------------+<br/>| 13943 | 105             | 4087                     |<br/>| 2992  | 101             | 4176                     |<br/>| 4773  | 107             | 4204                     |<br/>| 14350 | 103             | 4260                     |<br/>| 11956 | 102             | 4275                     |<br/>+-------+-----------------+--------------------------+</div><p>\n      When performing calculations involving scientific or financial data, remember that columns with type\n      <span class=\"sql-docs-inline-code\">FLOAT</span>  or <span class=\"sql-docs-inline-code\">DOUBLE</span>  are stored as true floating-point numbers, which cannot\n      precisely represent every possible fractional value. Thus, if you include a <span class=\"sql-docs-inline-code\">FLOAT</span>  or\n      <span class=\"sql-docs-inline-code\">DOUBLE</span>  column in a <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause, the results might not precisely match\n      literal values in your query or from an original Text data file. Use rounding operations, the\n      <span class=\"sql-docs-inline-code\">BETWEEN</span>  operator, or another arithmetic technique to match floating-point values that are\n      <q>near</q>  literal values you expect. For example, this query on the <span class=\"sql-docs-inline-code\">ss_wholesale_cost</span> \n      column returns cost values that are close but not identical to the original figures that were entered as\n      decimal fractions.\n    </p> <div class=\"sql-docs-code-block\">select ss_wholesale_cost, avg(ss_quantity * ss_sales_price) as avg_revenue_per_sale<br/>  from sales<br/>  group by ss_wholesale_cost<br/>  order by avg_revenue_per_sale desc<br/>  limit 5;<br/>+-------------------+----------------------+<br/>| ss_wholesale_cost | avg_revenue_per_sale |<br/>+-------------------+----------------------+<br/>| 96.94000244140625 | 4454.351539300434    |<br/>| 95.93000030517578 | 4423.119941283189    |<br/>| 98.37999725341797 | 4332.516490316291    |<br/>| 97.97000122070312 | 4330.480601655014    |<br/>| 98.52999877929688 | 4291.316953108634    |<br/>+-------------------+----------------------+</div><p>\n      Notice how wholesale cost values originally entered as decimal fractions such as <span class=\"sql-docs-inline-code\">96.94</span>  and\n      <span class=\"sql-docs-inline-code\">98.38</span>  are slightly larger or smaller in the result set, due to precision limitations in the\n      hardware floating-point types. The imprecise representation of <span class=\"sql-docs-inline-code\">FLOAT</span>  and\n      <span class=\"sql-docs-inline-code\">DOUBLE</span>  values is why financial data processing systems often store currency using data types\n      that are less space-efficient but avoid these types of rounding errors.\n    </p> <p id=\"../Impala/docs/topics/impala_group_by.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_aggregate_functions.xml#aggregate_functions\">Impala Aggregate Functions</a></p> </div> ","title":"GROUP BY Clause"}