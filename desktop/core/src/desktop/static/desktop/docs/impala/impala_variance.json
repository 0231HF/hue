{"body":"<div><p>\n      An aggregate function that returns the\n      <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Variance\">variance</a> of a set of\n      numbers. This is a mathematical property that signifies how far the values spread apart from the mean. The\n      return value can be zero (if the input is a single value, or a set of identical values), or a positive number\n      otherwise.\n    </p> <p id=\"../Impala/docs/topics/impala_variance.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\">{ VARIANCE | VAR[IANCE]_SAMP | VAR[IANCE]_POP } ([DISTINCT | ALL] <span class=\"sql-docs-variable\">expression</span> )</div><p>\n      This function works with any numeric data type.\n    </p> <p id=\"../Impala/docs/topics/impala_variance.xml_former_odd_return_type_string\"><b>Return type:</b> <span class=\"sql-docs-inline-code\">DOUBLE</span>  in Impala 2.0 and higher; <span class=\"sql-docs-inline-code\">STRING</span>  in earlier\n        releases\n      </p> <p>\n      This function is typically used in mathematical formulas related to probability distributions.\n    </p> <p>\n      The <span class=\"sql-docs-inline-code\">VARIANCE_SAMP()</span>  and <span class=\"sql-docs-inline-code\">VARIANCE_POP()</span>  functions compute the sample\n      variance and population variance, respectively, of the input values. (<span class=\"sql-docs-inline-code\">VARIANCE()</span>  is an alias\n      for <span class=\"sql-docs-inline-code\">VARIANCE_SAMP()</span> .) Both functions evaluate all input rows matched by the query. The\n      difference is that <span class=\"sql-docs-inline-code\">STDDEV_SAMP()</span>  is scaled by <span class=\"sql-docs-inline-code\">1/(N-1)</span>  while\n      <span class=\"sql-docs-inline-code\">STDDEV_POP()</span>  is scaled by <span class=\"sql-docs-inline-code\">1/N</span> .\n    </p> <p>\n      The functions <span class=\"sql-docs-inline-code\">VAR_SAMP()</span>  and <span class=\"sql-docs-inline-code\">VAR_POP()</span>  are the same as\n      <span class=\"sql-docs-inline-code\">VARIANCE_SAMP()</span>  and <span class=\"sql-docs-inline-code\">VARIANCE_POP()</span> , respectively. These aliases are\n      available in Impala 2.0 and later.\n    </p> <p>\n      If no input rows match the query, the result of any of these functions is <span class=\"sql-docs-inline-code\">NULL</span> . If a single\n      input row matches the query, the result of any of these functions is <span class=\"sql-docs-inline-code\">\"0.0\"</span> .\n    </p> <p id=\"../Impala/docs/topics/impala_variance.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      This example demonstrates how <span class=\"sql-docs-inline-code\">VARIANCE()</span>  and <span class=\"sql-docs-inline-code\">VARIANCE_SAMP()</span>  return the\n      same result, while <span class=\"sql-docs-inline-code\">VARIANCE_POP()</span>  uses a slightly different calculation to reflect that the\n      input data is considered part of a larger <q>population</q> .\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select variance(score) from test_scores;<br/>+-----------------+<br/>| variance(score) |<br/>+-----------------+<br/>| 812.25          |<br/>+-----------------+<br/>[localhost:21000] > select variance_samp(score) from test_scores;<br/>+----------------------+<br/>| variance_samp(score) |<br/>+----------------------+<br/>| 812.25               |<br/>+----------------------+<br/>[localhost:21000] > select variance_pop(score) from test_scores;<br/>+---------------------+<br/>| variance_pop(score) |<br/>+---------------------+<br/>| 811.438             |<br/>+---------------------+<br/></div><p>\n      This example demonstrates that, because the return value of these aggregate functions is a\n      <span class=\"sql-docs-inline-code\">STRING</span> , you convert the result with <span class=\"sql-docs-inline-code\">CAST</span>  if you need to do further\n      calculations as a numeric value.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > create table score_stats as select cast(stddev(score) as decimal(7,4)) `standard_deviation`, cast(variance(score) as decimal(7,4)) `variance` from test_scores;<br/>+-------------------+<br/>| summary           |<br/>+-------------------+<br/>| Inserted 1 row(s) |<br/>+-------------------+<br/>[localhost:21000] > desc score_stats;<br/>+--------------------+--------------+---------+<br/>| name               | type         | comment |<br/>+--------------------+--------------+---------+<br/>| standard_deviation | decimal(7,4) |         |<br/>| variance           | decimal(7,4) |         |<br/>+--------------------+--------------+---------+<br/></div><p id=\"../Impala/docs/topics/impala_variance.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <p id=\"../Impala/docs/topics/impala_variance.xml_analytic_not_allowed_caveat\">\n        This function cannot be used in an analytic context. That is, the <span class=\"sql-docs-inline-code\">OVER()</span>  clause is not allowed at all with this function.\n      </p> <p id=\"../Impala/docs/topics/impala_variance.xml_related_info\"><b>Related information:</b> </p> <p>\n      The <span class=\"sql-docs-inline-code\">STDDEV()</span> , <span class=\"sql-docs-inline-code\">STDDEV_POP()</span> , and <span class=\"sql-docs-inline-code\">STDDEV_SAMP()</span>  functions\n      compute the standard deviation (square root of the variance) based on the results of\n      <span class=\"sql-docs-inline-code\">VARIANCE()</span> , <span class=\"sql-docs-inline-code\">VARIANCE_POP()</span> , and <span class=\"sql-docs-inline-code\">VARIANCE_SAMP()</span> \n      respectively. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_stddev.xml#stddev\">STDDEV, STDDEV_SAMP, STDDEV_POP Functions</a> for details about the standard deviation property.\n    </p> </div> ","title":"VARIANCE, VARIANCE_SAMP, VARIANCE_POP, VAR_SAMP, VAR_POP Functions"}