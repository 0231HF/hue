{"body":"<div><p>\n      The <span class=\"sql-docs-inline-code\">UNION</span>  clause lets you combine the result sets of multiple queries. By default, the\n      result sets are combined as if the <span class=\"sql-docs-inline-code\">DISTINCT</span>  operator was applied.\n</p> <p id=\"../Impala/docs/topics/impala_union.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">query_1</span> UNION [DISTINCT | ALL] <span class=\"sql-docs-variable\">query_2</span> </div><p id=\"../Impala/docs/topics/impala_union.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n      The <span class=\"sql-docs-inline-code\">UNION</span>  keyword by itself is the same as <span class=\"sql-docs-inline-code\">UNION DISTINCT</span> . Because\n      eliminating duplicates can be a memory-intensive process for a large result set, prefer <span class=\"sql-docs-inline-code\">UNION\n      ALL</span>  where practical. (That is, when you know the different queries in the union will not produce any\n      duplicates, or where the duplicate values are acceptable.)\n    </p> <p>\n      When an <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause applies to a <span class=\"sql-docs-inline-code\">UNION ALL</span>  or <span class=\"sql-docs-inline-code\">UNION</span> \n      query, in Impala 1.4 and higher, the <span class=\"sql-docs-inline-code\">LIMIT</span>  clause is no longer required. To make the\n      <span class=\"sql-docs-inline-code\">ORDER BY</span>  and <span class=\"sql-docs-inline-code\">LIMIT</span>  clauses apply to the entire result set, turn the\n      <span class=\"sql-docs-inline-code\">UNION</span>  query into a subquery, <span class=\"sql-docs-inline-code\">SELECT</span>  from the subquery, and put the\n      <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause at the end, outside the subquery.\n    </p> <p id=\"../Impala/docs/topics/impala_union.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      First, set up some sample data, including duplicate <span class=\"sql-docs-inline-code\">1</span>  values:\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > create table few_ints (x int);<br/>[localhost:21000] > insert into few_ints values (1), (1), (2), (3);<br/>[localhost:21000] > set default_order_by_limit=1000;</div><p>\n      This example shows how <span class=\"sql-docs-inline-code\">UNION ALL</span>  returns all rows from both queries, without any additional\n      filtering to eliminate duplicates. For the large result sets common with Impala queries, this is the most\n      memory-efficient technique.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select x from few_ints order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 4 row(s) in 0.41s<br/>[localhost:21000] > select x from few_ints union all select x from few_ints;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 8 row(s) in 0.42s<br/>[localhost:21000] > select * from (select x from few_ints union all select x from few_ints) as t1 order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 1 |<br/>| 1 |<br/>| 1 |<br/>| 2 |<br/>| 2 |<br/>| 3 |<br/>| 3 |<br/>+---+<br/>Returned 8 row(s) in 0.53s<br/>[localhost:21000] > select x from few_ints union all select 10;<br/>+----+<br/>| x  |<br/>+----+<br/>| 10 |<br/>| 1  |<br/>| 1  |<br/>| 2  |<br/>| 3  |<br/>+----+<br/>Returned 5 row(s) in 0.38s</div><p>\n      This example shows how the <span class=\"sql-docs-inline-code\">UNION</span>  clause without the <span class=\"sql-docs-inline-code\">ALL</span>  keyword condenses\n      the result set to eliminate all duplicate values, making the query take more time and potentially more\n      memory. The extra processing typically makes this technique not recommended for queries that return result\n      sets with millions or billions of values.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select x from few_ints union select x+1 from few_ints;<br/>+---+<br/>| x |<br/>+---+<br/>| 3 |<br/>| 4 |<br/>| 1 |<br/>| 2 |<br/>+---+<br/>Returned 4 row(s) in 0.51s<br/>[localhost:21000] > select x from few_ints union select 10;<br/>+----+<br/>| x  |<br/>+----+<br/>| 2  |<br/>| 10 |<br/>| 1  |<br/>| 3  |<br/>+----+<br/>Returned 4 row(s) in 0.49s<br/>[localhost:21000] > select * from (select x from few_ints union select x from few_ints) as t1 order by x;<br/>+---+<br/>| x |<br/>+---+<br/>| 1 |<br/>| 2 |<br/>| 3 |<br/>+---+<br/>Returned 3 row(s) in 0.53s</div></div> ","title":"UNION Clause"}