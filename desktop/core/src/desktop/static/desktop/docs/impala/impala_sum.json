{"body":"<div><p>\n      An aggregate function that returns the sum of a set of numbers. Its single argument can be numeric column, or\n      the numeric result of a function or expression applied to the column value. Rows with a <span class=\"sql-docs-inline-code\">NULL</span> \n      value for the specified column are ignored. If the table is empty, or all the values supplied to\n      <span class=\"sql-docs-inline-code\">MIN</span>  are <span class=\"sql-docs-inline-code\">NULL</span> , <span class=\"sql-docs-inline-code\">SUM</span>  returns <span class=\"sql-docs-inline-code\">NULL</span> .\n    </p> <p id=\"../Impala/docs/topics/impala_sum.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\">SUM([DISTINCT | ALL] <span class=\"sql-docs-variable\">expression</span> ) [OVER (<span class=\"sql-docs-variable\">analytic_clause</span> )]</div><p>\n      When the query contains a <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause, returns one value for each combination of\n      grouping values.\n    </p> <p><b>Return type:</b> <span class=\"sql-docs-inline-code\">BIGINT</span>  for integer arguments, <span class=\"sql-docs-inline-code\">DOUBLE</span>  for floating-point\n      arguments\n    </p> <p id=\"../Impala/docs/topics/impala_sum.xml_complex_types_blurb\"><b>Complex type considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_sum.xml_complex_types_aggregation_explanation\">\n        To access a column with a complex type (<span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> )\n        in an aggregation function, you unpack the individual elements using join notation in the query,\n        and then apply the function to the final scalar item, field, key, or value at the bottom of any nested type hierarchy in the column.\n        See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about using complex types in Impala.\n      </p> <p id=\"../Impala/docs/topics/impala_sum.xml_complex_types_aggregation_example\">\nThe following example demonstrates calls to several aggregation functions\nusing values from a column containing nested complex types\n(an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span>  items).\nThe array is unpacked inside the query using join notation.\nThe array elements are referenced using the <span class=\"sql-docs-inline-code\">ITEM</span> \npseudocolumn, and the structure fields inside the array elements\nare referenced using dot notation.\nNumeric values such as <span class=\"sql-docs-inline-code\">SUM()</span>  and <span class=\"sql-docs-inline-code\">AVG()</span> \nare computed using the numeric <span class=\"sql-docs-inline-code\">R_NATIONKEY</span>  field, and\nthe general-purpose <span class=\"sql-docs-inline-code\">MAX()</span>  and <span class=\"sql-docs-inline-code\">MIN()</span> \nvalues are computed from the string <span class=\"sql-docs-inline-code\">N_NAME</span>  field.\n<div class=\"sql-docs-code-block\">describe region;<br/>+-------------+-------------------------+---------+<br/>| name        | type                    | comment |<br/>+-------------+-------------------------+---------+<br/>| r_regionkey | smallint                |         |<br/>| r_name      | string                  |         |<br/>| r_comment   | string                  |         |<br/>| r_nations   | array<struct<           |         |<br/>|             |   n_nationkey:smallint, |         |<br/>|             |   n_name:string,        |         |<br/>|             |   n_comment:string      |         |<br/>|             | >>                      |         |<br/>+-------------+-------------------------+---------+<br/><br/>select r_name, r_nations.item.n_nationkey<br/>  from region, region.r_nations as r_nations<br/>order by r_name, r_nations.item.n_nationkey;<br/>+-------------+------------------+<br/>| r_name      | item.n_nationkey |<br/>+-------------+------------------+<br/>| AFRICA      | 0                |<br/>| AFRICA      | 5                |<br/>| AFRICA      | 14               |<br/>| AFRICA      | 15               |<br/>| AFRICA      | 16               |<br/>| AMERICA     | 1                |<br/>| AMERICA     | 2                |<br/>| AMERICA     | 3                |<br/>| AMERICA     | 17               |<br/>| AMERICA     | 24               |<br/>| ASIA        | 8                |<br/>| ASIA        | 9                |<br/>| ASIA        | 12               |<br/>| ASIA        | 18               |<br/>| ASIA        | 21               |<br/>| EUROPE      | 6                |<br/>| EUROPE      | 7                |<br/>| EUROPE      | 19               |<br/>| EUROPE      | 22               |<br/>| EUROPE      | 23               |<br/>| MIDDLE EAST | 4                |<br/>| MIDDLE EAST | 10               |<br/>| MIDDLE EAST | 11               |<br/>| MIDDLE EAST | 13               |<br/>| MIDDLE EAST | 20               |<br/>+-------------+------------------+<br/><br/>select<br/>  r_name,<br/>  count(r_nations.item.n_nationkey) as count,<br/>  sum(r_nations.item.n_nationkey) as sum,<br/>  avg(r_nations.item.n_nationkey) as avg,<br/>  min(r_nations.item.n_name) as minimum,<br/>  max(r_nations.item.n_name) as maximum,<br/>  ndv(r_nations.item.n_nationkey) as distinct_vals<br/>from<br/>  region, region.r_nations as r_nations<br/>group by r_name<br/>order by r_name;<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/>| r_name      | count | sum | avg  | minimum   | maximum        | distinct_vals |<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/>| AFRICA      | 5     | 50  | 10   | ALGERIA   | MOZAMBIQUE     | 5             |<br/>| AMERICA     | 5     | 47  | 9.4  | ARGENTINA | UNITED STATES  | 5             |<br/>| ASIA        | 5     | 68  | 13.6 | CHINA     | VIETNAM        | 5             |<br/>| EUROPE      | 5     | 77  | 15.4 | FRANCE    | UNITED KINGDOM | 5             |<br/>| MIDDLE EAST | 5     | 58  | 11.6 | EGYPT     | SAUDI ARABIA   | 5             |<br/>+-------------+-------+-----+------+-----------+----------------+---------------+<br/></div></p> <p id=\"../Impala/docs/topics/impala_sum.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      The following example shows how to use <span class=\"sql-docs-inline-code\">SUM()</span>  to compute the total for all the values in the\n      table, a subset of values, or the sum for each combination of values in the <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause:\n    </p> <div class=\"sql-docs-code-block\">-- Total all the values for this column in the table.<br/>select sum(c1) from t1;<br/>-- Find the total for this column from a subset of the table.<br/>select sum(c1) from t1 where month = 'January' and year = '2013';<br/>-- Find the total from a set of numeric function results.<br/>select sum(length(s)) from t1;<br/>-- Often used with functions that return predefined values to compute a score.<br/>select sum(case when grade = 'A' then 1.0 when grade = 'B' then 0.75 else 0) as class_honors from test_scores;<br/>-- Can also be used in combination with DISTINCT and/or GROUP BY.<br/>-- Return more than one result.<br/>select month, year, sum(purchase_price) from store_stats group by month, year;<br/>-- Filter the input to eliminate duplicates before performing the calculation.<br/>select sum(distinct x) from t1;<br/></div><p>\n      The following examples show how to use <span class=\"sql-docs-inline-code\">SUM()</span>  in an analytic context. They use a table\n      containing integers from 1 to 10. Notice how the <span class=\"sql-docs-inline-code\">SUM()</span>  is reported for each input value, as\n      opposed to the <span class=\"sql-docs-inline-code\">GROUP BY</span>  clause which condenses the result set.\n<div class=\"sql-docs-code-block\">select x, property, sum(x) <b>over (partition by property)</b> as sum from int_t where property in ('odd','even');<br/>+----+----------+-----+<br/>| x  | property | sum |<br/>+----+----------+-----+<br/>| 2  | even     | 30  |<br/>| 4  | even     | 30  |<br/>| 6  | even     | 30  |<br/>| 8  | even     | 30  |<br/>| 10 | even     | 30  |<br/>| 1  | odd      | 25  |<br/>| 3  | odd      | 25  |<br/>| 5  | odd      | 25  |<br/>| 7  | odd      | 25  |<br/>| 9  | odd      | 25  |<br/>+----+----------+-----+<br/></div>\n\nAdding an <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause lets you experiment with results that are cumulative or apply to a moving\nset of rows (the <q>window</q> ). The following examples use <span class=\"sql-docs-inline-code\">SUM()</span>  in an analytic context\n(that is, with an <span class=\"sql-docs-inline-code\">OVER()</span>  clause) to produce a running total of all the even values,\nthen a running total of all the odd values. The basic <span class=\"sql-docs-inline-code\">ORDER BY x</span>  clause implicitly\nactivates a window clause of <span class=\"sql-docs-inline-code\">RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</span> ,\nwhich is effectively the same as <span class=\"sql-docs-inline-code\">ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</span> ,\ntherefore all of these examples produce the same results:\n<div class=\"sql-docs-code-block\">select x, property,<br/>  sum(x) over (partition by property <b>order by x</b> ) as 'cumulative total'<br/>  from int_t where property in ('odd','even');<br/>+----+----------+------------------+<br/>| x  | property | cumulative total |<br/>+----+----------+------------------+<br/>| 2  | even     | 2                |<br/>| 4  | even     | 6                |<br/>| 6  | even     | 12               |<br/>| 8  | even     | 20               |<br/>| 10 | even     | 30               |<br/>| 1  | odd      | 1                |<br/>| 3  | odd      | 4                |<br/>| 5  | odd      | 9                |<br/>| 7  | odd      | 16               |<br/>| 9  | odd      | 25               |<br/>+----+----------+------------------+<br/><br/>select x, property,<br/>  sum(x) over<br/>  (<br/>    partition by property<br/>    <b>order by x</b> <b>range between unbounded preceding and current row</b> ) as 'cumulative total'<br/>from int_t where property in ('odd','even');<br/>+----+----------+------------------+<br/>| x  | property | cumulative total |<br/>+----+----------+------------------+<br/>| 2  | even     | 2                |<br/>| 4  | even     | 6                |<br/>| 6  | even     | 12               |<br/>| 8  | even     | 20               |<br/>| 10 | even     | 30               |<br/>| 1  | odd      | 1                |<br/>| 3  | odd      | 4                |<br/>| 5  | odd      | 9                |<br/>| 7  | odd      | 16               |<br/>| 9  | odd      | 25               |<br/>+----+----------+------------------+<br/><br/>select x, property,<br/>  sum(x) over<br/>  (<br/>    partition by property<br/>    <b>order by x</b> <b>rows between unbounded preceding and current row</b> ) as 'cumulative total'<br/>  from int_t where property in ('odd','even');<br/>+----+----------+------------------+<br/>| x  | property | cumulative total |<br/>+----+----------+------------------+<br/>| 2  | even     | 2                |<br/>| 4  | even     | 6                |<br/>| 6  | even     | 12               |<br/>| 8  | even     | 20               |<br/>| 10 | even     | 30               |<br/>| 1  | odd      | 1                |<br/>| 3  | odd      | 4                |<br/>| 5  | odd      | 9                |<br/>| 7  | odd      | 16               |<br/>| 9  | odd      | 25               |<br/>+----+----------+------------------+<br/></div>\n\nChanging the direction of the <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause causes the intermediate\nresults of the cumulative total to be calculated in a different order:\n\n<div class=\"sql-docs-code-block\">select sum(x) over (partition by property <b>order by x desc</b> ) as 'cumulative total'<br/>  from int_t where property in ('odd','even');<br/>+----+----------+------------------+<br/>| x  | property | cumulative total |<br/>+----+----------+------------------+<br/>| 10 | even     | 10               |<br/>| 8  | even     | 18               |<br/>| 6  | even     | 24               |<br/>| 4  | even     | 28               |<br/>| 2  | even     | 30               |<br/>| 9  | odd      | 9                |<br/>| 7  | odd      | 16               |<br/>| 5  | odd      | 21               |<br/>| 3  | odd      | 24               |<br/>| 1  | odd      | 25               |<br/>+----+----------+------------------+<br/></div>\n\nThe following examples show how to construct a moving window, with a running total taking into account 1 row before\nand 1 row after the current row, within the same partition (all the even values or all the odd values).\nBecause of a restriction in the Impala <span class=\"sql-docs-inline-code\">RANGE</span>  syntax, this type of\nmoving window is possible with the <span class=\"sql-docs-inline-code\">ROWS BETWEEN</span>  clause but not the <span class=\"sql-docs-inline-code\">RANGE BETWEEN</span> \nclause:\n<div class=\"sql-docs-code-block\">select x, property,<br/>  sum(x) over<br/>  (<br/>    partition by property<br/>    <b>order by x</b> <b>rows between 1 preceding and 1 following</b> ) as 'moving total'<br/>  from int_t where property in ('odd','even');<br/>+----+----------+--------------+<br/>| x  | property | moving total |<br/>+----+----------+--------------+<br/>| 2  | even     | 6            |<br/>| 4  | even     | 12           |<br/>| 6  | even     | 18           |<br/>| 8  | even     | 24           |<br/>| 10 | even     | 18           |<br/>| 1  | odd      | 4            |<br/>| 3  | odd      | 9            |<br/>| 5  | odd      | 15           |<br/>| 7  | odd      | 21           |<br/>| 9  | odd      | 16           |<br/>+----+----------+--------------+<br/><br/>-- Doesn't work because of syntax restriction on RANGE clause.<br/>select x, property,<br/>  sum(x) over<br/>  (<br/>    partition by property<br/>    <b>order by x</b> <b>range between 1 preceding and 1 following</b> ) as 'moving total'<br/>from int_t where property in ('odd','even');<br/>ERROR: AnalysisException: RANGE is only supported with both the lower and upper bounds UNBOUNDED or one UNBOUNDED and the other CURRENT ROW.<br/></div></p> <p id=\"../Impala/docs/topics/impala_sum.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <p id=\"../Impala/docs/topics/impala_sum.xml_sum_double\">\n        Due to the way arithmetic on <span class=\"sql-docs-inline-code\">FLOAT</span>  and <span class=\"sql-docs-inline-code\">DOUBLE</span>  columns uses\n        high-performance hardware instructions, and distributed queries can perform these operations in different\n        order for each query, results can vary slightly for aggregate function calls such as <span class=\"sql-docs-inline-code\">SUM()</span> \n        and <span class=\"sql-docs-inline-code\">AVG()</span>  for <span class=\"sql-docs-inline-code\">FLOAT</span>  and <span class=\"sql-docs-inline-code\">DOUBLE</span>  columns, particularly on\n        large data sets where millions or billions of values are summed or averaged. For perfect consistency and\n        repeatability, use the <span class=\"sql-docs-inline-code\">DECIMAL</span>  data type for such operations instead of\n        <span class=\"sql-docs-inline-code\">FLOAT</span>  or <span class=\"sql-docs-inline-code\">DOUBLE</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_sum.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_analytic_functions.xml#analytic_functions\">Impala Analytic Functions</a></p> </div> ","title":"SUM Function"}