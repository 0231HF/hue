{"body":"<div><p>\n      A complex data type that can represent an arbitrary number of ordered elements.\n      The elements can be scalars or another complex type (<span class=\"sql-docs-inline-code\">ARRAY</span> ,\n      <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> ).\n    </p> <p id=\"../Impala/docs/topics/impala_array.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> ARRAY < <span class=\"sql-docs-variable\">type</span> ><br/><br/>type ::= <span class=\"sql-docs-variable\">primitive_type</span> | <span class=\"sql-docs-variable\">complex_type</span> </div><p id=\"../Impala/docs/topics/impala_array.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p id=\"../Impala/docs/topics/impala_array.xml_complex_types_combo\">\n        Because complex types are often used in combination,\n        for example an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span> \n        elements, if you are unfamiliar with the Impala complex types,\n        start with <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for\n        background information and usage examples.\n      </p> <p>\n        The elements of the array have no names. You refer to the value of the array item using the\n        <span class=\"sql-docs-inline-code\">ITEM</span>  pseudocolumn, or its position in the array with the <span class=\"sql-docs-inline-code\">POS</span> \n        pseudocolumn. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#item\"><h4 id=\"../Impala/docs/topics/impala_complex_types.xml_pos\">ITEM and POS Pseudocolumns</h4> </a> for information about\n        these pseudocolumns.\n      </p> <p>\n      Each row can have a different number of elements (including none) in the array for that row.\n    </p> <p>\n        When an array contains items of scalar types, you can use aggregation functions on the array elements without using join notation. For\n        example, you can find the <span class=\"sql-docs-inline-code\">COUNT()</span> , <span class=\"sql-docs-inline-code\">AVG()</span> , <span class=\"sql-docs-inline-code\">SUM()</span> , and so on of numeric array\n        elements, or the <span class=\"sql-docs-inline-code\">MAX()</span>  and <span class=\"sql-docs-inline-code\">MIN()</span>  of any scalar array elements by referring to\n        <span class=\"sql-docs-inline-code\"><span class=\"sql-docs-variable\">table_name</span> .<span class=\"sql-docs-variable\">array_column</span> </span>  in the <span class=\"sql-docs-inline-code\">FROM</span>  clause of the query. When\n        you need to cross-reference values from the array with scalar values from the same row, such as by including a <span class=\"sql-docs-inline-code\">GROUP\n        BY</span>  clause to produce a separate aggregated result for each row, then the join clause is required.\n      </p> <p>\n        A common usage pattern with complex types is to have an array as the top-level type for the column:\n        an array of structs, an array of maps, or an array of arrays.\n        For example, you can model a denormalized table by creating a column that is an <span class=\"sql-docs-inline-code\">ARRAY</span> \n        of <span class=\"sql-docs-inline-code\">STRUCT</span>  elements; each item in the array represents a row from a table that would\n        normally be used in a join query. This kind of data structure lets you essentially denormalize tables by\n        associating multiple rows from one table with the matching row in another table.\n      </p> <p>\n        You typically do not create more than one top-level <span class=\"sql-docs-inline-code\">ARRAY</span>  column, because if there is\n        some relationship between the elements of multiple arrays, it is convenient to model the data as\n        an array of another complex type element (either <span class=\"sql-docs-inline-code\">STRUCT</span>  or <span class=\"sql-docs-inline-code\">MAP</span> ).\n      </p> <p id=\"../Impala/docs/topics/impala_array.xml_complex_types_describe\">\n        You can pass a multi-part qualified name to <span class=\"sql-docs-inline-code\">DESCRIBE</span> \n        to specify an <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> \n        column and visualize its structure as if it were a table.\n        For example, if table <span class=\"sql-docs-inline-code\">T1</span>  contains an <span class=\"sql-docs-inline-code\">ARRAY</span>  column\n        <span class=\"sql-docs-inline-code\">A1</span> , you could issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE t1.a1</span> .\n        If table <span class=\"sql-docs-inline-code\">T1</span>  contained a <span class=\"sql-docs-inline-code\">STRUCT</span>  column <span class=\"sql-docs-inline-code\">S1</span> ,\n        and a field <span class=\"sql-docs-inline-code\">F1</span>  within the <span class=\"sql-docs-inline-code\">STRUCT</span>  was a <span class=\"sql-docs-inline-code\">MAP</span> ,\n        you could issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE t1.s1.f1</span> .\n        An <span class=\"sql-docs-inline-code\">ARRAY</span>  is shown as a two-column table, with\n        <span class=\"sql-docs-inline-code\">ITEM</span>  and <span class=\"sql-docs-inline-code\">POS</span>  columns.\n        A <span class=\"sql-docs-inline-code\">STRUCT</span>  is shown as a table with each field\n        representing a column in the table.\n        A <span class=\"sql-docs-inline-code\">MAP</span>  is shown as a two-column table, with\n        <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span>  columns.\n      </p> <p id=\"../Impala/docs/topics/impala_array.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_array.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <ul></ul> <p id=\"../Impala/docs/topics/impala_array.xml_kudu_blurb\"><b>Kudu considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_array.xml_kudu_unsupported_data_type\">\n        Currently, the data types <span class=\"sql-docs-inline-code\">CHAR</span> , <span class=\"sql-docs-inline-code\">VARCHAR</span> ,\n        <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , and <span class=\"sql-docs-inline-code\">STRUCT</span>  cannot be used with Kudu tables.\n      </p> <p id=\"../Impala/docs/topics/impala_array.xml_example_blurb\"><b>Examples:</b> </p> <div id=\"../Impala/docs/topics/impala_array.xml_complex_type_schema_pointer\" class=\"sql-docs-note\">\n      Many of the complex type examples refer to tables\n      such as <span class=\"sql-docs-inline-code\">CUSTOMER</span>  and <span class=\"sql-docs-inline-code\">REGION</span> \n      adapted from the tables used in the TPC-H benchmark.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_sample_schema\"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>\n      for the table definitions.\n      </div> <p>\n        The following example shows how to construct a table with various kinds of <span class=\"sql-docs-inline-code\">ARRAY</span>  columns,\n        both at the top level and nested within other complex types.\n        Whenever the <span class=\"sql-docs-inline-code\">ARRAY</span>  consists of a scalar value, such as in the <span class=\"sql-docs-inline-code\">PETS</span> \n        column or the <span class=\"sql-docs-inline-code\">CHILDREN</span>  field, you can see that future expansion is limited.\n        For example, you could not easily evolve the schema to record the kind of pet or the child's birthday alongside the name.\n        Therefore, it is more common to use an <span class=\"sql-docs-inline-code\">ARRAY</span>  whose elements are of <span class=\"sql-docs-inline-code\">STRUCT</span>  type,\n        to associate multiple fields with each array element.\n      </p> <div class=\"sql-docs-note\">\n        Practice the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  and query notation for complex type columns\n        using empty tables, until you can visualize a complex data structure and construct corresponding SQL statements reliably.\n      </div> <div class=\"sql-docs-code-block\"></div><p>\n      The following example shows how to examine the structure of a table containing one or more <span class=\"sql-docs-inline-code\">ARRAY</span>  columns by using the\n      <span class=\"sql-docs-inline-code\">DESCRIBE</span>  statement. You can visualize each <span class=\"sql-docs-inline-code\">ARRAY</span>  as its own two-column table, with columns\n      <span class=\"sql-docs-inline-code\">ITEM</span>  and <span class=\"sql-docs-inline-code\">POS</span> .\n    </p> <div class=\"sql-docs-code-block\"></div><p>\n      The following example shows queries involving <span class=\"sql-docs-inline-code\">ARRAY</span>  columns containing elements of scalar or complex types. You\n      <q>unpack</q>  each <span class=\"sql-docs-inline-code\">ARRAY</span>  column by referring to it in a join query, as if it were a separate table with\n      <span class=\"sql-docs-inline-code\">ITEM</span>  and <span class=\"sql-docs-inline-code\">POS</span>  columns. If the array element is a scalar type, you refer to its value using the\n      <span class=\"sql-docs-inline-code\">ITEM</span>  pseudocolumn. If the array element is a <span class=\"sql-docs-inline-code\">STRUCT</span> , you refer to the <span class=\"sql-docs-inline-code\">STRUCT</span>  fields\n      using dot notation and the field names. If the array element is another <span class=\"sql-docs-inline-code\">ARRAY</span>  or a <span class=\"sql-docs-inline-code\">MAP</span> , you use\n      another level of join to unpack the nested collection elements.\n    </p> <div class=\"sql-docs-code-block\"></div><p id=\"../Impala/docs/topics/impala_array.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a>,\n<a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_struct.xml#struct\">STRUCT Complex Type (Impala 2.3 or higher only)</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_map.xml#map\">MAP Complex Type (Impala 2.3 or higher only)</a></p> </div> ","title":"ARRAY Complex Type (Impala 2.3 or higher only)"}