{"body":"<div><p>\n      A data type used in <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER TABLE</span> statements, representing a\n      single true/false choice.\n    </p><p id=\"../Impala/docs/topics/impala_boolean.xml_syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement:\n    </p><div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> BOOLEAN</div><p><b>Range:</b><span class=\"sql-docs-inline-code\">TRUE</span> or <span class=\"sql-docs-inline-code\">FALSE</span>. Do not use quotation marks around the\n      <span class=\"sql-docs-inline-code\">TRUE</span> and <span class=\"sql-docs-inline-code\">FALSE</span> literal values. You can write the literal values in\n      uppercase, lowercase, or mixed case. The values queried from a table are always returned in lowercase,\n      <span class=\"sql-docs-inline-code\">true</span> or <span class=\"sql-docs-inline-code\">false</span>.\n    </p><p><b>Conversions:</b> Impala does not automatically convert any other type to <span class=\"sql-docs-inline-code\">BOOLEAN</span>. All\n      conversions must use an explicit call to the <span class=\"sql-docs-inline-code\">CAST()</span> function.\n    </p><p>\n      You can use <span class=\"sql-docs-inline-code\">CAST()</span> to convert\n\n      any integer or floating-point type to\n      <span class=\"sql-docs-inline-code\">BOOLEAN</span>: a value of 0 represents <span class=\"sql-docs-inline-code\">false</span>, and any non-zero value is converted\n      to <span class=\"sql-docs-inline-code\">true</span>.\n    </p><div class=\"sql-docs-code-block\">SELECT CAST(42 AS BOOLEAN) AS nonzero_int, CAST(99.44 AS BOOLEAN) AS nonzero_decimal,<br/>  CAST(000 AS BOOLEAN) AS zero_int, CAST(0.0 AS BOOLEAN) AS zero_decimal;<br/>+-------------+-----------------+----------+--------------+<br/>| nonzero_int | nonzero_decimal | zero_int | zero_decimal |<br/>+-------------+-----------------+----------+--------------+<br/>| true        | true            | false    | false        |<br/>+-------------+-----------------+----------+--------------+<br/></div><p>\n      When you cast the opposite way, from <span class=\"sql-docs-inline-code\">BOOLEAN</span> to a numeric type,\n      the result becomes either 1 or 0:\n    </p><div class=\"sql-docs-code-block\">SELECT CAST(true AS INT) AS true_int, CAST(true AS DOUBLE) AS true_double,<br/>  CAST(false AS INT) AS false_int, CAST(false AS DOUBLE) AS false_double;<br/>+----------+-------------+-----------+--------------+<br/>| true_int | true_double | false_int | false_double |<br/>+----------+-------------+-----------+--------------+<br/>| 1        | 1           | 0         | 0            |<br/>+----------+-------------+-----------+--------------+<br/></div><p>\n      You can cast <span class=\"sql-docs-inline-code\">DECIMAL</span> values to <span class=\"sql-docs-inline-code\">BOOLEAN</span>, with the same treatment of zero and\n      non-zero values as the other numeric types. You cannot cast a <span class=\"sql-docs-inline-code\">BOOLEAN</span> to a\n      <span class=\"sql-docs-inline-code\">DECIMAL</span>.\n    </p><p>\n      You cannot cast a <span class=\"sql-docs-inline-code\">STRING</span> value to <span class=\"sql-docs-inline-code\">BOOLEAN</span>, although you can cast a\n      <span class=\"sql-docs-inline-code\">BOOLEAN</span> value to <span class=\"sql-docs-inline-code\">STRING</span>, returning <span class=\"sql-docs-inline-code\">'1'</span> for\n      <span class=\"sql-docs-inline-code\">true</span> values and <span class=\"sql-docs-inline-code\">'0'</span> for <span class=\"sql-docs-inline-code\">false</span> values.\n    </p><p>\n      Although you can cast a <span class=\"sql-docs-inline-code\">TIMESTAMP</span> to a <span class=\"sql-docs-inline-code\">BOOLEAN</span> or a\n      <span class=\"sql-docs-inline-code\">BOOLEAN</span> to a <span class=\"sql-docs-inline-code\">TIMESTAMP</span>, the results are unlikely to be useful. Any non-zero\n      <span class=\"sql-docs-inline-code\">TIMESTAMP</span> (that is, any value other than <span class=\"sql-docs-inline-code\">1970-01-01 00:00:00</span>) becomes\n      <span class=\"sql-docs-inline-code\">TRUE</span> when converted to <span class=\"sql-docs-inline-code\">BOOLEAN</span>, while <span class=\"sql-docs-inline-code\">1970-01-01 00:00:00</span>\n      becomes <span class=\"sql-docs-inline-code\">FALSE</span>. A value of <span class=\"sql-docs-inline-code\">FALSE</span> becomes <span class=\"sql-docs-inline-code\">1970-01-01\n      00:00:00</span> when converted to <span class=\"sql-docs-inline-code\">BOOLEAN</span>, and <span class=\"sql-docs-inline-code\">TRUE</span> becomes one second\n      past this epoch date, that is, <span class=\"sql-docs-inline-code\">1970-01-01 00:00:01</span>.\n    </p><p id=\"../Impala/docs/topics/impala_boolean.xml_null_null_arguments\"><b>NULL considerations:</b> An expression of this type produces a <span class=\"sql-docs-inline-code\">NULL</span> value if any\n        argument of the expression is <span class=\"sql-docs-inline-code\">NULL</span>.\n      </p><p id=\"../Impala/docs/topics/impala_boolean.xml_partitioning_blurb\"><b>Partitioning:</b></p><p>\n      Do not use a <span class=\"sql-docs-inline-code\">BOOLEAN</span> column as a partition key. Although you can create such a table,\n      subsequent operations produce errors:\n    </p><div class=\"sql-docs-code-block\">[localhost:21000] > create table truth_table (assertion string) partitioned by (truth boolean);<br/>[localhost:21000] > insert into truth_table values ('Pigs can fly',false);<br/>ERROR: AnalysisException: INSERT into table with BOOLEAN partition column (truth) is not supported: partitioning.truth_table<br/></div><p id=\"../Impala/docs/topics/impala_boolean.xml_example_blurb\"><b>Examples:</b></p><div class=\"sql-docs-code-block\">SELECT 1 < 2;<br/>SELECT 2 = 5;<br/>SELECT 100 < NULL, 100 > NULL;<br/>CREATE TABLE assertions (claim STRING, really BOOLEAN);<br/>INSERT INTO assertions VALUES<br/>  (\"1 is less than 2\", 1 < 2),<br/>  (\"2 is the same as 5\", 2 = 5),<br/>  (\"Grass is green\", true),<br/>  (\"The moon is made of green cheese\", false);<br/>SELECT claim FROM assertions WHERE really = TRUE;<br/></div><p id=\"../Impala/docs/topics/impala_boolean.xml_hbase_ok\"><b>HBase considerations:</b> This data type is fully compatible with HBase tables.\n      </p><p id=\"../Impala/docs/topics/impala_boolean.xml_parquet_ok\"><b>Parquet considerations:</b> This type is fully compatible with Parquet tables.\n      </p><p id=\"../Impala/docs/topics/impala_boolean.xml_text_bulky\"><b>Text table considerations:</b> Values of this type are potentially larger in text tables than in tables\n        using Parquet or other binary formats.\n      </p><p id=\"../Impala/docs/topics/impala_boolean.xml_column_stats_constant\"><b>Column statistics considerations:</b> Because this type has a fixed size, the maximum and average size\n        fields are always filled in for column statistics, even before you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span>\n        statement.\n      </p><p id=\"../Impala/docs/topics/impala_boolean.xml_kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"../Impala/docs/topics/impala_boolean.xml_kudu_non_pk_data_type\">\n        Currently, the data types <span class=\"sql-docs-inline-code\">BOOLEAN</span>, <span class=\"sql-docs-inline-code\">FLOAT</span>,\n        and <span class=\"sql-docs-inline-code\">DOUBLE</span> cannot be used for primary key columns in Kudu tables.\n      </p><p><b>Related information:</b><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#boolean_literals\"><h4>Boolean Literals</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#operators\">SQL Operators</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_conditional_functions.xml#conditional_functions\">Impala Conditional Functions</a></p></div>","title":"BOOLEAN Data Type"}