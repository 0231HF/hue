{"body":"<div><p>\n      Impala supports inserting into tables and partitions that you create with the Impala <span class=\"sql-docs-inline-code\">CREATE\n      TABLE</span>  statement, or pre-defined tables and partitions created through Hive.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\">[<span class=\"sql-docs-variable\">with_clause</span> ]<br/>  INSERT <span class=\"sql-docs-inline-code\">[<span class=\"sql-docs-variable\">hint_clause</span> ]</span> { INTO | OVERWRITE } [TABLE] <span class=\"sql-docs-variable\">table_name</span> [(<span class=\"sql-docs-variable\">column_list</span> )]<br/>  [ PARTITION (<span class=\"sql-docs-variable\">partition_clause</span> )]<br/>{<br/>    [<span class=\"sql-docs-variable\">hint_clause</span> ] <span class=\"sql-docs-variable\">select_statement</span> | VALUES (<span class=\"sql-docs-variable\">value</span> [, <span class=\"sql-docs-variable\">value</span> ...]) [, (<span class=\"sql-docs-variable\">value</span> [, <span class=\"sql-docs-variable\">value</span> ...]) ...]<br/>}<br/><br/>partition_clause ::= <span class=\"sql-docs-variable\">col_name</span> [= <span class=\"sql-docs-variable\">constant</span> ] [, <span class=\"sql-docs-variable\">col_name</span> [= <span class=\"sql-docs-variable\">constant</span> ] ...]<br/><br/>hint_clause ::=<br/>  <span class=\"sql-docs-variable\">hint_with_dashes</span> |<br/>  <span class=\"sql-docs-variable\">hint_with_cstyle_delimiters</span> |<br/>  <span class=\"sql-docs-variable\">hint_with_brackets</span> hint_with_dashes ::= -- +SHUFFLE | -- +NOSHUFFLE <span class=\"sql-docs-inline-code\">-- +CLUSTERED</span> hint_with_cstyle_comments ::= /* +SHUFFLE */ | /* +NOSHUFFLE */ <span class=\"sql-docs-inline-code\">| /* +CLUSTERED */</span> hint_with_brackets ::= [SHUFFLE] | [NOSHUFFLE]<br/>  (With this hint format, the square brackets are part of the syntax.)<br/></div><div id=\"../Impala/docs/topics/impala_insert.xml_square_bracket_hint_caveat\" class=\"sql-docs-note\">\n        The square bracket style of hint is now deprecated and might be removed in\n        a future release. For that reason, any newly added hints are not available\n        with the square bracket syntax.\n      </div> <p><b>Appending or replacing (INTO and OVERWRITE clauses):</b> </p> <p>\n      The <span class=\"sql-docs-inline-code\">INSERT INTO</span>  syntax appends data to a table. The existing data files are left as-is, and\n      the inserted data is put into one or more new data files.\n    </p> <p>\n      The <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  syntax replaces the data in a table.\n\n      Currently, the overwritten data files are deleted immediately; they do not go through the HDFS trash\n      mechanism.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_complex_types_blurb\"><b>Complex type considerations:</b> </p> <p>\n      The <span class=\"sql-docs-inline-code\">INSERT</span>  statement currently does not support writing data files\n      containing complex types (<span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , and <span class=\"sql-docs-inline-code\">MAP</span> ).\n      To prepare Parquet data for such tables, you generate the data files outside Impala and then\n      use <span class=\"sql-docs-inline-code\">LOAD DATA</span>  or <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>  to associate those\n      data files with the table. Currently, such tables must use the Parquet file format.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for details about working with complex types.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_kudu_blurb\"><b>Kudu considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_kudu_no_insert_overwrite\">\n        Currently, the <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  syntax cannot be used with Kudu tables.\n      </p> <p>\n      Kudu tables require a unique primary key for each row. If an <span class=\"sql-docs-inline-code\">INSERT</span> \n      statement attempts to insert a row with the same values for the primary key columns\n      as an existing row, that row is discarded and the insert operation continues.\n      When rows are discarded due to duplicate primary keys, the statement finishes\n      with a warning, not an error. (This is a change from early releases of Kudu\n      where the default was to return in error in such cases, and the syntax\n      <span class=\"sql-docs-inline-code\">INSERT IGNORE</span>  was required to make the statement succeed.\n      The <span class=\"sql-docs-inline-code\">IGNORE</span>  clause is no longer part of the <span class=\"sql-docs-inline-code\">INSERT</span> \n      syntax.)\n    </p> <p>\n      For situations where you prefer to replace rows with duplicate primary key values,\n      rather than discarding the new data, you can use the <span class=\"sql-docs-inline-code\">UPSERT</span> \n      statement instead of <span class=\"sql-docs-inline-code\">INSERT</span> . <span class=\"sql-docs-inline-code\">UPSERT</span>  inserts\n      rows that are entirely new, and for rows that match an existing primary key in the\n      table, the non-primary-key columns are updated to reflect the values in the\n      <q>upserted</q>  data.\n    </p> <p>\n      If you really want to store new rows, not replace existing ones, but cannot do so\n      because of the primary key uniqueness constraint, consider recreating the table\n      with additional columns included in the primary key.\n    </p> <p>\n      See <span>impala kudu</span> for more details about using Impala with Kudu.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n      Impala currently supports:\n    </p> <ul><li>\n        Copy data from another table using <span class=\"sql-docs-inline-code\">SELECT</span>  query. In Impala 1.2.1 and higher, you can\n        combine <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  and <span class=\"sql-docs-inline-code\">INSERT</span>  operations into a single step with the\n        <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>  syntax, which bypasses the actual <span class=\"sql-docs-inline-code\">INSERT</span>  keyword.\n      </li> <li>\n        An optional <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_with.xml#with\">WITH clause</a> before the\n        <span class=\"sql-docs-inline-code\">INSERT</span>  keyword, to define a subquery referenced in the <span class=\"sql-docs-inline-code\">SELECT</span>  portion.\n      </li> <li>\n        Create one or more new rows using constant expressions through <span class=\"sql-docs-inline-code\">VALUES</span>  clause. (The\n        <span class=\"sql-docs-inline-code\">VALUES</span>  clause was added in Impala 1.0.1.)\n      </li> <li><p>\n          By default, the first column of each newly inserted row goes into the first column of the table, the\n          second column into the second column, and so on.\n        </p> <p>\n          You can also specify the columns to be inserted, an arbitrarily ordered subset of the columns in the\n          destination table, by specifying a column list immediately after the name of the destination table. This\n          feature lets you adjust the inserted columns to match the layout of a <span class=\"sql-docs-inline-code\">SELECT</span>  statement,\n          rather than the other way around. (This feature was added in Impala 1.1.)\n        </p> <p>\n          The number of columns mentioned in the column list (known as the <q>column permutation</q> ) must match\n          the number of columns in the <span class=\"sql-docs-inline-code\">SELECT</span>  list or the <span class=\"sql-docs-inline-code\">VALUES</span>  tuples. The\n          order of columns in the column permutation can be different than in the underlying table, and the columns\n          of each input row are reordered to match. If the number of columns in the column permutation is less than\n          in the destination table, all unmentioned columns are set to <span class=\"sql-docs-inline-code\">NULL</span> .\n        </p> </li> <li>\n        An optional hint clause immediately either before the <span class=\"sql-docs-inline-code\">SELECT</span>  keyword or after the\n        <span class=\"sql-docs-inline-code\">INSERT</span>  keyword, to fine-tune the behavior when doing an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> \n        operation into partitioned Parquet tables. The hint clause cannot be specified in multiple places.\n        The hint keywords are <span class=\"sql-docs-inline-code\">[SHUFFLE]</span>  and <span class=\"sql-docs-inline-code\">[NOSHUFFLE]</span> , including the square brackets.\n        Inserting into partitioned Parquet tables can be a resource-intensive operation because it potentially\n        involves many files being written to HDFS simultaneously, and separate\n        <span class=\"sql-docs-inline-code\">large</span>  memory buffers being allocated to buffer the data for each\n        partition. For usage details, see <span>parquet etl</span>.\n      </li> </ul> <div class=\"sql-docs-note\"><ul><li>\n          Insert commands that partition or add files result in changes to Hive metadata. Because Impala uses Hive\n          metadata, such changes may necessitate a metadata refresh. For more information, see the\n          <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_refresh.xml#refresh\">REFRESH</a> function.\n        </li> <li>\n          Currently, Impala can only insert data into tables that use the text and Parquet formats. For other file\n          formats, insert the data using Hive and use Impala to query it.\n        </li> <li>\n          As an alternative to the <span class=\"sql-docs-inline-code\">INSERT</span>  statement, if you have existing data files elsewhere in\n          HDFS, the <span class=\"sql-docs-inline-code\">LOAD DATA</span>  statement can move those files into a table. This statement works\n          with tables of any file format.\n        </li> </ul> </div> <p id=\"../Impala/docs/topics/impala_insert.xml_dml_blurb\"><b>Statement type:</b>  DML (but still affected by\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_sync_ddl.xml#sync_ddl\">SYNC_DDL</a> query option)\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n      When you insert the results of an expression, particularly of a built-in function call, into a small numeric\n      column such as <span class=\"sql-docs-inline-code\">INT</span> , <span class=\"sql-docs-inline-code\">SMALLINT</span> , <span class=\"sql-docs-inline-code\">TINYINT</span> , or\n      <span class=\"sql-docs-inline-code\">FLOAT</span> , you might need to use a <span class=\"sql-docs-inline-code\">CAST()</span>  expression to coerce values into the\n      appropriate type. Impala does not automatically convert from a larger type to a smaller one. For example, to\n      insert cosine values into a <span class=\"sql-docs-inline-code\">FLOAT</span>  column, write <span class=\"sql-docs-inline-code\">CAST(COS(angle) AS FLOAT)</span> \n      in the <span class=\"sql-docs-inline-code\">INSERT</span>  statement to make the conversion explicit.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_file_format_blurb\"><b>File format considerations:</b> </p> <p>\n      Because Impala can read certain file formats that it cannot write,\n      the <span class=\"sql-docs-inline-code\">INSERT</span>  statement does not work for all kinds of\n      Impala tables. See <span>file formats</span>\n      for details about what file formats are supported by the\n      <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n    </p> <p id=\"../Impala/docs/topics/impala_insert.xml_insert_parquet_blocksize\">\n        Any <span class=\"sql-docs-inline-code\">INSERT</span>  statement for a Parquet table requires enough free space in the HDFS filesystem\n        to write one block. Because Parquet data files use a block size of 1 GB by default, an\n        <span class=\"sql-docs-inline-code\">INSERT</span>  might fail (even for a very small amount of data) if your HDFS is running low on\n        space.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_sync_ddl_blurb\">\n        If you connect to different Impala nodes within an <span class=\"sql-docs-inline-code\">impala-shell</span>  session for\n        load-balancing purposes, you can enable the <span class=\"sql-docs-inline-code\">SYNC_DDL</span>  query option to make each DDL\n        statement wait before returning, until the new or changed metadata has been received by all the Impala\n        nodes. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_sync_ddl.xml#sync_ddl\">SYNC_DDL Query Option</a> for details.\n      </p> <div id=\"../Impala/docs/topics/impala_insert.xml_compute_stats_next\" class=\"sql-docs-note\">\n        After adding or replacing data in a table used in performance-critical queries, issue a <span class=\"sql-docs-inline-code\">COMPUTE\n        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a\n        table after any <span class=\"sql-docs-inline-code\">INSERT</span> , <span class=\"sql-docs-inline-code\">LOAD DATA</span> , or <span class=\"sql-docs-inline-code\">CREATE TABLE AS\n        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class=\"sql-docs-inline-code\">REFRESH\n        <span class=\"sql-docs-variable\">table_name</span> </span>  in Impala. This technique is especially important for tables that\n        are very large, used in join queries, or both.\n      </div> <p id=\"../Impala/docs/topics/impala_insert.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      The following example sets up new tables with the same definition as the <span class=\"sql-docs-inline-code\">TAB1</span>  table from the\n      <span>Tutorial</span> section, using different file\n      formats, and demonstrates inserting data into the tables created with the <span class=\"sql-docs-inline-code\">STORED AS TEXTFILE</span> \n      and <span class=\"sql-docs-inline-code\">STORED AS PARQUET</span>  clauses:\n    </p> <div class=\"sql-docs-code-block\">CREATE DATABASE IF NOT EXISTS file_formats;<br/>USE file_formats;<br/><br/>DROP TABLE IF EXISTS text_table;<br/>CREATE TABLE text_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS TEXTFILE;<br/><br/>DROP TABLE IF EXISTS parquet_table;<br/>CREATE TABLE parquet_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS PARQUET;</div><p>\n      With the <span class=\"sql-docs-inline-code\">INSERT INTO TABLE</span>  syntax, each new set of inserted rows is appended to any existing\n      data in the table. This is how you would record small amounts of data that arrive continuously, or ingest new\n      batches of data alongside the existing data. For example, after running 2 <span class=\"sql-docs-inline-code\">INSERT INTO TABLE</span> \n      statements with 5 rows each, the table contains 10 rows total:\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > insert into table text_table select * from default.tab1;<br/>Inserted 5 rows in 0.41s<br/><br/>[localhost:21000] > insert into table text_table select * from default.tab1;<br/>Inserted 5 rows in 0.46s<br/><br/>[localhost:21000] > select count(*) from text_table;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 10       |<br/>+----------+<br/>Returned 1 row(s) in 0.26s</div><p>\n      With the <span class=\"sql-docs-inline-code\">INSERT OVERWRITE TABLE</span>  syntax, each new set of inserted rows replaces any existing\n      data in the table. This is how you load data to query in a data warehousing scenario where you analyze just\n      the data for a particular day, quarter, and so on, discarding the previous data each time. You might keep the\n      entire set of data in one raw table, and transfer and transform certain rows into a more compact and\n      efficient form to perform intensive analysis on that subset.\n    </p> <p>\n      For example, here we insert 5 rows into a table using the <span class=\"sql-docs-inline-code\">INSERT INTO</span>  clause, then replace\n      the data by inserting 3 rows with the <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  clause. Afterward, the table only\n      contains the 3 rows from the final <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n    </p> <div class=\"sql-docs-code-block\">[localhost:21000] > insert into table parquet_table select * from default.tab1;<br/>Inserted 5 rows in 0.35s<br/><br/>[localhost:21000] > insert overwrite table parquet_table select * from default.tab1 limit 3;<br/>Inserted 3 rows in 0.43s<br/>[localhost:21000] > select count(*) from parquet_table;<br/>+----------+<br/>| count(*) |<br/>+----------+<br/>| 3        |<br/>+----------+<br/>Returned 1 row(s) in 0.43s</div><p>\n      The <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#values\">VALUES</a></span>  clause lets you insert one or more\n      rows by specifying constant values for all the columns. The number, types, and order of the expressions must\n      match the table definition.\n    </p> <div id=\"../Impala/docs/topics/impala_insert.xml_insert_values_warning\" class=\"sql-docs-note\">\n      The <span class=\"sql-docs-inline-code\">INSERT ... VALUES</span>  technique is not suitable for loading large quantities of data into\n      HDFS-based tables, because the insert operations cannot be parallelized, and each one produces a separate\n      data file. Use it for setting up small dimension tables or tiny amounts of data for experimenting with SQL\n      syntax, or with HBase tables. Do not use it for large ETL jobs or benchmark tests for load operations. Do not\n      run scripts with thousands of <span class=\"sql-docs-inline-code\">INSERT ... VALUES</span>  statements that insert a single row each\n      time. If you do run <span class=\"sql-docs-inline-code\">INSERT ... VALUES</span>  operations to load data into a staging table as one\n      stage in an ETL pipeline, include multiple row values if possible within each <span class=\"sql-docs-inline-code\">VALUES</span>  clause,\n      and use a separate database to make cleanup easier if the operation does produce many tiny files.\n    </div> <p>\n      The following example shows how to insert one row or multiple rows, with expressions of different types,\n      using literal values, expressions, and function return values:\n    </p> <div class=\"sql-docs-code-block\">create table val_test_1 (c1 int, c2 float, c3 string, c4 boolean, c5 timestamp);<br/>insert into val_test_1 values (100, 99.9/10, 'abc', true, now());<br/>create table val_test_2 (id int, token string);<br/>insert overwrite val_test_2 values (1, 'a'), (2, 'b'), (-1,'xyzzy');</div><p>\n      These examples show the type of <q>not implemented</q>  error that you see when attempting to insert data into\n      a table with a file format that Impala currently does not write to:\n    </p> <div class=\"sql-docs-code-block\">DROP TABLE IF EXISTS sequence_table;<br/>CREATE TABLE sequence_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS SEQUENCEFILE;<br/><br/>DROP TABLE IF EXISTS rc_table;<br/>CREATE TABLE rc_table<br/>( id INT, col_1 BOOLEAN, col_2 DOUBLE, col_3 TIMESTAMP )<br/>STORED AS RCFILE;<br/><br/>[localhost:21000] > insert into table rc_table select * from default.tab1;<br/>Remote error<br/>Backend 0:RC_FILE not implemented.<br/><br/>[localhost:21000] > insert into table sequence_table select * from default.tab1;<br/>Remote error<br/>Backend 0:SEQUENCE_FILE not implemented. </div><p>\n      The following examples show how you can copy the data in all the columns from one table to another, copy the\n      data from only some columns, or specify the columns in the select list in a different order than they\n      actually appear in the table:\n    </p> <div class=\"sql-docs-code-block\">-- Start with 2 identical tables.<br/>create table t1 (c1 int, c2 int);<br/>create table t2 like t1;<br/><br/>-- If there is no () part after the destination table name,<br/>-- all columns must be specified, either as * or by name.<br/>insert into t2 select * from t1;<br/>insert into t2 select c1, c2 from t1;<br/><br/>-- With the () notation following the destination table name,<br/>-- you can omit columns (all values for that column are NULL<br/>-- in the destination table), and/or reorder the values<br/>-- selected from the source table. This is the \"column permutation\" feature.<br/>insert into t2 (c1) select c1 from t1;<br/>insert into t2 (c2, c1) select c1, c2 from t1;<br/><br/>-- The column names can be entirely different in the source and destination tables.<br/>-- You can copy any columns, not just the corresponding ones, from the source table.<br/>-- But the number and type of selected columns must match the columns mentioned in the () part.<br/>alter table t2 replace columns (x int, y int);<br/>insert into t2 (y) select c1 from t1;<br/></div><p id=\"../Impala/docs/topics/impala_insert.xml_insert_sort_blurb\"><b>Sorting considerations:</b>  Although you can specify an <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause in an\n        <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span>  statement, any <span class=\"sql-docs-inline-code\">ORDER BY</span>  clause is ignored and the\n        results are not necessarily sorted. An <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span>  operation potentially creates\n        many different data files, prepared on different data nodes, and therefore the notion of the data being\n        stored in sorted order is impractical.\n      </p> <p><b>Concurrency considerations:</b>  Each <span class=\"sql-docs-inline-code\">INSERT</span>  operation creates new data files with unique\n      names, so you can run multiple <span class=\"sql-docs-inline-code\">INSERT INTO</span>  statements simultaneously without filename\n      conflicts.\n\n      While data is being inserted into an Impala table, the data is staged temporarily in a subdirectory inside\n      the data directory; during this period, you cannot issue queries against that table in Hive. If an\n      <span class=\"sql-docs-inline-code\">INSERT</span>  operation fails, the temporary data file and the subdirectory could be left behind in\n      the data directory. If so, remove the relevant subdirectory and any data files it contains manually, by\n      issuing an <span class=\"sql-docs-inline-code\">hdfs dfs -rm -r</span>  command, specifying the full path of the work subdirectory, whose\n      name ends in <span class=\"sql-docs-inline-code\">_dir</span> .\n    </p> </div> <div id=\"../Impala/docs/topics/impala_insert.xml_values\"><h4>VALUES Clause</h4> <div><p>\n        The <span class=\"sql-docs-inline-code\">VALUES</span>  clause is a general-purpose way to specify the columns of one or more rows,\n        typically within an <span class=\"sql-docs-inline-code\"><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#insert\">INSERT</a></span>  statement.\n      </p> <div class=\"sql-docs-note\"></div> <p>\n        The following examples illustrate:\n      </p> <ul><li>\n          How to insert a single row using a <span class=\"sql-docs-inline-code\">VALUES</span>  clause.\n        </li> <li>\n          How to insert multiple rows using a <span class=\"sql-docs-inline-code\">VALUES</span>  clause.\n        </li> <li>\n          How the row or rows from a <span class=\"sql-docs-inline-code\">VALUES</span>  clause can be appended to a table through\n          <span class=\"sql-docs-inline-code\">INSERT INTO</span> , or replace the contents of the table through <span class=\"sql-docs-inline-code\">INSERT\n          OVERWRITE</span> .\n        </li> <li>\n          How the entries in a <span class=\"sql-docs-inline-code\">VALUES</span>  clause can be literals, function results, or any other kind\n          of expression. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#literals\">Literals</a> for the notation to use for literal\n          values, especially <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#string_literals\"><h4>String Literals</h4> </a> for quoting and escaping\n          conventions for strings. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_operators.xml#operators\">SQL Operators</a> and\n          <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_functions.xml#builtins\">Impala Built-In Functions</a> for other things you can include in expressions with the\n          <span class=\"sql-docs-inline-code\">VALUES</span>  clause.\n        </li> </ul> <div class=\"sql-docs-code-block\">[localhost:21000] > describe val_example;<br/>Query: describe val_example<br/>Query finished, fetching results ...<br/>+-------+---------+---------+<br/>| name  | type    | comment |<br/>+-------+---------+---------+<br/>| id    | int     |         |<br/>| col_1 | boolean |         |<br/>| col_2 | double  |         |<br/>+-------+---------+---------+<br/><br/>[localhost:21000] > insert into val_example values (1,true,100.0);<br/>Inserted 1 rows in 0.30s<br/>[localhost:21000] > select * from val_example;<br/>+----+-------+-------+<br/>| id | col_1 | col_2 |<br/>+----+-------+-------+<br/>| 1  | true  | 100   |<br/>+----+-------+-------+<br/><br/>[localhost:21000] > insert overwrite val_example values (10,false,pow(2,5)), (50,true,10/3);<br/>Inserted 2 rows in 0.16s<br/>[localhost:21000] > select * from val_example;<br/>+----+-------+-------------------+<br/>| id | col_1 | col_2             |<br/>+----+-------+-------------------+<br/>| 10 | false | 32                |<br/>| 50 | true  | 3.333333333333333 |<br/>+----+-------+-------------------+</div><p>\n        When used in an <span class=\"sql-docs-inline-code\">INSERT</span>  statement, the Impala <span class=\"sql-docs-inline-code\">VALUES</span>  clause can specify\n        some or all of the columns in the destination table, and the columns can be specified in a different order\n        than they actually appear in the table. To specify a different set or order of columns than in the table,\n        use the syntax:\n      </p> <div class=\"sql-docs-code-block\">INSERT INTO <span class=\"sql-docs-variable\">destination</span> (<span class=\"sql-docs-variable\">col_x</span> , <span class=\"sql-docs-variable\">col_y</span> , <span class=\"sql-docs-variable\">col_z</span> )<br/>  VALUES<br/>  (<span class=\"sql-docs-variable\">val_x</span> , <span class=\"sql-docs-variable\">val_y</span> , <span class=\"sql-docs-variable\">val_z</span> );<br/></div><p>\n        Any columns in the table that are not listed in the <span class=\"sql-docs-inline-code\">INSERT</span>  statement are set to\n        <span class=\"sql-docs-inline-code\">NULL</span> .\n      </p> <p>\n        To use a <span class=\"sql-docs-inline-code\">VALUES</span>  clause like a table in other statements, wrap it in parentheses and use\n        <span class=\"sql-docs-inline-code\">AS</span>  clauses to specify aliases for the entire object and any columns you need to refer to:\n      </p> <div class=\"sql-docs-code-block\">[localhost:21000] > select * from (values(4,5,6),(7,8,9)) as t;<br/>+---+---+---+<br/>| 4 | 5 | 6 |<br/>+---+---+---+<br/>| 4 | 5 | 6 |<br/>| 7 | 8 | 9 |<br/>+---+---+---+<br/>[localhost:21000] > select * from (values(1 as c1, true as c2, 'abc' as c3),(100,false,'xyz')) as t;<br/>+-----+-------+-----+<br/>| c1  | c2    | c3  |<br/>+-----+-------+-----+<br/>| 1   | true  | abc |<br/>| 100 | false | xyz |<br/>+-----+-------+-----+</div><p>\n        For example, you might use a tiny table constructed like this from constant literals or function return\n        values as part of a longer statement involving joins or <span class=\"sql-docs-inline-code\">UNION ALL</span> .\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_hdfs_blurb\"><b>HDFS considerations:</b> </p> <p>\n        Impala physically writes all inserted files under the ownership of its default user, typically\n        <span class=\"sql-docs-inline-code\">impala</span> . Therefore, this user must have HDFS write permission in the corresponding table\n        directory.\n      </p> <p>\n        The permission requirement is independent of the authorization performed by the Sentry framework. (If the\n        connected user is not authorized to insert into a table, Sentry blocks that operation immediately,\n        regardless of the privileges available to the <span class=\"sql-docs-inline-code\">impala</span>  user.) Files created by Impala are\n        not owned by and do not inherit permissions from the connected user.\n      </p> <p>\n        The number of data files produced by an <span class=\"sql-docs-inline-code\">INSERT</span>  statement depends on the size of the\n        cluster, the number of data blocks that are processed, the partition key columns in a partitioned table,\n        and the mechanism Impala uses for dividing the work in parallel. Do not assume that an\n        <span class=\"sql-docs-inline-code\">INSERT</span>  statement will produce some particular number of output files. In case of\n        performance issues with data written by Impala, check that the output files do not suffer from issues such\n        as many tiny files or many tiny partitions. (In the Hadoop context, even files or partitions of a few tens\n        of megabytes are considered <q>tiny</q> .)\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_insert_hidden_work_directory\">\n        The <span class=\"sql-docs-inline-code\">INSERT</span>  statement has always left behind a hidden work directory inside the data\n        directory of the table. Formerly, this hidden work directory was named\n        <span class=\"sql-docs-variable\">.impala_insert_staging</span>  . In Impala 2.0.1 and later, this directory name is changed to\n        <span class=\"sql-docs-variable\">_impala_insert_staging</span>  . (While HDFS tools are expected to treat names beginning\n        either with underscore and dot as hidden, in practice names beginning with an underscore are more widely\n        supported.) If you have any scripts, cleanup jobs, and so on that rely on the name of this work directory,\n        adjust them to use the new name.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_hbase_blurb\"><b>HBase considerations:</b> </p> <p>\n        You can use the <span class=\"sql-docs-inline-code\">INSERT</span>  statement with HBase tables as follows:\n      </p> <ul><li><p>\n            You can insert a single row or a small set of rows into an HBase table with the <span class=\"sql-docs-inline-code\">INSERT ...\n            VALUES</span>  syntax. This is a good use case for HBase tables with Impala, because HBase tables are\n            not subject to the same kind of fragmentation from many small insert operations as HDFS tables are.\n          </p> </li> <li><p>\n            You can insert any number of rows at once into an HBase table using the <span class=\"sql-docs-inline-code\">INSERT ...\n            SELECT</span>  syntax.\n          </p> </li> <li><p>\n            If more than one inserted row has the same value for the HBase key column, only the last inserted row\n            with that value is visible to Impala queries. You can take advantage of this fact with <span class=\"sql-docs-inline-code\">INSERT\n            ... VALUES</span>  statements to effectively update rows one at a time, by inserting new rows with the\n            same key values as existing rows. Be aware that after an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span>  operation\n            copying from an HDFS table, the HBase table might contain fewer rows than were inserted, if the key\n            column in the source table contained duplicate values.\n          </p> </li> <li><p>\n            You cannot <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  into an HBase table. New rows are always appended.\n          </p> </li> <li><p>\n            When you create an Impala or Hive table that maps to an HBase table, the column order you specify with\n            the <span class=\"sql-docs-inline-code\">INSERT</span>  statement might be different than the order you declare with the\n            <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement. Behind the scenes, HBase arranges the columns based on how\n            they are divided into column families. This might cause a mismatch during insert operations, especially\n            if you use the syntax <span class=\"sql-docs-inline-code\">INSERT INTO <span class=\"sql-docs-variable\">hbase_table</span>  SELECT * FROM\n            <span class=\"sql-docs-variable\">hdfs_table</span> </span> . Before inserting data, verify the column order by issuing a\n            <span class=\"sql-docs-inline-code\">DESCRIBE</span>  statement for the table, and adjust the order of the select list in the\n            <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n          </p> </li> </ul> <p>\n        See <span>impala hbase</span> for more details about using Impala with HBase.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_s3_blurb\"><b>Amazon S3 considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_s3_dml\">\n        In Impala 2.6 and higher, the Impala DML statements (<span class=\"sql-docs-inline-code\">INSERT</span> , <span class=\"sql-docs-inline-code\">LOAD DATA</span> ,\n        and <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the\n        Amazon Simple Storage Service (S3).\n        The syntax of the DML statements is the same as for any other tables, because the S3 location for tables and\n        partitions is specified by an <span class=\"sql-docs-inline-code\">s3a://</span>  prefix in the\n        <span class=\"sql-docs-inline-code\">LOCATION</span>  attribute of\n        <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  or <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  statements.\n        If you bring data into S3 using the normal S3 transfer mechanisms instead of Impala DML statements,\n        issue a <span class=\"sql-docs-inline-code\">REFRESH</span>  statement for the table before using Impala to query the S3 data.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_s3_dml_performance\">\n        Because of differences between S3 and traditional filesystems, DML operations\n        for S3 tables can take longer than for tables on HDFS. For example, both the\n        <span class=\"sql-docs-inline-code\">LOAD DATA</span>  statement and the final stage of the <span class=\"sql-docs-inline-code\">INSERT</span> \n        and <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span>  statements involve moving files from one directory\n        to another. (In the case of <span class=\"sql-docs-inline-code\">INSERT</span>  and <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> ,\n        the files are moved from a temporary staging directory to the final destination directory.)\n        Because S3 does not support a <q>rename</q>  operation for existing objects, in these cases Impala\n        actually copies the data files from one location to another and then removes the original files.\n        In Impala 2.6, the <span class=\"sql-docs-inline-code\">S3_SKIP_INSERT_STAGING</span>  query option provides a way\n        to speed up <span class=\"sql-docs-inline-code\">INSERT</span>  statements for S3 tables and partitions, with the tradeoff\n        that a problem during statement execution could leave data in an inconsistent state.\n        It does not apply to <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  or <span class=\"sql-docs-inline-code\">LOAD DATA</span>  statements.\n        See <span>s3 skip insert staging</span> for details.\n      </p> <p>See <span>s3</span> for details about reading and writing S3 data with Impala.</p> <p id=\"../Impala/docs/topics/impala_insert.xml_adls_blurb\"><b>ADLS considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_adls_dml\">\n        In Impala 2.9 and higher, the Impala DML statements (<span class=\"sql-docs-inline-code\">INSERT</span> , <span class=\"sql-docs-inline-code\">LOAD DATA</span> ,\n        and <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> ) can write data into a table or partition that resides in the\n        Azure Data Lake Store (ADLS).\n        The syntax of the DML statements is the same as for any other tables, because the ADLS location for tables and\n        partitions is specified by an <span class=\"sql-docs-inline-code\">adl://</span>  prefix in the\n        <span class=\"sql-docs-inline-code\">LOCATION</span>  attribute of\n        <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  or <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  statements.\n        If you bring data into ADLS using the normal ADLS transfer mechanisms instead of Impala DML statements,\n        issue a <span class=\"sql-docs-inline-code\">REFRESH</span>  statement for the table before using Impala to query the ADLS data.\n      </p> <p>See <span>adls</span> for details about reading and writing ADLS data with Impala.</p> <p id=\"../Impala/docs/topics/impala_insert.xml_security_blurb\"><b>Security considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_redaction_yes\">\n        If these statements in your environment contain sensitive literal values such as credit card numbers or tax\n        identifiers, Impala can redact this sensitive information when displaying the statements in log files and\n        other administrative contexts. See  for details.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_cancel_blurb_yes\"><b>Cancellation:</b>  Can be cancelled. To cancel this statement, use Ctrl-C from the\n        <span class=\"sql-docs-inline-code\">impala-shell</span>  interpreter, the  button from the\n         page in Hue, or  from the list of\n        in-flight queries (for a particular node) on the  tab in the Impala web UI\n        (port 25000).\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_permissions_blurb\"><b>HDFS permissions:</b> </p> <p>\n        The user ID that the <span class=\"sql-docs-inline-code\">impalad</span>  daemon runs under,\n        typically the <span class=\"sql-docs-inline-code\">impala</span>  user, must have read\n        permission for the files in the source directory of an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> \n        operation, and write permission for all affected directories in the destination table.\n        (An <span class=\"sql-docs-inline-code\">INSERT</span>  operation could write files to multiple different HDFS directories\n        if the destination table is partitioned.)\n        This user must also have write permission to create a temporary work directory\n        in the top-level HDFS directory of the destination table.\n        An <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  operation does not require write permission on\n        the original data files in the table, only on the table directories themselves.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_char_varchar_cast_from_string\">\n        For <span class=\"sql-docs-inline-code\">INSERT</span>  operations into <span class=\"sql-docs-inline-code\">CHAR</span>  or <span class=\"sql-docs-inline-code\">VARCHAR</span>  columns, you\n        must cast all <span class=\"sql-docs-inline-code\">STRING</span>  literals or expressions returning <span class=\"sql-docs-inline-code\">STRING</span>  to to a\n        <span class=\"sql-docs-inline-code\">CHAR</span>  or <span class=\"sql-docs-inline-code\">VARCHAR</span>  type with the appropriate length.\n      </p> <p id=\"../Impala/docs/topics/impala_insert.xml_related_options\"><b>Related startup options:</b> </p> <p id=\"../Impala/docs/topics/impala_insert.xml_insert_inherit_permissions\">\n        By default, if an <span class=\"sql-docs-inline-code\">INSERT</span>  statement creates any new subdirectories underneath a partitioned\n        table, those subdirectories are assigned default HDFS permissions for the <span class=\"sql-docs-inline-code\">impala</span>  user. To\n        make each subdirectory have the same permissions as its parent directory in HDFS, specify the\n        <span class=\"sql-docs-inline-code\">--insert_inherit_permissions</span>  startup option for the <span class=\"sql-docs-inline-code\">impalad</span>  daemon.\n      </p> </div> </div> <div id=\"../Impala/docs/topics/impala_insert.xml_partition_insert\"><h4>Inserting Into Partitioned Tables with PARTITION Clause</h4> <div><p>\n        For a partitioned table, the optional <span class=\"sql-docs-inline-code\">PARTITION</span>  clause\n        identifies which partition or partitions the values are inserted\n        into.\n      </p> <p>\n        All examples in this section will use the table declared as below:\n      </p> <div class=\"sql-docs-code-block\">CREATE TABLE t1 (w INT) PARTITIONED BY (x INT, y STRING);</div></div> <div id=\"../Impala/docs/topics/impala_insert.xml_static_partition_insert\"><h4>Static Partition Inserts</h4> <div><p>\n          In a static partition insert where a partition key column is given a\n          constant value, such as <span class=\"sql-docs-inline-code\">PARTITION</span> <span class=\"sql-docs-inline-code\">(year=2012, month=2)</span> , the rows are inserted with the\n          same values specified for those partition key columns.\n        </p> <p>\n          The number of columns in the <span class=\"sql-docs-inline-code\">SELECT</span>  list must equal\n          the number of columns in the column permutation.\n        </p> <p>\n          The <span class=\"sql-docs-inline-code\">PARTITION</span>  clause must be used for static\n          partitioning inserts.\n        </p> <p>\n          Example:\n        </p> <p>\n          The following statement will insert the\n            <span class=\"sql-docs-inline-code\">some_other_table.c1</span>  values for the\n            <span class=\"sql-docs-inline-code\">w</span>  column, and all the rows inserted will have the\n          same <span class=\"sql-docs-inline-code\">x</span>  value of <span class=\"sql-docs-inline-code\">10</span> , and the same\n            <span class=\"sql-docs-inline-code\">y</span>  value of\n          <span class=\"sql-docs-inline-code\">‘a’</span> .<div class=\"sql-docs-code-block\">INSERT INTO t1 PARTITION (x=10, y='a')<br/>            SELECT c1 FROM some_other_table;</div></p> </div> </div> <div id=\"../Impala/docs/topics/impala_insert.xml_dynamic_partition_insert\"><h4>Dynamic Partition Inserts</h4> <div><p>\n            In a dynamic partition insert where a partition key\n          column is in the <span class=\"sql-docs-inline-code\">INSERT</span>  statement but not assigned a\n          value, such as in <span class=\"sql-docs-inline-code\">PARTITION (year, region)</span> (both\n          columns unassigned) or <span class=\"sql-docs-inline-code\">PARTITION(year, region='CA')</span> \n            (<span class=\"sql-docs-inline-code\">year</span>  column unassigned), the unassigned columns\n          are filled in with the final columns of the <span class=\"sql-docs-inline-code\">SELECT</span>  or\n            <span class=\"sql-docs-inline-code\">VALUES</span>  clause. In this case, the number of columns\n          in the <span class=\"sql-docs-inline-code\">SELECT</span>  list must equal the number of columns\n          in the column permutation plus the number of partition key columns not\n          assigned a constant value.\n          </p> <p>\n            See <a target=\"_blank\" href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_partitioning.html#partition_static_dynamic\">Static and Dynamic Partitioning\n                Clauses</a> for examples and performance characteristics\n            of static and dynamic partitioned inserts.\n          </p> <p>\n            The following rules apply to dynamic partition\n            inserts.\n          </p> <ul><li><p>\n                The columns are bound in the order they appear in the\n                  <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n              </p> <p>\n                The table below shows the values inserted with the\n                <span class=\"sql-docs-inline-code\">INSERT</span>  statements of different column\n              orders.\n              </p> </li> </ul> <ul><li>\n              When a partition clause is specified but the non-partition\n            columns are not specified in the <span class=\"sql-docs-inline-code\">INSERT</span>  statement,\n            as in the first example below, the non-partition columns are treated\n            as though they had been specified before the\n              <span class=\"sql-docs-inline-code\">PARTITION</span>  clause in the SQL.\n              <p>\n                Example: These\n              three statements are equivalent, inserting <span class=\"sql-docs-inline-code\">1</span>  to\n                <span class=\"sql-docs-inline-code\">w</span> , <span class=\"sql-docs-inline-code\">2</span>  to <span class=\"sql-docs-inline-code\">x</span> ,\n              and <span class=\"sql-docs-inline-code\">‘c’</span>  to <span class=\"sql-docs-inline-code\">y</span> \n            columns.\n              </p> <div class=\"sql-docs-code-block\">INSERT INTO t1 PARTITION (x,y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 (w) PARTITION (x, y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 PARTITION (x, y='c') VALUES (1, 2);</div></li> <li>\n              The <span class=\"sql-docs-inline-code\">PARTITION</span>  clause is not required for\n            dynamic partition, but all the partition columns must be explicitly\n            present in the <span class=\"sql-docs-inline-code\">INSERT</span>  statement in the column list\n            or in the <span class=\"sql-docs-inline-code\">PARTITION</span>  clause. The partition columns\n            cannot be defaulted to <span class=\"sql-docs-inline-code\">NULL</span> .\n              <p>\n                Example:\n              </p> <p>The following statements are valid because the partition\n              columns, <span class=\"sql-docs-inline-code\">x</span>  and <span class=\"sql-docs-inline-code\">y</span> , are present in\n              the <span class=\"sql-docs-inline-code\">INSERT</span>  statements, either in the\n                <span class=\"sql-docs-inline-code\">PARTITION</span>  clause or in the column\n              list.\n              </p> <div class=\"sql-docs-code-block\">INSERT INTO t1 PARTITION (x,y) VALUES (1, 2, ‘c’);<br/>INSERT INTO t1 (w, x) PARTITION (y) VALUES (1, 2, ‘c’);</div><p>\n                The following statement is not valid for the partitioned table as\n              defined above because the partition columns, <span class=\"sql-docs-inline-code\">x</span> \n              and <span class=\"sql-docs-inline-code\">y</span> , are not present in the\n                <span class=\"sql-docs-inline-code\">INSERT</span>  statement.\n              </p> <div class=\"sql-docs-code-block\">INSERT INTO t1 VALUES (1, 2, 'c');</div></li> <li>\n              If partition columns do not exist in the source table, you can\n              specify a specific value for that column in the\n              <span class=\"sql-docs-inline-code\">PARTITION</span>  clause.\n              <p>\n                Example: The <span class=\"sql-docs-inline-code\">source</span>  table only contains the column\n                <span class=\"sql-docs-inline-code\">w</span>  and <span class=\"sql-docs-inline-code\">y</span> . The value,\n                <span class=\"sql-docs-inline-code\">20</span> , specified in the <span class=\"sql-docs-inline-code\">PARTITION</span> \n              clause, is inserted into the <span class=\"sql-docs-inline-code\">x</span>  column.\n              </p> <div class=\"sql-docs-code-block\">INSERT INTO t1 PARTITION (x=20, y) SELECT * FROM source;</div></li> </ul> </div> </div> </div> ","title":"INSERT Statement"}