{"body":"<div><p>\n      Updates an arbitrary number of rows in a Kudu table.\n      This statement only works for Impala tables that use the Kudu storage engine.\n    </p> <p id=\"../Impala/docs/topics/impala_update.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\">UPDATE [<span class=\"sql-docs-variable\">database_name</span> .]<span class=\"sql-docs-variable\">table_name</span> SET <span class=\"sql-docs-variable\">col</span> = <span class=\"sql-docs-variable\">val</span> [, <span class=\"sql-docs-variable\">col</span> = <span class=\"sql-docs-variable\">val</span> ... ]<br/>  [ FROM <span class=\"sql-docs-variable\">joined_table_refs</span> ]<br/>  [ WHERE <span class=\"sql-docs-variable\">where_conditions</span> ]<br/></div><p id=\"../Impala/docs/topics/impala_update.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n      None of the columns that make up the primary key can be updated by the\n      <span class=\"sql-docs-inline-code\">SET</span>  clause.\n    </p> <p>\n      The conditions in the <span class=\"sql-docs-inline-code\">WHERE</span>  clause are the same ones allowed\n      for the <span class=\"sql-docs-inline-code\">SELECT</span>  statement. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT Statement</a>\n      for details.\n    </p> <p>\n      If the <span class=\"sql-docs-inline-code\">WHERE</span>  clause is omitted, all rows in the table are updated.\n    </p> <p>\n      The conditions in the <span class=\"sql-docs-inline-code\">WHERE</span>  clause can refer to\n      any combination of primary key columns or other columns. Referring to\n      primary key columns in the <span class=\"sql-docs-inline-code\">WHERE</span>  clause is more efficient\n      than referring to non-primary key columns.\n    </p> <p>\n      Because Kudu currently does not enforce strong consistency during concurrent DML operations,\n      be aware that the results after this statement finishes might be different than you\n      intuitively expect:\n    </p> <ul><li><p>\n          If some rows cannot be updated because their\n          some primary key columns are not found, due to their being deleted\n          by a concurrent <span class=\"sql-docs-inline-code\">DELETE</span>  operation,\n          the statement succeeds but returns a warning.\n        </p> </li> <li><p>\n          An <span class=\"sql-docs-inline-code\">UPDATE</span>  statement might also overlap with\n          <span class=\"sql-docs-inline-code\">INSERT</span> , <span class=\"sql-docs-inline-code\">UPDATE</span> ,\n          or <span class=\"sql-docs-inline-code\">UPSERT</span>  statements running concurrently on the same table.\n          After the statement finishes, there might be more or fewer matching rows than expected\n          in the table because it is undefined whether the <span class=\"sql-docs-inline-code\">UPDATE</span>  applies to rows\n          that are inserted or updated while the <span class=\"sql-docs-inline-code\">UPDATE</span>  is in progress.\n        </p> </li> </ul> <p>\n      The number of affected rows is reported in an <span class=\"sql-docs-inline-code\">impala-shell</span>  message\n      and in the query profile.\n    </p> <p>\n      The optional <span class=\"sql-docs-inline-code\">FROM</span>  clause lets you restrict the\n      updates to only the rows in the specified table that are part\n      of the result set for a join query. The join clauses can include\n      non-Kudu tables, but the table from which the rows are deleted\n      must be a Kudu table.\n    </p> <p id=\"../Impala/docs/topics/impala_update.xml_dml_blurb_kudu\"><b>Statement type:</b>  DML\n      </p> <div id=\"../Impala/docs/topics/impala_update.xml_compute_stats_next\" class=\"sql-docs-note\">\n        After adding or replacing data in a table used in performance-critical queries, issue a <span class=\"sql-docs-inline-code\">COMPUTE\n        STATS</span>  statement to make sure all statistics are up-to-date. Consider updating statistics for a\n        table after any <span class=\"sql-docs-inline-code\">INSERT</span> , <span class=\"sql-docs-inline-code\">LOAD DATA</span> , or <span class=\"sql-docs-inline-code\">CREATE TABLE AS\n        SELECT</span>  statement in Impala, or after loading data through Hive and doing a <span class=\"sql-docs-inline-code\">REFRESH\n        <span class=\"sql-docs-variable\">table_name</span> </span>  in Impala. This technique is especially important for tables that\n        are very large, used in join queries, or both.\n      </div> <p id=\"../Impala/docs/topics/impala_update.xml_example_blurb\"><b>Examples:</b> </p> <p>\n      The following examples show how to perform a simple update\n      on a table, with or without a <span class=\"sql-docs-inline-code\">WHERE</span>  clause:\n    </p> <div class=\"sql-docs-code-block\">-- Set all rows to the same value for column c3.<br/>-- In this case, c1 and c2 are primary key columns<br/>-- and so cannot be updated.<br/>UPDATE kudu_table SET c3 = 'not applicable';<br/><br/>-- Update only the rows that match the condition.<br/>UPDATE kudu_table SET c3 = NULL WHERE c1 > 100 AND c3 IS NULL;<br/><br/>-- Does not update any rows, because the WHERE condition is always false.<br/>UPDATE kudu_table SET c3 = 'impossible' WHERE 1 = 0;<br/><br/>-- Change the values of multiple columns in a single UPDATE statement.<br/>UPDATE kudu_table SET c3 = upper(c3), c4 = FALSE, c5 = 0 WHERE c6 = TRUE;<br/></div><p>\n      The following examples show how to perform an update using the\n      <span class=\"sql-docs-inline-code\">FROM</span>  keyword with a join clause:\n    </p> <div class=\"sql-docs-code-block\">-- Uppercase a column value, only for rows that have<br/>-- an ID that matches the value from another table.<br/>UPDATE kudu_table SET c3 = upper(c3)<br/>  FROM kudu_table JOIN non_kudu_table<br/>  ON kudu_table.id = non_kudu_table.id;<br/><br/>-- Same effect as previous statement.<br/>-- Assign table aliases in FROM clause, then refer to<br/>-- short names elsewhere in the statement.<br/>UPDATE t1 SET c3 = upper(c3)<br/>  FROM kudu_table t1 JOIN non_kudu_table t2<br/>  ON t1.id = t2.id;<br/><br/>-- Same effect as previous statements, but more efficient.<br/>-- Use WHERE clause to skip updating values that are<br/>-- already uppercase.<br/>UPDATE t1 SET c3 = upper(c3)<br/>  FROM kudu_table t1 JOIN non_kudu_table t2<br/>  ON t1.id = t2.id<br/>  WHERE c3 != upper(c3);<br/></div><p id=\"../Impala/docs/topics/impala_update.xml_related_info\"><b>Related information:</b> </p> <p><span>impala kudu</span>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#insert\">INSERT Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_delete.xml#delete\">DELETE Statement (Impala 2.8 or higher only)</a>, <span>upsert</span></p> </div> ","title":"UPDATE Statement (Impala 2.8 or higher only)"}