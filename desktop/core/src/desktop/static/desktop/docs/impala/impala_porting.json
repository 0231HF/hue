{"body":"<div><p>\n      Although Impala uses standard SQL for queries, you might need to modify SQL source when bringing applications\n      to Impala, due to variations in data types, built-in functions, vendor language extensions, and\n      Hadoop-specific syntax. Even when SQL is working correctly, you might make further minor modifications for\n      best performance.\n    </p></div><div id=\"../Impala/docs/topics/impala_porting.xml_porting_ddl_dml\"><h4>Porting DDL and DML Statements</h4><div><p>\n        When adapting SQL code from a traditional database system to Impala, expect to find a number of differences\n        in the DDL statements that you use to set up the schema. Clauses related to physical layout of files,\n        tablespaces, and indexes have no equivalent in Impala. You might restructure your schema considerably to\n        account for the Impala partitioning scheme and Hadoop file formats.\n      </p><p>\n        Expect SQL queries to have a much higher degree of compatibility. With modest rewriting to address vendor\n        extensions and features not yet supported in Impala, you might be able to run identical or almost-identical\n        query text on both systems.\n      </p><p>\n        Therefore, consider separating out the DDL into a separate Impala-specific setup script. Focus your reuse\n        and ongoing tuning efforts on the code for SQL queries.\n      </p></div></div><div id=\"../Impala/docs/topics/impala_porting.xml_porting_data_types\"><h4>Porting Data Types from Other Database Systems</h4><div><ul><li><p>\n            Change any <span class=\"sql-docs-inline-code\">VARCHAR</span>, <span class=\"sql-docs-inline-code\">VARCHAR2</span>, and <span class=\"sql-docs-inline-code\">CHAR</span> columns to\n            <span class=\"sql-docs-inline-code\">STRING</span>. Remove any length constraints from the column declarations; for example,\n            change <span class=\"sql-docs-inline-code\">VARCHAR(32)</span> or <span class=\"sql-docs-inline-code\">CHAR(1)</span> to <span class=\"sql-docs-inline-code\">STRING</span>. Impala is\n            very flexible about the length of string values; it does not impose any length constraints\n            or do any special processing (such as blank-padding) for <span class=\"sql-docs-inline-code\">STRING</span> columns.\n            (In Impala 2.0 and higher, there are data types <span class=\"sql-docs-inline-code\">VARCHAR</span> and <span class=\"sql-docs-inline-code\">CHAR</span>,\n            with length constraints for both types and blank-padding for <span class=\"sql-docs-inline-code\">CHAR</span>.\n            However, for performance reasons, it is still preferable to use <span class=\"sql-docs-inline-code\">STRING</span>\n            columns where practical.)\n          </p></li><li><p>\n            For national language character types such as <span class=\"sql-docs-inline-code\">NCHAR</span>, <span class=\"sql-docs-inline-code\">NVARCHAR</span>, or\n            <span class=\"sql-docs-inline-code\">NCLOB</span>, be aware that while Impala can store and query UTF-8 character data, currently\n            some string manipulation operations only work correctly with ASCII data. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string.xml#string\">STRING Data Type</a> for details.\n          </p></li><li><p>\n            Change any <span class=\"sql-docs-inline-code\">DATE</span>, <span class=\"sql-docs-inline-code\">DATETIME</span>, or <span class=\"sql-docs-inline-code\">TIME</span> columns to\n            <span class=\"sql-docs-inline-code\">TIMESTAMP</span>. Remove any precision constraints. Remove any timezone clauses, and make\n            sure your application logic or ETL process accounts for the fact that Impala expects all\n            <span class=\"sql-docs-inline-code\">TIMESTAMP</span> values to be in\n            <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Coordinated_Universal_Time\">Coordinated\n            Universal Time (UTC)</a>. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_timestamp.xml#timestamp\">TIMESTAMP Data Type</a> for information about\n            the <span class=\"sql-docs-inline-code\">TIMESTAMP</span> data type, and\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datetime_functions.xml#datetime_functions\">Impala Date and Time Functions</a> for conversion functions for different\n            date and time formats.\n          </p><p>\n            You might also need to adapt date- and time-related literal values and format strings to use the\n            supported Impala date and time formats. If you have date and time literals with different separators or\n            different numbers of <span class=\"sql-docs-inline-code\">YY</span>, <span class=\"sql-docs-inline-code\">MM</span>, and so on placeholders than Impala\n            expects, consider using calls to <span class=\"sql-docs-inline-code\">regexp_replace()</span> to transform those values to the\n            Impala-compatible format. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_timestamp.xml#timestamp\">TIMESTAMP Data Type</a> for information about the\n            allowed formats for date and time literals, and\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string_functions.xml#string_functions\">Impala String Functions</a> for string conversion functions such as\n            <span class=\"sql-docs-inline-code\">regexp_replace()</span>.\n          </p><p>\n            Instead of <span class=\"sql-docs-inline-code\">SYSDATE</span>, call the function <span class=\"sql-docs-inline-code\">NOW()</span>.\n          </p><p>\n            Instead of adding or subtracting directly from a date value to produce a value <span class=\"sql-docs-variable\">N</span>\n            days in the past or future, use an <span class=\"sql-docs-inline-code\">INTERVAL</span> expression, for example <span class=\"sql-docs-inline-code\">NOW() +\n            INTERVAL 30 DAYS</span>.\n          </p></li><li><p>\n            Although Impala supports <span class=\"sql-docs-inline-code\">INTERVAL</span> expressions for datetime arithmetic, as shown in\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_timestamp.xml#timestamp\">TIMESTAMP Data Type</a>, <span class=\"sql-docs-inline-code\">INTERVAL</span> is not available as a column\n            data type in Impala. For any <span class=\"sql-docs-inline-code\">INTERVAL</span> values stored in tables, convert them to numeric\n            values that you can add or subtract using the functions in\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datetime_functions.xml#datetime_functions\">Impala Date and Time Functions</a>. For example, if you had a table\n            <span class=\"sql-docs-inline-code\">DEADLINES</span> with an <span class=\"sql-docs-inline-code\">INT</span> column <span class=\"sql-docs-inline-code\">TIME_PERIOD</span>, you could\n            construct dates N days in the future like so:\n          </p><div class=\"sql-docs-code-block\">SELECT NOW() + INTERVAL time_period DAYS from deadlines;</div></li><li><p>\n            For <span class=\"sql-docs-inline-code\">YEAR</span> columns, change to the smallest Impala integer type that has sufficient\n            range. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for details about ranges, casting, and so on\n            for the various numeric data types.\n          </p></li><li><p>\n            Change any <span class=\"sql-docs-inline-code\">DECIMAL</span> and <span class=\"sql-docs-inline-code\">NUMBER</span> types. If fixed-point precision is not\n            required, you can use <span class=\"sql-docs-inline-code\">FLOAT</span> or <span class=\"sql-docs-inline-code\">DOUBLE</span> on the Impala side depending on\n            the range of values. For applications that require precise decimal values, such as financial data, you\n            might need to make more extensive changes to table structure and application logic, such as using\n            separate integer columns for dollars and cents, or encoding numbers as string values and writing UDFs\n            to manipulate them. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for details about ranges,\n            casting, and so on for the various numeric data types.\n          </p></li><li><p><span class=\"sql-docs-inline-code\">FLOAT</span>, <span class=\"sql-docs-inline-code\">DOUBLE</span>, and <span class=\"sql-docs-inline-code\">REAL</span> types are supported in\n            Impala. Remove any precision and scale specifications. (In Impala, <span class=\"sql-docs-inline-code\">REAL</span> is just an\n            alias for <span class=\"sql-docs-inline-code\">DOUBLE</span>; columns declared as <span class=\"sql-docs-inline-code\">REAL</span> are turned into\n            <span class=\"sql-docs-inline-code\">DOUBLE</span> behind the scenes.) See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for\n            details about ranges, casting, and so on for the various numeric data types.\n          </p></li><li><p>\n            Most integer types from other systems have equivalents in Impala, perhaps under different names such as\n            <span class=\"sql-docs-inline-code\">BIGINT</span> instead of <span class=\"sql-docs-inline-code\">INT8</span>. For any that are unavailable, for example\n            <span class=\"sql-docs-inline-code\">MEDIUMINT</span>, switch to the smallest Impala integer type that has sufficient range.\n            Remove any precision specifications. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for details\n            about ranges, casting, and so on for the various numeric data types.\n          </p></li><li><p>\n            Remove any <span class=\"sql-docs-inline-code\">UNSIGNED</span> constraints. All Impala numeric types are signed. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for details about ranges, casting, and so on for the\n            various numeric data types.\n          </p></li><li><p>\n            For any types holding bitwise values, use an integer type with enough range to hold all the relevant\n            bits within a positive integer. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datatypes.xml#datatypes\">Data Types</a> for details about\n            ranges, casting, and so on for the various numeric data types.\n          </p><p>\n            For example, <span class=\"sql-docs-inline-code\">TINYINT</span> has a maximum positive value of 127, not 256, so to manipulate\n            8-bit bitfields as positive numbers switch to the next largest type <span class=\"sql-docs-inline-code\">SMALLINT</span>.\n          </p><div class=\"sql-docs-code-block\">[localhost:21000] > select cast(127*2 as tinyint);<br/>+--------------------------+<br/>| cast(127 * 2 as tinyint) |<br/>+--------------------------+<br/>| -2                       |<br/>+--------------------------+<br/>[localhost:21000] > select cast(128 as tinyint);<br/>+----------------------+<br/>| cast(128 as tinyint) |<br/>+----------------------+<br/>| -128                 |<br/>+----------------------+<br/>[localhost:21000] > select cast(127*2 as smallint);<br/>+---------------------------+<br/>| cast(127 * 2 as smallint) |<br/>+---------------------------+<br/>| 254                       |<br/>+---------------------------+</div><p>\n            Impala does not support notation such as <span class=\"sql-docs-inline-code\">b'0101'</span> for bit literals.\n          </p></li><li><p>\n            For BLOB values, use <span class=\"sql-docs-inline-code\">STRING</span> to represent <span class=\"sql-docs-inline-code\">CLOB</span> or\n            <span class=\"sql-docs-inline-code\">TEXT</span> types (character based large objects) up to 32 KB in size. Binary large objects\n            such as <span class=\"sql-docs-inline-code\">BLOB</span>, <span class=\"sql-docs-inline-code\">RAW</span><span class=\"sql-docs-inline-code\">BINARY</span>, and\n            <span class=\"sql-docs-inline-code\">VARBINARY</span> do not currently have an equivalent in Impala.\n          </p></li><li><p>\n            For Boolean-like types such as <span class=\"sql-docs-inline-code\">BOOL</span>, use the Impala <span class=\"sql-docs-inline-code\">BOOLEAN</span> type.\n          </p></li><li><p>\n            Because Impala currently does not support composite or nested types, any spatial data types in other\n            database systems do not have direct equivalents in Impala. You could represent spatial values in string\n            format and write UDFs to process them. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udfs\">Impala User-Defined Functions (UDFs)</a> for details. Where\n            practical, separate spatial types into separate tables so that Impala can still work with the\n            non-spatial data.\n          </p></li><li><p>\n            Take out any <span class=\"sql-docs-inline-code\">DEFAULT</span> clauses. Impala can use data files produced from many different\n            sources, such as Pig, Hive, or MapReduce jobs. The fast import mechanisms of <span class=\"sql-docs-inline-code\">LOAD DATA</span>\n            and external tables mean that Impala is flexible about the format of data files, and Impala does not\n            necessarily validate or cleanse data before querying it. When copying data through Impala\n            <span class=\"sql-docs-inline-code\">INSERT</span> statements, you can use conditional functions such as <span class=\"sql-docs-inline-code\">CASE</span> or\n            <span class=\"sql-docs-inline-code\">NVL</span> to substitute some other value for <span class=\"sql-docs-inline-code\">NULL</span> fields; see\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_conditional_functions.xml#conditional_functions\">Impala Conditional Functions</a> for details.\n          </p></li><li><p>\n            Take out any constraints from your <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER TABLE</span>\n            statements, for example <span class=\"sql-docs-inline-code\">PRIMARY KEY</span>, <span class=\"sql-docs-inline-code\">FOREIGN KEY</span>,\n            <span class=\"sql-docs-inline-code\">UNIQUE</span>, <span class=\"sql-docs-inline-code\">NOT NULL</span>, <span class=\"sql-docs-inline-code\">UNSIGNED</span>, or\n            <span class=\"sql-docs-inline-code\">CHECK</span> constraints. Impala can use data files produced from many different sources,\n            such as Pig, Hive, or MapReduce jobs. Therefore, Impala expects initial data validation to happen\n            earlier during the ETL or ELT cycle. After data is loaded into Impala tables, you can perform queries\n            to test for <span class=\"sql-docs-inline-code\">NULL</span> values. When copying data through Impala <span class=\"sql-docs-inline-code\">INSERT</span>\n            statements, you can use conditional functions such as <span class=\"sql-docs-inline-code\">CASE</span> or <span class=\"sql-docs-inline-code\">NVL</span> to\n            substitute some other value for <span class=\"sql-docs-inline-code\">NULL</span> fields; see\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_conditional_functions.xml#conditional_functions\">Impala Conditional Functions</a> for details.\n          </p><p>\n            Do as much verification as practical before loading data into Impala. After data is loaded into Impala,\n            you can do further verification using SQL queries to check if values have expected ranges, if values\n            are <span class=\"sql-docs-inline-code\">NULL</span> or not, and so on. If there is a problem with the data, you will need to\n            re-run earlier stages of the ETL process, or do an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> statement in\n            Impala to copy the faulty data to a new table and transform or filter out the bad values.\n          </p></li><li><p>\n            Take out any <span class=\"sql-docs-inline-code\">CREATE INDEX</span>, <span class=\"sql-docs-inline-code\">DROP INDEX</span>, and <span class=\"sql-docs-inline-code\">ALTER\n            INDEX</span> statements, and equivalent <span class=\"sql-docs-inline-code\">ALTER TABLE</span> statements. Remove any\n            <span class=\"sql-docs-inline-code\">INDEX</span>, <span class=\"sql-docs-inline-code\">KEY</span>, or <span class=\"sql-docs-inline-code\">PRIMARY KEY</span> clauses from\n            <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER TABLE</span> statements. Impala is optimized for bulk\n            read operations for data warehouse-style queries, and therefore does not support indexes for its\n            tables.\n          </p></li><li><p>\n            Calls to built-in functions with out-of-range or otherwise incorrect arguments, return\n            <span class=\"sql-docs-inline-code\">NULL</span> in Impala as opposed to raising exceptions. (This rule applies even when the\n            <span class=\"sql-docs-inline-code\">ABORT_ON_ERROR=true</span> query option is in effect.) Run small-scale queries using\n            representative data to doublecheck that calls to built-in functions are returning expected values\n            rather than <span class=\"sql-docs-inline-code\">NULL</span>. For example, unsupported <span class=\"sql-docs-inline-code\">CAST</span> operations do not\n            raise an error in Impala:\n          </p><div class=\"sql-docs-code-block\">select cast('foo' as int);<br/>+--------------------+<br/>| cast('foo' as int) |<br/>+--------------------+<br/>| NULL               |<br/>+--------------------+</div></li><li><p>\n            For any other type not supported in Impala, you could represent their values in string format and write\n            UDFs to process them. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_udf.xml#udfs\">Impala User-Defined Functions (UDFs)</a> for details.\n          </p></li><li><p>\n            To detect the presence of unsupported or unconvertable data types in data files, do initial testing\n            with the <span class=\"sql-docs-inline-code\">ABORT_ON_ERROR=true</span> query option in effect. This option causes queries to\n            fail immediately if they encounter disallowed type conversions. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_abort_on_error.xml#abort_on_error\">ABORT_ON_ERROR Query Option</a> for details. For example:\n          </p><div class=\"sql-docs-code-block\">set abort_on_error=true;<br/>select count(*) from (select * from t1);<br/>-- The above query will fail if the data files for T1 contain any<br/>-- values that can't be converted to the expected Impala data types.<br/>-- For example, if T1.C1 is defined as INT but the column contains<br/>-- floating-point values like 1.1, the query will return an error.</div></li></ul></div></div><div id=\"../Impala/docs/topics/impala_porting.xml_porting_statements\"><h4>SQL Statements to Remove or Adapt</h4><div><p>\n        Some SQL statements or clauses that you might be familiar with are not currently supported in Impala:\n      </p><ul><li><p>\n            Impala has no <span class=\"sql-docs-inline-code\">DELETE</span> statement. Impala is intended for data warehouse-style operations\n            where you do bulk moves and transforms of large quantities of data. Instead of using\n            <span class=\"sql-docs-inline-code\">DELETE</span>, use <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span> to entirely replace the contents of a\n            table or partition, or use <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> to copy a subset of data (everything but\n            the rows you intended to delete) from one table to another. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_dml.xml#dml\">DML Statements</a> for\n            an overview of Impala DML statements.\n          </p></li><li><p>\n            Impala has no <span class=\"sql-docs-inline-code\">UPDATE</span> statement. Impala is intended for data warehouse-style operations\n            where you do bulk moves and transforms of large quantities of data. Instead of using\n            <span class=\"sql-docs-inline-code\">UPDATE</span>, do all necessary transformations early in the ETL process, such as in the job\n            that generates the original data, or when copying from one table to another to convert to a particular\n            file format or partitioning scheme. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_dml.xml#dml\">DML Statements</a> for an overview of Impala DML\n            statements.\n          </p></li><li><p>\n            Impala has no transactional statements, such as <span class=\"sql-docs-inline-code\">COMMIT</span> or <span class=\"sql-docs-inline-code\">ROLLBACK</span>.\n            Impala effectively works like the <span class=\"sql-docs-inline-code\">AUTOCOMMIT</span> mode in some database systems, where\n            changes take effect as soon as they are made.\n          </p></li><li><p>\n            If your database, table, column, or other names conflict with Impala reserved words, use different\n            names or quote the names with backticks. See <span>reserved words</span>\n            for the current list of Impala reserved words.\n          </p><p>\n            Conversely, if you use a keyword that Impala does not recognize, it might be interpreted as a table or\n            column alias. For example, in <span class=\"sql-docs-inline-code\">SELECT * FROM t1 NATURAL JOIN t2</span>, Impala does not\n            recognize the <span class=\"sql-docs-inline-code\">NATURAL</span> keyword and interprets it as an alias for the table\n            <span class=\"sql-docs-inline-code\">t1</span>. If you experience any unexpected behavior with queries, check the list of reserved\n            words to make sure all keywords in join and <span class=\"sql-docs-inline-code\">WHERE</span> clauses are recognized.\n          </p></li><li><p>\n            Impala supports subqueries only in the <span class=\"sql-docs-inline-code\">FROM</span> clause of a query, not within the\n            <span class=\"sql-docs-inline-code\">WHERE</span> clauses. Therefore, you cannot use clauses such as <span class=\"sql-docs-inline-code\">WHERE\n            <span class=\"sql-docs-variable\">column</span> IN (<span class=\"sql-docs-variable\">subquery</span>)</span>. Also, Impala does not allow\n            <span class=\"sql-docs-inline-code\">EXISTS</span> or <span class=\"sql-docs-inline-code\">NOT EXISTS</span> clauses (although <span class=\"sql-docs-inline-code\">EXISTS</span> is a\n            reserved keyword).\n          </p></li><li><p>\n            Impala supports <span class=\"sql-docs-inline-code\">UNION</span> and <span class=\"sql-docs-inline-code\">UNION ALL</span> set operators, but not\n            <span class=\"sql-docs-inline-code\">INTERSECT</span>. <span id=\"../Impala/docs/topics/impala_porting.xml_union_all_vs_union\" class=\"sql-docs-inline-code\">Prefer <span class=\"sql-docs-inline-code\">UNION ALL</span> over <span class=\"sql-docs-inline-code\">UNION</span> when you know the\n        data sets are disjoint or duplicate values are not a problem; <span class=\"sql-docs-inline-code\">UNION ALL</span> is more efficient\n        because it avoids materializing and sorting the entire result set to eliminate duplicate values.</span></p></li><li><p>\n            Within queries, Impala requires query aliases for any subqueries:\n          </p><div class=\"sql-docs-code-block\">-- Without the alias 'contents_of_t1' at the end, query gives syntax error.<br/>select count(*) from (select * from t1) contents_of_t1;</div></li><li><p>\n            When an alias is declared for an expression in a query, that alias cannot be referenced again within\n            the same query block:\n          </p><div class=\"sql-docs-code-block\">-- Can't reference AVERAGE twice in the SELECT list where it's defined.<br/>select avg(x) as average, average+1 from t1 group by x;<br/>ERROR: AnalysisException: couldn't resolve column reference: 'average'<br/><br/>-- Although it can be referenced again later in the same query.<br/>select avg(x) as average from t1 group by x having average > 3;</div><p>\n            For Impala, either repeat the expression again, or abstract the expression into a <span class=\"sql-docs-inline-code\">WITH</span>\n            clause, creating named columns that can be referenced multiple times anywhere in the base query:\n          </p><div class=\"sql-docs-code-block\">-- The following 2 query forms are equivalent.<br/>select avg(x) as average, avg(x)+1 from t1 group by x;<br/>with avg_t as (select avg(x) average from t1 group by x) select average, average+1 from avg_t;</div></li><li><p>\n            Impala does not support certain rarely used join types that are less appropriate for high-volume tables\n            used for data warehousing. In some cases, Impala supports join types but requires explicit syntax to\n            ensure you do not do inefficient joins of huge tables by accident. For example, Impala does not support\n            natural joins or anti-joins, and requires the <span class=\"sql-docs-inline-code\">CROSS JOIN</span> operator for Cartesian\n            products. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_joins.xml#joins\">Joins in Impala SELECT Statements</a> for details on the syntax for Impala join clauses.\n          </p></li><li><p>\n            Impala has a limited choice of partitioning types. Partitions are defined based on each distinct\n            combination of values for one or more partition key columns. Impala does not redistribute or check data\n            to create evenly distributed partitions; you must choose partition key columns based on your knowledge\n            of the data volume and distribution. Adapt any tables that use range, list, hash, or key partitioning\n            to use the Impala partition syntax for <span class=\"sql-docs-inline-code\">CREATE TABLE</span> and <span class=\"sql-docs-inline-code\">ALTER TABLE</span>\n            statements. Impala partitioning is similar to range partitioning where every range has exactly one\n            value, or key partitioning where the hash function produces a separate bucket for every combination of\n            key values. See <span>partitioning</span> for usage details, and\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_table.xml#create_table\">CREATE TABLE Statement</a> and\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE Statement</a> for syntax.\n          </p><div class=\"sql-docs-note\">\n            Because the number of separate partitions is potentially higher than in other database systems, keep a\n            close eye on the number of partitions and the volume of data in each one; scale back the number of\n            partition key columns if you end up with too many partitions with a small volume of data in each one.\n            Remember, to distribute work for a query across a cluster, you need at least one HDFS block per node.\n            HDFS blocks are typically multiple megabytes, <span class=\"sql-docs-inline-code\">especially</span> for Parquet\n            files. Therefore, if each partition holds only a few megabytes of data, you are unlikely to see much\n            parallelism in the query because such a small amount of data is typically processed by a single node.\n          </div></li><li><p>\n            For <q>top-N</q> queries, Impala uses the <span class=\"sql-docs-inline-code\">LIMIT</span> clause rather than comparing against a\n            pseudocolumn named <span class=\"sql-docs-inline-code\">ROWNUM</span> or <span class=\"sql-docs-inline-code\">ROW_NUM</span>. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_limit.xml#limit\">LIMIT Clause</a> for details.\n          </p></li></ul></div></div><div id=\"../Impala/docs/topics/impala_porting.xml_porting_antipatterns\"><h4>SQL Constructs to Doublecheck</h4><div><p>\n        Some SQL constructs that are supported have behavior or defaults more oriented towards convenience than\n        optimal performance. Also, sometimes machine-generated SQL, perhaps issued through JDBC or ODBC\n        applications, might have inefficiencies or exceed internal Impala limits. As you port SQL code, be alert\n        and change these things where appropriate:\n      </p><ul><li><p>\n            A <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement with no <span class=\"sql-docs-inline-code\">STORED AS</span> clause creates data files\n            in plain text format, which is convenient for data interchange but not a good choice for high-volume\n            data with high-performance queries. See <span>file formats</span> for why and\n            how to use specific file formats for compact data and high-performance queries. Especially see\n            <span>parquet</span>, for details about the file format most heavily optimized for\n            large-scale data warehouse queries.\n          </p></li><li><p>\n            A <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement with no <span class=\"sql-docs-inline-code\">PARTITIONED BY</span> clause stores all the\n            data files in the same physical location, which can lead to scalability problems when the data volume\n            becomes large.\n          </p><p>\n            On the other hand, adapting tables that were already partitioned in a different database system could\n            produce an Impala table with a high number of partitions and not enough data in each one, leading to\n            underutilization of Impala's parallel query features.\n          </p><p>\n            See <span>partitioning</span> for details about setting up partitioning and\n            tuning the performance of queries on partitioned tables.\n          </p></li><li><p>\n            The <span class=\"sql-docs-inline-code\">INSERT ... VALUES</span> syntax is suitable for setting up toy tables with a few rows for\n            functional testing, but because each such statement creates a separate tiny file in HDFS, it is not a\n            scalable technique for loading megabytes or gigabytes (let alone petabytes) of data. Consider revising\n            your data load process to produce raw data files outside of Impala, then setting up Impala external\n            tables or using the <span class=\"sql-docs-inline-code\">LOAD DATA</span> statement to use those data files instantly in Impala\n            tables, with no conversion or indexing stage. See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#external_tables\"><h4>External Tables</h4></a> and\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_load_data.xml#load_data\">LOAD DATA Statement</a> for details about the Impala techniques for working with\n            data files produced outside of Impala; see <span>tutorial etl</span> for examples\n            of ETL workflow for Impala.\n          </p></li><li><p>\n            If your ETL process is not optimized for Hadoop, you might end up with highly fragmented small data\n            files, or a single giant data file that cannot take advantage of distributed parallel queries or\n            partitioning. In this case, use an <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> statement to copy the data into a\n            new table and reorganize into a more efficient layout in the same operation. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#insert\">INSERT Statement</a> for details about the <span class=\"sql-docs-inline-code\">INSERT</span> statement.\n          </p><p>\n            You can do <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> into a table with a more efficient file format (see\n            <span>file formats</span>) or from an unpartitioned table into a partitioned\n            one (see <span>partitioning</span>).\n          </p></li><li><p>\n            The number of expressions allowed in an Impala query might be smaller than for some other database\n            systems, causing failures for very complicated queries (typically produced by automated SQL\n            generators). Where practical, keep the number of expressions in the <span class=\"sql-docs-inline-code\">WHERE</span> clauses to\n            approximately 2000 or fewer. As a workaround, set the query option\n            <span class=\"sql-docs-inline-code\">DISABLE_CODEGEN=true</span> if queries fail for this reason. See\n            <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_disable_codegen.xml#disable_codegen\">DISABLE_CODEGEN Query Option</a> for details.\n          </p></li><li><p>\n            If practical, rewrite <span class=\"sql-docs-inline-code\">UNION</span> queries to use the <span class=\"sql-docs-inline-code\">UNION ALL</span> operator\n            instead. <span id=\"../Impala/docs/topics/impala_porting.xml_union_all_vs_union\" class=\"sql-docs-inline-code\">Prefer <span class=\"sql-docs-inline-code\">UNION ALL</span> over <span class=\"sql-docs-inline-code\">UNION</span> when you know the\n        data sets are disjoint or duplicate values are not a problem; <span class=\"sql-docs-inline-code\">UNION ALL</span> is more efficient\n        because it avoids materializing and sorting the entire result set to eliminate duplicate values.</span></p></li></ul></div></div><div id=\"../Impala/docs/topics/impala_porting.xml_porting_next\"><h4>Next Porting Steps after Verifying Syntax and Semantics</h4><div><p>\n        Throughout this section, some of the decisions you make during the porting process also have a substantial\n        impact on performance. After your SQL code is ported and working correctly, doublecheck the\n        performance-related aspects of your schema design, physical layout, and queries to make sure that the\n        ported application is taking full advantage of Impala's parallelism, performance-related SQL features, and\n        integration with Hadoop components.\n      </p><ul><li>\n          Have you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> statement on each table involved in join queries? Have\n          you also run <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> for each table used as the source table in an <span class=\"sql-docs-inline-code\">INSERT\n          ... SELECT</span> or <span class=\"sql-docs-inline-code\">CREATE TABLE AS SELECT</span> statement?\n        </li><li>\n          Are you using the most efficient file format for your data volumes, table structure, and query\n          characteristics?\n        </li><li>\n          Are you using partitioning effectively? That is, have you partitioned on columns that are often used for\n          filtering in <span class=\"sql-docs-inline-code\">WHERE</span> clauses? Have you partitioned at the right granularity so that there\n          is enough data in each partition to parallelize the work for each query?\n        </li><li>\n          Does your ETL process produce a relatively small number of multi-megabyte data files (good) rather than a\n          huge number of small files (bad)?\n        </li></ul><p>\n        See <span>performance</span> for details about the whole performance tuning\n        process.\n      </p></div></div>","title":"Porting SQL from Other Database Systems to Impala"}