{"body":"<div><p>\n      An aggregate function that returns a value that is approximately the median (midpoint) of values in the set\n      of input values.\n    </p><p id=\"../Impala/docs/topics/impala_appx_median.xml_syntax_blurb\"><b>Syntax:</b></p><div class=\"sql-docs-code-block\">APPX_MEDIAN([DISTINCT | ALL] <span class=\"sql-docs-variable\">expression</span>)<br/></div><p>\n      This function works with any input type, because the only requirement is that the type supports less-than and\n      greater-than comparison operators.\n    </p><p id=\"../Impala/docs/topics/impala_appx_median.xml_usage_notes_blurb\"><b>Usage notes:</b></p><p>\n      Because the return value represents the estimated midpoint, it might not reflect the precise midpoint value,\n      especially if the cardinality of the input values is very high. If the cardinality is low (up to\n      approximately 20,000), the result is more accurate because the sampling considers all or almost all of the\n      different values.\n    </p><p id=\"../Impala/docs/topics/impala_appx_median.xml_return_type_same_except_string\"><b>Return type:</b> Same as the input value, except for <span class=\"sql-docs-inline-code\">CHAR</span> and <span class=\"sql-docs-inline-code\">VARCHAR</span>\n        arguments which produce a <span class=\"sql-docs-inline-code\">STRING</span> result\n      </p><p>\n      The return value is always the same as one of the input values, not an <q>in-between</q> value produced by\n      averaging.\n    </p><p id=\"../Impala/docs/topics/impala_appx_median.xml_restrictions_blurb\"><b>Restrictions:</b></p><p id=\"../Impala/docs/topics/impala_appx_median.xml_analytic_not_allowed_caveat\">\n        This function cannot be used in an analytic context. That is, the <span class=\"sql-docs-inline-code\">OVER()</span> clause is not allowed at all with this function.\n      </p><p>\n      The <span class=\"sql-docs-inline-code\">APPX_MEDIAN</span> function returns only the first 10 characters for\n      string values (string, varchar, char). Additional characters are truncated.\n    </p><p id=\"../Impala/docs/topics/impala_appx_median.xml_example_blurb\"><b>Examples:</b></p><p>\n      The following example uses a table of a million random floating-point numbers ranging up to approximately\n      50,000. The average is approximately 25,000. Because of the random distribution, we would expect the median\n      to be close to this same number. Computing the precise median is a more intensive operation than computing\n      the average, because it requires keeping track of every distinct value and how many times each occurs. The\n      <span class=\"sql-docs-inline-code\">APPX_MEDIAN()</span> function uses a sampling algorithm to return an approximate result, which in\n      this case is close to the expected value. To make sure that the value is not substantially out of range due\n      to a skewed distribution, subsequent queries confirm that there are approximately 500,000 values higher than\n      the <span class=\"sql-docs-inline-code\">APPX_MEDIAN()</span> value, and approximately 500,000 values lower than the\n      <span class=\"sql-docs-inline-code\">APPX_MEDIAN()</span> value.\n    </p><div class=\"sql-docs-code-block\">[localhost:21000] > select min(x), max(x), avg(x) from million_numbers;<br/>+-------------------+-------------------+-------------------+<br/>| min(x)            | max(x)            | avg(x)            |<br/>+-------------------+-------------------+-------------------+<br/>| 4.725693727250069 | 49994.56852674231 | 24945.38563793553 |<br/>+-------------------+-------------------+-------------------+<br/>[localhost:21000] > select appx_median(x) from million_numbers;<br/>+----------------+<br/>| appx_median(x) |<br/>+----------------+<br/>| 24721.6        |<br/>+----------------+<br/>[localhost:21000] > select count(x) as higher from million_numbers where x > (select appx_median(x) from million_numbers);<br/>+--------+<br/>| higher |<br/>+--------+<br/>| 502013 |<br/>+--------+<br/>[localhost:21000] > select count(x) as lower from million_numbers where x < (select appx_median(x) from million_numbers);<br/>+--------+<br/>| lower  |<br/>+--------+<br/>| 497987 |<br/>+--------+<br/></div><p>\n      The following example computes the approximate median using a subset of the values from the table, and then\n      confirms that the result is a reasonable estimate for the midpoint.\n    </p><div class=\"sql-docs-code-block\">[localhost:21000] > select appx_median(x) from million_numbers where x between 1000 and 5000;<br/>+-------------------+<br/>| appx_median(x)    |<br/>+-------------------+<br/>| 3013.107787358159 |<br/>+-------------------+<br/>[localhost:21000] > select count(x) as higher from million_numbers where x between 1000 and 5000 and x > 3013.107787358159;<br/>+--------+<br/>| higher |<br/>+--------+<br/>| 37692  |<br/>+--------+<br/>[localhost:21000] > select count(x) as lower from million_numbers where x between 1000 and 5000 and x < 3013.107787358159;<br/>+-------+<br/>| lower |<br/>+-------+<br/>| 37089 |<br/>+-------+<br/></div></div>","title":"APPX_MEDIAN Function"}