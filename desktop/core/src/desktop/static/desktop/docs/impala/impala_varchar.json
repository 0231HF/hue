{"body":"<div><p>\n      A variable-length character type, truncated during processing if necessary to fit within the specified\n      length.\n    </p><p id=\"../Impala/docs/topics/impala_varchar.xml_syntax_blurb\"><b>Syntax:</b></p><p>\n      In the column definition of a <span class=\"sql-docs-inline-code\">CREATE TABLE</span> statement:\n    </p><div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> VARCHAR(<span class=\"sql-docs-variable\">max_length</span>)</div><p>\n      The maximum length you can specify is 65,535.\n    </p><p id=\"../Impala/docs/topics/impala_varchar.xml_partitioning_bad\"><b>Partitioning:</b> This type can be used for partition key columns. Because of the efficiency advantage\n        of numeric values over character-based values, if the partition key is a string representation of a number,\n        prefer to use an integer type with sufficient range (<span class=\"sql-docs-inline-code\">INT</span>, <span class=\"sql-docs-inline-code\">BIGINT</span>, and so\n        on) where practical.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_hbase_no\"><b>HBase considerations:</b> This data type cannot be used with HBase tables.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_parquet_blurb\"><b>Parquet considerations:</b></p><ul><li>\n        This type can be read from and written to Parquet files.\n      </li><li>\n        There is no requirement for a particular level of Parquet.\n      </li><li>\n        Parquet files generated by Impala and containing this type can be freely interchanged with other components\n        such as Hive and MapReduce.\n      </li><li>\n        Parquet data files can contain values that are longer than allowed by the\n        <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span> length limit. Impala ignores any extra trailing characters\n        when it processes those values during a query.\n      </li></ul><p id=\"../Impala/docs/topics/impala_varchar.xml_text_blurb\"><b>Text table considerations:</b></p><p>\n      Text data files can contain values that are longer than allowed by the\n      <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span> length limit. Any extra trailing characters are ignored when\n      Impala processes those values during a query.\n    </p><p><b>Avro considerations:</b></p><p id=\"../Impala/docs/topics/impala_varchar.xml_avro_2gb_strings\">\n        The Avro specification allows string values up to 2**64 bytes in length.\n        Impala queries for Avro tables use 32-bit integers to hold string lengths.\n        In Impala 2.5 and higher, Impala truncates <span class=\"sql-docs-inline-code\">CHAR</span>\n        and <span class=\"sql-docs-inline-code\">VARCHAR</span> values in Avro tables to (2**31)-1 bytes.\n        If a query encounters a <span class=\"sql-docs-inline-code\">STRING</span> value longer than (2**31)-1\n        bytes in an Avro table, the query fails. In earlier releases,\n        encountering such long values in an Avro table could cause a crash.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_schema_evolution_blurb\"><b>Schema evolution considerations:</b></p><p>\n      You can use <span class=\"sql-docs-inline-code\">ALTER TABLE ... CHANGE</span> to switch column data types to and from\n      <span class=\"sql-docs-inline-code\">VARCHAR</span>. You can convert from <span class=\"sql-docs-inline-code\">STRING</span> to\n      <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span>, or from <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span> to\n      <span class=\"sql-docs-inline-code\">STRING</span>, or from <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">n</span>)</span> to\n      <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span>, or from <span class=\"sql-docs-inline-code\">VARCHAR(<span class=\"sql-docs-variable\">n</span>)</span> to\n      <span class=\"sql-docs-inline-code\">CHAR(<span class=\"sql-docs-variable\">n</span>)</span>. When switching back and forth between <span class=\"sql-docs-inline-code\">VARCHAR</span>\n      and <span class=\"sql-docs-inline-code\">CHAR</span>, you can also change the length value. This schema evolution works the same for\n      tables using any file format. If a table contains values longer than the maximum length defined for a\n      <span class=\"sql-docs-inline-code\">VARCHAR</span> column, Impala does not return an error. Any extra trailing characters are ignored\n      when Impala processes those values during a query.\n    </p><p id=\"../Impala/docs/topics/impala_varchar.xml_compatibility_blurb\"><b>Compatibility:</b></p><p>\n      This type is available in Impala 2.0 or higher.\n    </p><p id=\"../Impala/docs/topics/impala_varchar.xml_internals_min_bytes\"><b>Internal details:</b> Represented in memory as a byte array with the minimum size needed to represent\n        each value.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_added_in_20\"><b>Added in:</b>Impala 2.0.0</p><p id=\"../Impala/docs/topics/impala_varchar.xml_column_stats_variable\"><b>Column statistics considerations:</b> Because the values of this type have variable size, none of the\n        column statistics fields are filled in until you run the <span class=\"sql-docs-inline-code\">COMPUTE STATS</span> statement.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_kudu_blurb\"><b>Kudu considerations:</b></p><p id=\"../Impala/docs/topics/impala_varchar.xml_kudu_unsupported_data_type\">\n        Currently, the data types <span class=\"sql-docs-inline-code\">CHAR</span>, <span class=\"sql-docs-inline-code\">VARCHAR</span>,\n        <span class=\"sql-docs-inline-code\">ARRAY</span>, <span class=\"sql-docs-inline-code\">MAP</span>, and <span class=\"sql-docs-inline-code\">STRUCT</span> cannot be used with Kudu tables.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_restrictions_blurb\"><b>Restrictions:</b></p><p id=\"../Impala/docs/topics/impala_varchar.xml_blobs_are_strings\">\n        All data in <span class=\"sql-docs-inline-code\">CHAR</span> and <span class=\"sql-docs-inline-code\">VARCHAR</span> columns must be in a character encoding that\n        is compatible with UTF-8. If you have binary data from another database system (that is, a BLOB type), use\n        a <span class=\"sql-docs-inline-code\">STRING</span> column to hold it.\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_example_blurb\"><b>Examples:</b></p><p>\n      The following examples show how long and short <span class=\"sql-docs-inline-code\">VARCHAR</span> values are treated. Values longer\n      than the maximum specified length are truncated by <span class=\"sql-docs-inline-code\">CAST()</span>, or when queried from existing\n      data files. Values shorter than the maximum specified length are represented as the actual length of the\n      value, with no extra padding as seen with <span class=\"sql-docs-inline-code\">CHAR</span> values.\n    </p><div class=\"sql-docs-code-block\">create table varchar_1 (s varchar(1));<br/>create table varchar_4 (s varchar(4));<br/>create table varchar_20 (s varchar(20));<br/><br/>insert into varchar_1 values (cast('a' as varchar(1))), (cast('b' as varchar(1))), (cast('hello' as varchar(1))), (cast('world' as varchar(1)));<br/>insert into varchar_4 values (cast('a' as varchar(4))), (cast('b' as varchar(4))), (cast('hello' as varchar(4))), (cast('world' as varchar(4)));<br/>insert into varchar_20 values (cast('a' as varchar(20))), (cast('b' as varchar(20))), (cast('hello' as varchar(20))), (cast('world' as varchar(20)));<br/><br/>select * from varchar_1;<br/>+---+<br/>| s |<br/>+---+<br/>| a |<br/>| b |<br/>| h |<br/>| w |<br/>+---+<br/>select * from varchar_4;<br/>+------+<br/>| s    |<br/>+------+<br/>| a    |<br/>| b    |<br/>| hell |<br/>| worl |<br/>+------+<br/>[localhost:21000] > select * from varchar_20;<br/>+-------+<br/>| s     |<br/>+-------+<br/>| a     |<br/>| b     |<br/>| hello |<br/>| world |<br/>+-------+<br/>select concat('[',s,']') as s from varchar_20;<br/>+---------+<br/>| s       |<br/>+---------+<br/>| [a]     |<br/>| [b]     |<br/>| [hello] |<br/>| [world] |<br/>+---------+<br/></div><p>\n      The following example shows how identical <span class=\"sql-docs-inline-code\">VARCHAR</span> values compare as equal, even if the\n      columns are defined with different maximum lengths. Both tables contain <span class=\"sql-docs-inline-code\">'a'</span> and\n      <span class=\"sql-docs-inline-code\">'b'</span> values. The longer <span class=\"sql-docs-inline-code\">'hello'</span> and <span class=\"sql-docs-inline-code\">'world'</span> values from the\n      <span class=\"sql-docs-inline-code\">VARCHAR_20</span> table were truncated when inserted into the <span class=\"sql-docs-inline-code\">VARCHAR_1</span> table.\n    </p><div class=\"sql-docs-code-block\">select s from varchar_1 join varchar_20 using (s);<br/>+-------+<br/>| s     |<br/>+-------+<br/>| a     |<br/>| b     |<br/>+-------+<br/></div><p>\n      The following examples show how <span class=\"sql-docs-inline-code\">VARCHAR</span> values are freely interchangeable with\n      <span class=\"sql-docs-inline-code\">STRING</span> values in contexts such as comparison operators and built-in functions:\n    </p><div class=\"sql-docs-code-block\">select length(cast('foo' as varchar(100))) as length;<br/>+--------+<br/>| length |<br/>+--------+<br/>| 3      |<br/>+--------+<br/>select cast('xyz' as varchar(5)) > cast('abc' as varchar(10)) as greater;<br/>+---------+<br/>| greater |<br/>+---------+<br/>| true    |<br/>+---------+<br/></div><p id=\"../Impala/docs/topics/impala_varchar.xml_udf_blurb_no\"><b>UDF considerations:</b> This type cannot be used for the argument or return type of a user-defined\n        function (UDF) or user-defined aggregate function (UDA).\n      </p><p id=\"../Impala/docs/topics/impala_varchar.xml_related_info\"><b>Related information:</b></p><p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string.xml#string\">STRING Data Type</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_char.xml#char\">CHAR Data Type (Impala 2.0 or higher only)</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_literals.xml#string_literals\"><h4>String Literals</h4></a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string_functions.xml#string_functions\">Impala String Functions</a></p></div>","title":"VARCHAR Data Type (Impala 2.0 or higher only)"}