{"body":"<div><p>\n      Bit manipulation functions perform bitwise operations involved in scientific processing or computer science algorithms.\n      For example, these functions include setting, clearing, or testing bits within an integer value, or changing the\n      positions of bits with or without wraparound.\n    </p> <p>\n      If a function takes two integer arguments that are required to be of the same type, the smaller argument is promoted\n      to the type of the larger one if required. For example, <span class=\"sql-docs-inline-code\">BITAND(1,4096)</span>  treats both arguments as\n      <span class=\"sql-docs-inline-code\">SMALLINT</span> , because 1 can be represented as a <span class=\"sql-docs-inline-code\">TINYINT</span>  but 4096 requires a <span class=\"sql-docs-inline-code\">SMALLINT</span> .\n    </p> <p>\n     Remember that all Impala integer values are signed. Therefore, when dealing with binary values where the most significant\n     bit is 1, the specified or returned values might be negative when represented in base 10.\n    </p> <p>\n      Whenever any argument is <span class=\"sql-docs-inline-code\">NULL</span> , either the input value, bit position, or number of shift or rotate positions,\n      the return value from any of these functions is also <span class=\"sql-docs-inline-code\">NULL</span> </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_related_info\"><b>Related information:</b> </p> <p>\n      The bit functions operate on all the integral data types: <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_int.xml#int\">INT Data Type</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_bigint.xml#bigint\">BIGINT Data Type</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_smallint.xml#smallint\">SMALLINT Data Type</a>, and\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tinyint.xml#tinyint\">TINYINT Data Type</a>.\n    </p> <p><b>Function reference:</b> </p> <p>\n      Impala supports the following bit functions:\n    </p> <dl><dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_bitand\"><dt><span class=\"sql-docs-inline-code\">bitand(integer_type a, same_type b)</span> </dt> <dd><b>Purpose:</b>  Returns an integer value representing the bits that are set to 1 in both of the arguments.\n          If the arguments are of different sizes, the smaller is promoted to the type of the larger.\n          <p><b>Usage notes:</b>  The <span class=\"sql-docs-inline-code\">bitand()</span>  function is equivalent to the <span class=\"sql-docs-inline-code\">&</span>  binary operator.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show the results of ANDing integer values.\n            255 contains all 1 bits in its lowermost 7 bits.\n            32767 contains all 1 bits in its lowermost 15 bits.\n            \n            You can use the <span class=\"sql-docs-inline-code\">bin()</span>  function to check the binary representation of any\n            integer value, although the result is always represented as a 64-bit value.\n            If necessary, the smaller argument is promoted to the\n            type of the larger one.\n          </p> <div class=\"sql-docs-code-block\">select bitand(255, 32767); /* 0000000011111111 & 0111111111111111 */<br/>+--------------------+<br/>| bitand(255, 32767) |<br/>+--------------------+<br/>| 255                |<br/>+--------------------+<br/><br/>select bitand(32767, 1); /* 0111111111111111 & 0000000000000001 */<br/>+------------------+<br/>| bitand(32767, 1) |<br/>+------------------+<br/>| 1                |<br/>+------------------+<br/><br/>select bitand(32, 16); /* 00010000 & 00001000 */<br/>+----------------+<br/>| bitand(32, 16) |<br/>+----------------+<br/>| 0              |<br/>+----------------+<br/><br/>select bitand(12,5); /* 00001100 & 00000101 */<br/>+---------------+<br/>| bitand(12, 5) |<br/>+---------------+<br/>| 4             |<br/>+---------------+<br/><br/>select bitand(-1,15); /* 11111111 & 00001111 */<br/>+----------------+<br/>| bitand(-1, 15) |<br/>+----------------+<br/>| 15             |<br/>+----------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_bitnot\"><dt><span class=\"sql-docs-inline-code\">bitnot(integer_type a)</span> </dt> <dd><b>Purpose:</b>  Inverts all the bits of the input argument.\n          <p><b>Usage notes:</b>  The <span class=\"sql-docs-inline-code\">bitnot()</span>  function is equivalent to the <span class=\"sql-docs-inline-code\">~</span>  unary operator.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            These examples illustrate what happens when you flip all the bits of an integer value.\n            The sign always changes. The decimal representation is one different between the positive and\n            negative values.\n            </p> <div class=\"sql-docs-code-block\">select bitnot(127); /* 01111111 -> 10000000 */<br/>+-------------+<br/>| bitnot(127) |<br/>+-------------+<br/>| -128        |<br/>+-------------+<br/><br/>select bitnot(16); /* 00010000 -> 11101111 */<br/>+------------+<br/>| bitnot(16) |<br/>+------------+<br/>| -17        |<br/>+------------+<br/><br/>select bitnot(0); /* 00000000 -> 11111111 */<br/>+-----------+<br/>| bitnot(0) |<br/>+-----------+<br/>| -1        |<br/>+-----------+<br/><br/>select bitnot(-128); /* 10000000 -> 01111111 */<br/>+--------------+<br/>| bitnot(-128) |<br/>+--------------+<br/>| 127          |<br/>+--------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_bitor\"><dt><span class=\"sql-docs-inline-code\">bitor(integer_type a, same_type b)</span> </dt> <dd><b>Purpose:</b>  Returns an integer value representing the bits that are set to 1 in either of the arguments.\n          If the arguments are of different sizes, the smaller is promoted to the type of the larger.\n          <p><b>Usage notes:</b>  The <span class=\"sql-docs-inline-code\">bitor()</span>  function is equivalent to the <span class=\"sql-docs-inline-code\">|</span>  binary operator.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show the results of ORing integer values.\n          </p> <div class=\"sql-docs-code-block\">select bitor(1,4); /* 00000001 | 00000100 */<br/>+-------------+<br/>| bitor(1, 4) |<br/>+-------------+<br/>| 5           |<br/>+-------------+<br/><br/>select bitor(16,48); /* 00001000 | 00011000 */<br/>+---------------+<br/>| bitor(16, 48) |<br/>+---------------+<br/>| 48            |<br/>+---------------+<br/><br/>select bitor(0,7); /* 00000000 | 00000111 */<br/>+-------------+<br/>| bitor(0, 7) |<br/>+-------------+<br/>| 7           |<br/>+-------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_bitxor\"><dt><span class=\"sql-docs-inline-code\">bitxor(integer_type a, same_type b)</span> </dt> <dd><b>Purpose:</b>  Returns an integer value representing the bits that are set to 1 in one but not both of the arguments.\n          If the arguments are of different sizes, the smaller is promoted to the type of the larger.\n          <p><b>Usage notes:</b>  The <span class=\"sql-docs-inline-code\">bitxor()</span>  function is equivalent to the <span class=\"sql-docs-inline-code\">^</span>  binary operator.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show the results of XORing integer values.\n            XORing a non-zero value with zero returns the non-zero value.\n            XORing two identical values returns zero, because all the 1 bits from the first argument are also 1 bits in the second argument.\n            XORing different non-zero values turns off some bits and leaves others turned on, based on whether the same bit is set in both arguments.\n          </p> <div class=\"sql-docs-code-block\">select bitxor(0,15); /* 00000000 ^ 00001111 */<br/>+---------------+<br/>| bitxor(0, 15) |<br/>+---------------+<br/>| 15            |<br/>+---------------+<br/><br/>select bitxor(7,7); /* 00000111 ^ 00000111 */<br/>+--------------+<br/>| bitxor(7, 7) |<br/>+--------------+<br/>| 0            |<br/>+--------------+<br/><br/>select bitxor(8,4); /* 00001000 ^ 00000100 */<br/>+--------------+<br/>| bitxor(8, 4) |<br/>+--------------+<br/>| 12           |<br/>+--------------+<br/><br/>select bitxor(3,7); /* 00000011 ^ 00000111 */<br/>+--------------+<br/>| bitxor(3, 7) |<br/>+--------------+<br/>| 4            |<br/>+--------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_countset\"><dt><span class=\"sql-docs-inline-code\">countset(integer_type a [, int zero_or_one])</span> </dt> <dd><b>Purpose:</b>  By default, returns the number of 1 bits in the specified integer value.\n          If the optional second argument is set to zero, it returns the number of 0 bits instead.\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            In discussions of information theory, this operation is referred to as the\n            <q><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Hamming_weight\">population count</a></q> \n            or <q>popcount</q> .\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show how to count the number of 1 bits in an integer value.\n          </p> <div class=\"sql-docs-code-block\">select countset(1); /* 00000001 */<br/>+-------------+<br/>| countset(1) |<br/>+-------------+<br/>| 1           |<br/>+-------------+<br/><br/>select countset(3); /* 00000011 */<br/>+-------------+<br/>| countset(3) |<br/>+-------------+<br/>| 2           |<br/>+-------------+<br/><br/>select countset(16); /* 00010000 */<br/>+--------------+<br/>| countset(16) |<br/>+--------------+<br/>| 1            |<br/>+--------------+<br/><br/>select countset(17); /* 00010001 */<br/>+--------------+<br/>| countset(17) |<br/>+--------------+<br/>| 2            |<br/>+--------------+<br/><br/>select countset(7,1); /* 00000111 = 3 1 bits; the function counts 1 bits by default */<br/>+----------------+<br/>| countset(7, 1) |<br/>+----------------+<br/>| 3              |<br/>+----------------+<br/><br/>select countset(7,0); /* 00000111 = 5 0 bits; third argument can only be 0 or 1 */<br/>+----------------+<br/>| countset(7, 0) |<br/>+----------------+<br/>| 5              |<br/>+----------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_getbit\"><dt><span class=\"sql-docs-inline-code\">getbit(integer_type a, int position)</span> </dt> <dd><b>Purpose:</b>  Returns a 0 or 1 representing the bit at a\n          specified position. The positions are numbered right to left, starting at zero.\n          The position argument cannot be negative.\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            When you use a literal input value, it is treated as an 8-bit, 16-bit,\n            and so on value, the smallest type that is appropriate.\n            The type of the input value limits the range of the positions.\n            Cast the input value to the appropriate type if you need to\n            ensure it is treated as a 64-bit, 32-bit, and so on value.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <p>\n            The following examples show how to test a specific bit within an integer value.\n          </p> <div class=\"sql-docs-code-block\">select getbit(1,0); /* 00000001 */<br/>+--------------+<br/>| getbit(1, 0) |<br/>+--------------+<br/>| 1            |<br/>+--------------+<br/><br/>select getbit(16,1) /* 00010000 */<br/>+---------------+<br/>| getbit(16, 1) |<br/>+---------------+<br/>| 0             |<br/>+---------------+<br/><br/>select getbit(16,4) /* 00010000 */<br/>+---------------+<br/>| getbit(16, 4) |<br/>+---------------+<br/>| 1             |<br/>+---------------+<br/><br/>select getbit(16,5) /* 00010000 */<br/>+---------------+<br/>| getbit(16, 5) |<br/>+---------------+<br/>| 0             |<br/>+---------------+<br/><br/>select getbit(-1,3); /* 11111111 */<br/>+---------------+<br/>| getbit(-1, 3) |<br/>+---------------+<br/>| 1             |<br/>+---------------+<br/><br/>select getbit(-1,25); /* 11111111 */<br/>ERROR: Invalid bit position: 25<br/><br/>select getbit(cast(-1 as int),25); /* 11111111111111111111111111111111 */<br/>+-----------------------------+<br/>| getbit(cast(-1 as int), 25) |<br/>+-----------------------------+<br/>| 1                           |<br/>+-----------------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_rotateleft\"><dt><span class=\"sql-docs-inline-code\">rotateleft(integer_type a, int positions)</span> </dt> <dd><b>Purpose:</b>  Rotates an integer value left by a specified number of bits.\n          As the most significant bit is taken out of the original value,\n          if it is a 1 bit, it is <q>rotated</q>  back to the least significant bit.\n          Therefore, the final value has the same number of 1 bits as the original value,\n          just in different positions.\n          In computer science terms, this operation is a\n          <q><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Circular_shift\">circular shift</a></q> .\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            Specifying a second argument of zero leaves the original value unchanged.\n            Rotating a -1 value by any number of positions still returns -1,\n            because the original value has all 1 bits and all the 1 bits are\n            preserved during rotation.\n            Similarly, rotating a 0 value by any number of positions still returns 0.\n            Rotating a value by the same number of bits as in the value returns the same value.\n            Because this is a circular operation, the number of positions is not limited\n            to the number of bits in the input value.\n            For example, rotating an 8-bit value by 1, 9, 17, and so on positions returns an\n            identical result in each case.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">select rotateleft(1,4); /* 00000001 -> 00010000 */<br/>+------------------+<br/>| rotateleft(1, 4) |<br/>+------------------+<br/>| 16               |<br/>+------------------+<br/><br/>select rotateleft(-1,155); /* 11111111 -> 11111111 */<br/>+---------------------+<br/>| rotateleft(-1, 155) |<br/>+---------------------+<br/>| -1                  |<br/>+---------------------+<br/><br/>select rotateleft(-128,1); /* 10000000 -> 00000001 */<br/>+---------------------+<br/>| rotateleft(-128, 1) |<br/>+---------------------+<br/>| 1                   |<br/>+---------------------+<br/><br/>select rotateleft(-127,3); /* 10000001 -> 00001100 */<br/>+---------------------+<br/>| rotateleft(-127, 3) |<br/>+---------------------+<br/>| 12                  |<br/>+---------------------+<br/><br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_rotateright\"><dt><span class=\"sql-docs-inline-code\">rotateright(integer_type a, int positions)</span> </dt> <dd><b>Purpose:</b>  Rotates an integer value right by a specified number of bits.\n          As the least significant bit is taken out of the original value,\n          if it is a 1 bit, it is <q>rotated</q>  back to the most significant bit.\n          Therefore, the final value has the same number of 1 bits as the original value,\n          just in different positions.\n          In computer science terms, this operation is a\n          <q><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Circular_shift\">circular shift</a></q> .\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            Specifying a second argument of zero leaves the original value unchanged.\n            Rotating a -1 value by any number of positions still returns -1,\n            because the original value has all 1 bits and all the 1 bits are\n            preserved during rotation.\n            Similarly, rotating a 0 value by any number of positions still returns 0.\n            Rotating a value by the same number of bits as in the value returns the same value.\n            Because this is a circular operation, the number of positions is not limited\n            to the number of bits in the input value.\n            For example, rotating an 8-bit value by 1, 9, 17, and so on positions returns an\n            identical result in each case.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">select rotateright(16,4); /* 00010000 -> 00000001 */<br/>+--------------------+<br/>| rotateright(16, 4) |<br/>+--------------------+<br/>| 1                  |<br/>+--------------------+<br/><br/>select rotateright(-1,155); /* 11111111 -> 11111111 */<br/>+----------------------+<br/>| rotateright(-1, 155) |<br/>+----------------------+<br/>| -1                   |<br/>+----------------------+<br/><br/>select rotateright(-128,1); /* 10000000 -> 01000000 */<br/>+----------------------+<br/>| rotateright(-128, 1) |<br/>+----------------------+<br/>| 64                   |<br/>+----------------------+<br/><br/>select rotateright(-127,3); /* 10000001 -> 00110000 */<br/>+----------------------+<br/>| rotateright(-127, 3) |<br/>+----------------------+<br/>| 48                   |<br/>+----------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_setbit\"><dt><span class=\"sql-docs-inline-code\">setbit(integer_type a, int position [, int zero_or_one])</span> </dt> <dd><b>Purpose:</b>  By default, changes a bit at a specified position to a 1, if it is not already.\n          If the optional third argument is set to zero, the specified bit is set to 0 instead.\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> \n          If the bit at the specified position was already 1 (by default)\n          or 0 (with a third argument of zero), the return value is\n          the same as the first argument.\n          The positions are numbered right to left, starting at zero.\n          (Therefore, the return value could be different from the first argument\n          even if the position argument is zero.)\n          The position argument cannot be negative.\n          <p>\n            When you use a literal input value, it is treated as an 8-bit, 16-bit,\n            and so on value, the smallest type that is appropriate.\n            The type of the input value limits the range of the positions.\n            Cast the input value to the appropriate type if you need to\n            ensure it is treated as a 64-bit, 32-bit, and so on value.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">select setbit(0,0); /* 00000000 -> 00000001 */<br/>+--------------+<br/>| setbit(0, 0) |<br/>+--------------+<br/>| 1            |<br/>+--------------+<br/><br/>select setbit(0,3); /* 00000000 -> 00001000 */<br/>+--------------+<br/>| setbit(0, 3) |<br/>+--------------+<br/>| 8            |<br/>+--------------+<br/><br/>select setbit(7,3); /* 00000111 -> 00001111 */<br/>+--------------+<br/>| setbit(7, 3) |<br/>+--------------+<br/>| 15           |<br/>+--------------+<br/><br/>select setbit(15,3); /* 00001111 -> 00001111 */<br/>+---------------+<br/>| setbit(15, 3) |<br/>+---------------+<br/>| 15            |<br/>+---------------+<br/><br/>select setbit(0,32); /* By default, 0 is a TINYINT with only 8 bits. */<br/>ERROR: Invalid bit position: 32<br/><br/>select setbit(cast(0 as bigint),32); /* For BIGINT, the position can be 0..63. */<br/>+-------------------------------+<br/>| setbit(cast(0 as bigint), 32) |<br/>+-------------------------------+<br/>| 4294967296                    |<br/>+-------------------------------+<br/><br/>select setbit(7,3,1); /* 00000111 -> 00001111; setting to 1 is the default */<br/>+-----------------+<br/>| setbit(7, 3, 1) |<br/>+-----------------+<br/>| 15              |<br/>+-----------------+<br/><br/>select setbit(7,2,0); /* 00000111 -> 00000011; third argument of 0 clears instead of sets */<br/>+-----------------+<br/>| setbit(7, 2, 0) |<br/>+-----------------+<br/>| 3               |<br/>+-----------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_shiftleft\"><dt><span class=\"sql-docs-inline-code\">shiftleft(integer_type a, int positions)</span> </dt> <dd><b>Purpose:</b>  Shifts an integer value left by a specified number of bits.\n          As the most significant bit is taken out of the original value,\n          it is discarded and the least significant bit becomes 0.\n          In computer science terms, this operation is a <q><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Logical_shift\">logical shift</a></q> .\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n            The final value has either the same number of 1 bits as the original value, or fewer.\n            Shifting an 8-bit value by 8 positions, a 16-bit value by 16 positions, and so on produces\n            a result of zero.\n          </p> <p>\n            Specifying a second argument of zero leaves the original value unchanged.\n            Shifting any value by 0 returns the original value.\n            Shifting any value by 1 is the same as multiplying it by 2,\n            as long as the value is small enough; larger values eventually\n            become negative when shifted, as the sign bit is set.\n            Starting with the value 1 and shifting it left by N positions gives\n            the same result as 2 to the Nth power, or <span class=\"sql-docs-inline-code\">pow(2,<span class=\"sql-docs-variable\">N</span> )</span> .\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">select shiftleft(1,0); /* 00000001 -> 00000001 */<br/>+-----------------+<br/>| shiftleft(1, 0) |<br/>+-----------------+<br/>| 1               |<br/>+-----------------+<br/><br/>select shiftleft(1,3); /* 00000001 -> 00001000 */<br/>+-----------------+<br/>| shiftleft(1, 3) |<br/>+-----------------+<br/>| 8               |<br/>+-----------------+<br/><br/>select shiftleft(8,2); /* 00001000 -> 00100000 */<br/>+-----------------+<br/>| shiftleft(8, 2) |<br/>+-----------------+<br/>| 32              |<br/>+-----------------+<br/><br/>select shiftleft(127,1); /* 01111111 -> 11111110 */<br/>+-------------------+<br/>| shiftleft(127, 1) |<br/>+-------------------+<br/>| -2                |<br/>+-------------------+<br/><br/>select shiftleft(127,5); /* 01111111 -> 11100000 */<br/>+-------------------+<br/>| shiftleft(127, 5) |<br/>+-------------------+<br/>| -32               |<br/>+-------------------+<br/><br/>select shiftleft(-1,4); /* 11111111 -> 11110000 */<br/>+------------------+<br/>| shiftleft(-1, 4) |<br/>+------------------+<br/>| -16              |<br/>+------------------+<br/></div></dd> </dlentry> <dlentry id=\"../Impala/docs/topics/impala_bit_functions.xml_shiftright\"><dt><span class=\"sql-docs-inline-code\">shiftright(integer_type a, int positions)</span> </dt> <dd><b>Purpose:</b>  Shifts an integer value right by a specified number of bits.\n          As the least significant bit is taken out of the original value,\n          it is discarded and the most significant bit becomes 0.\n          In computer science terms, this operation is a <q><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Logical_shift\">logical shift</a></q> .\n          <p id=\"../Impala/docs/topics/impala_bit_functions.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p>\n          Therefore, the final value has either the same number of 1 bits as the original value, or fewer.\n          Shifting an 8-bit value by 8 positions, a 16-bit value by 16 positions, and so on produces\n          a result of zero.\n          </p> <p>\n            Specifying a second argument of zero leaves the original value unchanged.\n            Shifting any value by 0 returns the original value.\n            Shifting any positive value right by 1 is the same as dividing it by 2.\n            Negative values become positive when shifted right.\n          </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_return_type_same\"><b>Return type:</b>  Same as the input value\n      </p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_bit_functions.xml_example_blurb\"><b>Examples:</b> </p> <div class=\"sql-docs-code-block\">select shiftright(16,0); /* 00010000 -> 00010000 */<br/>+-------------------+<br/>| shiftright(16, 0) |<br/>+-------------------+<br/>| 16                |<br/>+-------------------+<br/><br/>select shiftright(16,4); /* 00010000 -> 00000001 */<br/>+-------------------+<br/>| shiftright(16, 4) |<br/>+-------------------+<br/>| 1                 |<br/>+-------------------+<br/><br/>select shiftright(16,5); /* 00010000 -> 00000000 */<br/>+-------------------+<br/>| shiftright(16, 5) |<br/>+-------------------+<br/>| 0                 |<br/>+-------------------+<br/><br/>select shiftright(-1,1); /* 11111111 -> 01111111 */<br/>+-------------------+<br/>| shiftright(-1, 1) |<br/>+-------------------+<br/>| 127               |<br/>+-------------------+<br/><br/>select shiftright(-1,5); /* 11111111 -> 00000111 */<br/>+-------------------+<br/>| shiftright(-1, 5) |<br/>+-------------------+<br/>| 7                 |<br/>+-------------------+<br/></div></dd> </dlentry> </dl> </div> ","title":"Impala Bit Functions"}