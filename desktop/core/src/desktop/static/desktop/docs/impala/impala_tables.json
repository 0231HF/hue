{"body":"<div><p>\n      Tables are the primary containers for data in Impala. They have the familiar row and column layout similar to\n      other database systems, plus some features such as partitioning often associated with higher-end data\n      warehouse systems.\n    </p> <p>\n      Logically, each table has a structure based on the definition of its columns, partitions, and other\n      properties.\n    </p> <p>\n      Physically, each table that uses HDFS storage is associated with a directory in HDFS. The table data consists of all the data files\n      underneath that directory:\n    </p> <ul><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#internal_tables\">Internal tables</a> are managed by Impala, and use directories\n        inside the designated Impala work area.\n      </li> <li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#external_tables\">External tables</a> use arbitrary HDFS directories, where\n        the data files are typically shared between different Hadoop components.\n      </li> <li>\n        Large-scale data is usually handled by partitioned tables, where the data files are divided among different\n        HDFS subdirectories.\n      </li> </ul> <p>\n      Impala tables can also represent data that is stored in HBase, or in the Amazon S3 filesystem (Impala 2.2 or higher),\n      or on Isilon storage devices (Impala 2.2.3 or higher).  See <span>impala hbase</span>,\n      <span>s3</span>, and <span>impala isilon</span>\n      for details about those special kinds of tables.\n    </p> <p id=\"../Impala/docs/topics/impala_tables.xml_ignore_file_extensions\">\n        Impala queries ignore files with extensions commonly used for temporary work files by Hadoop tools. Any\n        files with extensions <span class=\"sql-docs-inline-code\">.tmp</span>  or <span class=\"sql-docs-inline-code\">.copying</span>  are not considered part of the\n        Impala table. The suffix matching is case-insensitive, so for example Impala ignores both\n        <span class=\"sql-docs-inline-code\">.copying</span>  and <span class=\"sql-docs-inline-code\">.COPYING</span>  suffixes.\n      </p> <p><b>Related statements:</b> <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_table.xml#create_table\">CREATE TABLE Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_table.xml#drop_table\">DROP TABLE Statement</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE Statement</a><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_insert.xml#insert\">INSERT Statement</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_load_data.xml#load_data\">LOAD DATA Statement</a>,\n      <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_select.xml#select\">SELECT Statement</a></p> </div> <div id=\"../Impala/docs/topics/impala_tables.xml_internal_tables\"><h4>Internal Tables</h4> <div><p>\n        The default kind of table produced by the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement is known as an internal\n        table. (Its counterpart is the external table, produced by the <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span> \n        syntax.)\n      </p> <ul><li><p>\n            Impala creates a directory in HDFS to hold the data files.\n          </p> </li> <li><p>\n            You can create data in internal tables by issuing <span class=\"sql-docs-inline-code\">INSERT</span>  or <span class=\"sql-docs-inline-code\">LOAD DATA</span> \n            statements.\n          </p> </li> <li><p>\n            If you add or replace data using HDFS operations, issue the <span class=\"sql-docs-inline-code\">REFRESH</span>  command in\n            <span class=\"sql-docs-inline-code\">impala-shell</span>  so that Impala recognizes the changes in data files, block locations,\n            and so on.\n          </p> </li> <li><p>\n            When you issue a <span class=\"sql-docs-inline-code\">DROP TABLE</span>  statement, Impala physically removes all the data files\n            from the directory.\n          </p> </li> <li><p id=\"../Impala/docs/topics/impala_tables.xml_check_internal_external_table\">\n        To see whether a table is internal or external, and its associated HDFS location, issue the statement\n        <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED <span class=\"sql-docs-variable\">table_name</span> </span> . The <span class=\"sql-docs-inline-code\">Table Type</span>  field\n        displays <span class=\"sql-docs-inline-code\">MANAGED_TABLE</span>  for internal tables and <span class=\"sql-docs-inline-code\">EXTERNAL_TABLE</span>  for\n        external tables. The <span class=\"sql-docs-inline-code\">Location</span>  field displays the path of the table directory as an HDFS\n        URI.\n      </p> </li> <li><p>\n            When you issue an <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  statement to rename an internal table, all data files\n            are moved into the new HDFS directory for the table. The files are moved even if they were formerly in\n            a directory outside the Impala data directory, for example in an internal table with a\n            <span class=\"sql-docs-inline-code\">LOCATION</span>  attribute pointing to an outside HDFS directory.\n          </p> </li> </ul> <p id=\"../Impala/docs/topics/impala_tables.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_tables.xml_switch_internal_external_table\">\n        You can switch a table from internal to external, or from external to internal, by using the <span class=\"sql-docs-inline-code\">ALTER\n        TABLE</span>  statement:\n<div class=\"sql-docs-code-block\">-- Switch a table from internal to external.<br/>ALTER TABLE <span class=\"sql-docs-variable\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='TRUE');<br/><br/>-- Switch a table from external to internal.<br/>ALTER TABLE <span class=\"sql-docs-variable\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='FALSE');<br/></div></p> <p id=\"../Impala/docs/topics/impala_tables.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#external_tables\"><h4>External Tables</h4> </a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_table.xml#create_table\">CREATE TABLE Statement</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_table.xml#drop_table\">DROP TABLE Statement</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE Statement</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_describe.xml#describe\">DESCRIBE Statement</a></p> </div> </div> <div id=\"../Impala/docs/topics/impala_tables.xml_external_tables\"><h4>External Tables</h4> <div><p>\n        The syntax <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>  sets up an Impala table that points at existing data\n        files, potentially in HDFS locations outside the normal Impala data directories.. This operation saves the\n        expense of importing the data into a new table when you already have the data files in a known location in\n        HDFS, in the desired file format.\n      </p> <ul><li><p>\n            You can use Impala to query the data in this table.\n          </p> </li> <li><p>\n            You can create data in external tables by issuing <span class=\"sql-docs-inline-code\">INSERT</span>  or <span class=\"sql-docs-inline-code\">LOAD DATA</span> \n            statements.\n          </p> </li> <li><p>\n            If you add or replace data using HDFS operations, issue the <span class=\"sql-docs-inline-code\">REFRESH</span>  command in\n            <span class=\"sql-docs-inline-code\">impala-shell</span>  so that Impala recognizes the changes in data files, block locations,\n            and so on.\n          </p> </li> <li><p>\n            When you issue a <span class=\"sql-docs-inline-code\">DROP TABLE</span>  statement in Impala, that removes the connection that\n            Impala has with the associated data files, but does not physically remove the underlying data. You can\n            continue to use the data files with other Hadoop components and HDFS operations.\n          </p> </li> <li><p id=\"../Impala/docs/topics/impala_tables.xml_check_internal_external_table\">\n        To see whether a table is internal or external, and its associated HDFS location, issue the statement\n        <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED <span class=\"sql-docs-variable\">table_name</span> </span> . The <span class=\"sql-docs-inline-code\">Table Type</span>  field\n        displays <span class=\"sql-docs-inline-code\">MANAGED_TABLE</span>  for internal tables and <span class=\"sql-docs-inline-code\">EXTERNAL_TABLE</span>  for\n        external tables. The <span class=\"sql-docs-inline-code\">Location</span>  field displays the path of the table directory as an HDFS\n        URI.\n      </p> </li> <li><p>\n            When you issue an <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  statement to rename an external table, all data files\n            are left in their original locations.\n          </p> </li> <li><p>\n            You can point multiple external tables at the same HDFS directory by using the same\n            <span class=\"sql-docs-inline-code\">LOCATION</span>  attribute for each one. The tables could have different column definitions,\n            as long as the number and types of columns are compatible with the schema evolution considerations for\n            the underlying file type. For example, for text data files, one table might define a certain column as\n            a <span class=\"sql-docs-inline-code\">STRING</span>  while another defines the same column as a <span class=\"sql-docs-inline-code\">BIGINT</span> .\n          </p> </li> </ul> <p id=\"../Impala/docs/topics/impala_tables.xml_example_blurb\"><b>Examples:</b> </p> <p id=\"../Impala/docs/topics/impala_tables.xml_switch_internal_external_table\">\n        You can switch a table from internal to external, or from external to internal, by using the <span class=\"sql-docs-inline-code\">ALTER\n        TABLE</span>  statement:\n<div class=\"sql-docs-code-block\">-- Switch a table from internal to external.<br/>ALTER TABLE <span class=\"sql-docs-variable\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='TRUE');<br/><br/>-- Switch a table from external to internal.<br/>ALTER TABLE <span class=\"sql-docs-variable\">table_name</span> SET TBLPROPERTIES('EXTERNAL'='FALSE');<br/></div></p> <p id=\"../Impala/docs/topics/impala_tables.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_tables.xml#internal_tables\"><h4>Internal Tables</h4> </a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_create_table.xml#create_table\">CREATE TABLE Statement</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_drop_table.xml#drop_table\">DROP TABLE Statement</a>, <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_alter_table.xml#alter_table\">ALTER TABLE Statement</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_describe.xml#describe\">DESCRIBE Statement</a></p> </div> </div> <div id=\"../Impala/docs/topics/impala_tables.xml_table_file_formats\"><h4>File Formats</h4> <div><p>\n        Each table has an associated file format, which determines how Impala interprets the\n        associated data files. See <span>file formats</span> for details.\n      </p> <p>\n        You set the file format during the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  statement,\n        or change it later using the <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  statement.\n        Partitioned tables can have a different file format for individual partitions,\n        allowing you to change the file format used in your ETL process for new data\n        without going back and reconverting all the existing data in the same table.\n      </p> <p>\n        Any <span class=\"sql-docs-inline-code\">INSERT</span>  statements produce new data files with the current file format of the table.\n        For existing data files, changing the file format of the table does not automatically do any data conversion.\n        You must use <span class=\"sql-docs-inline-code\">TRUNCATE TABLE</span>  or <span class=\"sql-docs-inline-code\">INSERT OVERWRITE</span>  to remove any previous data\n        files that use the old file format.\n        Then you use the <span class=\"sql-docs-inline-code\">LOAD DATA</span>  statement, <span class=\"sql-docs-inline-code\">INSERT ... SELECT</span> , or other mechanism\n        to put data files of the correct format into the table.\n      </p> <p>\n        The default file format, text, is the most flexible and easy to produce when you are just getting started with\n        Impala. The Parquet file format offers the highest query performance and uses compression to reduce storage\n        requirements; therefore, where practical, use Parquet for Impala tables with substantial amounts of data.\n        <span class=\"sql-docs-inline-code\">Also, the complex types (<span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , and <span class=\"sql-docs-inline-code\">MAP</span> )\n        available in Impala 2.3 and higher are currently only supported with the Parquet file type.</span> \n        Based on your existing ETL workflow, you might use other file formats such as Avro, possibly doing a final\n        conversion step to Parquet to take advantage of its performance for analytic queries.\n      </p> </div> </div> <div id=\"../Impala/docs/topics/impala_tables.xml_kudu_tables\"><h4>Kudu Tables</h4> <div><p>\n        Tables stored in Apache Kudu are treated specially, because Kudu manages its data independently of HDFS files.\n        Some information about the table is stored in the metastore database for use by Impala. Other table metadata is\n        managed internally by Kudu.\n      </p> <p>\n        When you create a Kudu table through Impala, it is assigned an internal Kudu table name of the form\n        <span class=\"sql-docs-inline-code\">impala::<span class=\"sql-docs-variable\">db_name</span> .<span class=\"sql-docs-variable\">table_name</span> </span> . You can see the Kudu-assigned name\n        in the output of <span class=\"sql-docs-inline-code\">DESCRIBE FORMATTED</span> , in the <span class=\"sql-docs-inline-code\">kudu.table_name</span>  field of the table properties.\n        The Kudu-assigned name remains the same even if you use <span class=\"sql-docs-inline-code\">ALTER TABLE</span>  to rename the Impala table\n        or move it to a different Impala database. If you issue the statement\n        <span class=\"sql-docs-inline-code\">ALTER TABLE <span class=\"sql-docs-variable\">impala_name</span>  SET TBLPROPERTIES('kudu.table_name' = '<span class=\"sql-docs-variable\">different_kudu_table_name</span> ')</span> ,\n        the effect is different depending on whether the Impala table was created with a regular <span class=\"sql-docs-inline-code\">CREATE TABLE</span> \n        statement (that is, if it is an internal or managed table), or if it was created with a\n        <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>  statement (and therefore is an external table). Changing the <span class=\"sql-docs-inline-code\">kudu.table_name</span> \n        property of an internal table physically renames the underlying Kudu table to match the new name.\n        Changing the <span class=\"sql-docs-inline-code\">kudu.table_name</span>  property of an external table switches which underlying Kudu table\n        the Impala table refers to; the underlying Kudu table must already exist.\n      </p> <p>\n        The following example shows what happens with both internal and external Kudu tables as the <span class=\"sql-docs-inline-code\">kudu.table_name</span> \n        property is changed. In practice, external tables are typically used to access underlying Kudu tables that were created\n        outside of Impala, that is, through the Kudu API.\n      </p> <div class=\"sql-docs-code-block\">-- This is an internal table that we will create and then rename.<br/>create table old_name (id bigint primary key, s string)<br/>  partition by hash(id) partitions 2 stored as kudu;<br/><br/>-- Initially, the name OLD_NAME is the same on the Impala and Kudu sides.<br/>describe formatted old_name;<br/>...<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/old_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.old_name<br/><br/>-- ALTER TABLE RENAME TO changes the Impala name but not the underlying Kudu name.<br/>alter table old_name rename to new_name;<br/><br/>describe formatted new_name;<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/new_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.old_name<br/><br/>-- Setting TBLPROPERTIES changes the underlying Kudu name.<br/>alter table new_name<br/>  set tblproperties('kudu.table_name' = 'impala::user.new_name');<br/><br/>describe formatted new_name;<br/>| Location:          | hdfs://host.example.com:8020/path/user.db/new_name<br/>| Table Type:        | MANAGED_TABLE         | NULL<br/>| Table Parameters:  | NULL                  | NULL<br/>|                    | DO_NOT_UPDATE_STATS   | true<br/>|                    | kudu.master_addresses | vd0342.example.com<br/>|                    | kudu.table_name       | impala::user.new_name<br/><br/>-- Put some data in the table to demonstrate how external tables can map to<br/>-- different underlying Kudu tables.<br/>insert into new_name values (0, 'zero'), (1, 'one'), (2, 'two');<br/><br/>-- This external table points to the same underlying Kudu table, NEW_NAME,<br/>-- as we created above. No need to declare columns or other table aspects.<br/>create external table kudu_table_alias stored as kudu<br/>  tblproperties('kudu.table_name' = 'impala::user.new_name');<br/><br/>-- The external table can fetch data from the NEW_NAME table that already<br/>-- existed and already had data.<br/>select * from kudu_table_alias limit 100;<br/>+----+------+<br/>| id | s    |<br/>+----+------+<br/>| 1  | one  |<br/>| 0  | zero |<br/>| 2  | two  |<br/>+----+------+<br/><br/>-- We cannot re-point the external table at a different underlying Kudu table<br/>-- unless that other underlying Kudu table already exists.<br/>alter table kudu_table_alias<br/>  set tblproperties('kudu.table_name' = 'impala::user.yet_another_name');<br/>ERROR:<br/>TableLoadingException: Error opening Kudu table 'impala::user.yet_another_name',<br/>  Kudu error: The table does not exist: table_name: \"impala::user.yet_another_name\"<br/><br/>-- Once the underlying Kudu table exists, we can re-point the external table to it.<br/>create table yet_another_name (id bigint primary key, x int, y int, s string)<br/>  partition by hash(id) partitions 2 stored as kudu;<br/><br/>alter table kudu_table_alias<br/>  set tblproperties('kudu.table_name' = 'impala::user.yet_another_name');<br/><br/>-- Now no data is returned because this other table is empty.<br/>select * from kudu_table_alias limit 100;<br/><br/>-- The Impala table automatically recognizes the table schema of the new table,<br/>-- for example the extra X and Y columns not present in the original table.<br/>describe kudu_table_alias;<br/>+------+--------+---------+-------------+----------+...<br/>| name | type   | comment | primary_key | nullable |...<br/>+------+--------+---------+-------------+----------+...<br/>| id   | bigint |         | true        | false    |...<br/>| x    | int    |         | false       | true     |...<br/>| y    | int    |         | false       | true     |...<br/>| s    | string |         | false       | true     |...<br/>+------+--------+---------+-------------+----------+...<br/></div><p>\n        The <span class=\"sql-docs-inline-code\">SHOW TABLE STATS</span>  output for a Kudu table shows Kudu-specific details about the layout of the table.\n        Instead of information about the number and sizes of files, the information is divided by the Kudu tablets.\n        For each tablet, the output includes the fields\n        <span class=\"sql-docs-inline-code\"># Rows</span>  (although this number is not currently computed), <span class=\"sql-docs-inline-code\">Start Key</span> , <span class=\"sql-docs-inline-code\">Stop Key</span> , <span class=\"sql-docs-inline-code\">Leader Replica</span> , and <span class=\"sql-docs-inline-code\"># Replicas</span> .\n        The output of <span class=\"sql-docs-inline-code\">SHOW COLUMN STATS</span> , illustrating the distribution of values within each column, is the same for Kudu tables\n        as for HDFS-backed tables.\n      </p> <p id=\"../Impala/docs/topics/impala_tables.xml_kudu_internal_external_tables\">\n        The distinction between internal and external tables has some special\n        details for Kudu tables. Tables created entirely through Impala are\n        internal tables. The table name as represented within Kudu includes\n        notation such as an <span class=\"sql-docs-inline-code\">impala::</span>  prefix and the Impala\n        database name. External Kudu tables are those created by a non-Impala\n        mechanism, such as a user application calling the Kudu APIs. For\n        these tables, the <span class=\"sql-docs-inline-code\">CREATE EXTERNAL TABLE</span>  syntax lets\n        you establish a mapping from Impala to the existing Kudu table:\n<div class=\"sql-docs-code-block\">CREATE EXTERNAL TABLE impala_name STORED AS KUDU<br/>  TBLPROPERTIES('kudu.table_name' = 'original_kudu_name');<br/></div>\n        External Kudu tables differ in one important way from other external\n        tables: adding or dropping a column or range partition changes the\n        data in the underlying Kudu table, in contrast to an HDFS-backed\n        external table where existing data files are left untouched.\n      </p> </div> </div> ","title":"Overview of Impala Tables"}