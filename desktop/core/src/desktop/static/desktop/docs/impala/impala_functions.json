{"body":"<div><p>\n      Impala supports several categories of built-in functions. These functions let you perform mathematical\n      calculations, string manipulation, date calculations, and other kinds of data transformations directly in\n      <span class=\"sql-docs-inline-code\">SELECT</span> statements. The built-in functions let a SQL query return results with all\n      formatting, calculating, and type conversions applied, rather than performing time-consuming postprocessing\n      in another application. By applying function calls where practical, you can make a SQL query that is as\n      convenient as an expression in a procedural programming language or a formula in a spreadsheet.\n    </p><p>\n      The categories of functions supported by Impala are:\n    </p><ul><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_math_functions.xml#math_functions\">Impala Mathematical Functions</a></li><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_conversion_functions.xml#conversion_functions\">Impala Type Conversion Functions</a></li><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_datetime_functions.xml#datetime_functions\">Impala Date and Time Functions</a></li><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_conditional_functions.xml#conditional_functions\">Impala Conditional Functions</a></li><li><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_string_functions.xml#string_functions\">Impala String Functions</a></li><li>\n        Aggregation functions, explained in <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_aggregate_functions.xml#aggregate_functions\">Impala Aggregate Functions</a>.\n      </li></ul><p>\n      You call any of these functions through the <span class=\"sql-docs-inline-code\">SELECT</span> statement. For most functions, you can\n      omit the <span class=\"sql-docs-inline-code\">FROM</span> clause and supply literal values for any required arguments:\n    </p><div class=\"sql-docs-code-block\">select abs(-1);<br/>+---------+<br/>| abs(-1) |<br/>+---------+<br/>| 1       |<br/>+---------+<br/><br/>select concat('The rain ', 'in Spain');<br/>+---------------------------------+<br/>| concat('the rain ', 'in spain') |<br/>+---------------------------------+<br/>| The rain in Spain               |<br/>+---------------------------------+<br/><br/>select power(2,5);<br/>+-------------+<br/>| power(2, 5) |<br/>+-------------+<br/>| 32          |<br/>+-------------+<br/></div><p>\n      When you use a <span class=\"sql-docs-inline-code\">FROM</span> clause and specify a column name as a function argument, the function is\n      applied for each item in the result set:\n    </p><div class=\"sql-docs-code-block\">select concat('Country = ',country_code) from all_countries where population > 100000000;<br/>select round(price) as dollar_value from product_catalog where price between 0.0 and 100.0;<br/></div><p>\n      Typically, if any argument to a built-in function is <span class=\"sql-docs-inline-code\">NULL</span>, the result value is also\n      <span class=\"sql-docs-inline-code\">NULL</span>:\n    </p><div class=\"sql-docs-code-block\">select cos(null);<br/>+-----------+<br/>| cos(null) |<br/>+-----------+<br/>| NULL      |<br/>+-----------+<br/><br/>select power(2,null);<br/>+----------------+<br/>| power(2, null) |<br/>+----------------+<br/>| NULL           |<br/>+----------------+<br/><br/>select concat('a',null,'b');<br/>+------------------------+<br/>| concat('a', null, 'b') |<br/>+------------------------+<br/>| NULL                   |<br/>+------------------------+<br/></div><p id=\"../Impala/docs/topics/impala_functions.xml_aggr1\">\n        Aggregate functions are a special category with different rules. These functions calculate a return value\n        across all the items in a result set, so they require a <span class=\"sql-docs-inline-code\">FROM</span> clause in the query:\n      </p><div id=\"../Impala/docs/topics/impala_functions.xml_aggr2\" class=\"sql-docs-code-block\">select count(product_id) from product_catalog;<br/>select max(height), avg(height) from census_data where age > 20;<br/></div><p id=\"../Impala/docs/topics/impala_functions.xml_aggr3\">\n        Aggregate functions also ignore <span class=\"sql-docs-inline-code\">NULL</span> values rather than returning a <span class=\"sql-docs-inline-code\">NULL</span>\n        result. For example, if some rows have <span class=\"sql-docs-inline-code\">NULL</span> for a particular column, those rows are\n        ignored when computing the <span class=\"sql-docs-inline-code\">AVG()</span> for that column. Likewise, specifying\n        <span class=\"sql-docs-inline-code\">COUNT(<span class=\"sql-docs-variable\">col_name</span>)</span> in a query counts only those rows where\n        <span class=\"sql-docs-variable\">col_name</span> contains a non-<span class=\"sql-docs-inline-code\">NULL</span> value.\n      </p><p>\n      Aggregate functions are a special category with different rules. These functions calculate a return value\n      across all the items in a result set, so they do require a <span class=\"sql-docs-inline-code\">FROM</span> clause in the query:\n    </p><div class=\"sql-docs-code-block\">select count(product_id) from product_catalog;<br/>select max(height), avg(height) from census_data where age > 20;<br/></div><p>\n      Aggregate functions also ignore <span class=\"sql-docs-inline-code\">NULL</span> values rather than returning a <span class=\"sql-docs-inline-code\">NULL</span>\n      result. For example, if some rows have <span class=\"sql-docs-inline-code\">NULL</span> for a particular column, those rows are ignored\n      when computing the AVG() for that column. Likewise, specifying <span class=\"sql-docs-inline-code\">COUNT(col_name)</span> in a query\n      counts only those rows where <span class=\"sql-docs-inline-code\">col_name</span> contains a non-<span class=\"sql-docs-inline-code\">NULL</span> value.\n    </p><p>\n      Analytic functions are a variation on aggregate functions. Instead of returning a single value, or an\n      identical value for each group of rows, they can compute values that vary based on a <q>window</q> consisting\n      of other rows around them in the result set.\n    </p></div>","title":"Impala Built-In Functions"}