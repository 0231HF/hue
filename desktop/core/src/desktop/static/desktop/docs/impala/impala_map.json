{"body":"<div><p>\n        A complex data type representing an arbitrary set of key-value pairs.\n        The key part is a scalar type, while the value part can be a scalar or\n        another complex type (<span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> ,\n        or <span class=\"sql-docs-inline-code\">MAP</span> ).\n      </p> <p id=\"../Impala/docs/topics/impala_map.xml_syntax_blurb\"><b>Syntax:</b> </p> <div class=\"sql-docs-code-block\"><span class=\"sql-docs-variable\">column_name</span> MAP < <span class=\"sql-docs-variable\">primitive_type</span> , <span class=\"sql-docs-variable\">type</span> ><br/><br/>type ::= <span class=\"sql-docs-variable\">primitive_type</span> | <span class=\"sql-docs-variable\">complex_type</span> </div><p id=\"../Impala/docs/topics/impala_map.xml_usage_notes_blurb\"><b>Usage notes:</b> </p> <p id=\"../Impala/docs/topics/impala_map.xml_complex_types_combo\">\n        Because complex types are often used in combination,\n        for example an <span class=\"sql-docs-inline-code\">ARRAY</span>  of <span class=\"sql-docs-inline-code\">STRUCT</span> \n        elements, if you are unfamiliar with the Impala complex types,\n        start with <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a> for\n        background information and usage examples.\n      </p> <p>\n        The <span class=\"sql-docs-inline-code\">MAP</span>  complex data type represents a set of key-value pairs.\n        Each element of the map is indexed by a primitive type such as <span class=\"sql-docs-inline-code\">BIGINT</span>  or\n        <span class=\"sql-docs-inline-code\">STRING</span> , letting you define sequences that are not continuous or categories with arbitrary names.\n        You might find it convenient for modelling data produced in other languages, such as a\n        Python dictionary or Java HashMap, where a single scalar value serves as the lookup key.\n      </p> <p>\n        In a big data context, the keys in a map column might represent a numeric sequence of events during a\n        manufacturing process, or <span class=\"sql-docs-inline-code\">TIMESTAMP</span>  values corresponding to sensor observations.\n        The map itself is inherently unordered, so you choose whether to make the key values significant\n        (such as a recorded <span class=\"sql-docs-inline-code\">TIMESTAMP</span> ) or synthetic (such as a random global universal ID).\n      </p> <div class=\"sql-docs-note\">\n        Behind the scenes, the <span class=\"sql-docs-inline-code\">MAP</span>  type is implemented in a similar way as the\n        <span class=\"sql-docs-inline-code\">ARRAY</span>  type. Impala does not enforce any uniqueness constraint on the\n        <span class=\"sql-docs-inline-code\">KEY</span>  values, and the <span class=\"sql-docs-inline-code\">KEY</span>  values are processed by\n        looping through the elements of the <span class=\"sql-docs-inline-code\">MAP</span>  rather than by a constant-time lookup.\n        Therefore, this type is primarily for ease of understanding when importing data and\n        algorithms from non-SQL contexts, rather than optimizing the performance of key lookups.\n      </div> <p id=\"../Impala/docs/topics/impala_map.xml_complex_types_describe\">\n        You can pass a multi-part qualified name to <span class=\"sql-docs-inline-code\">DESCRIBE</span> \n        to specify an <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">STRUCT</span> , or <span class=\"sql-docs-inline-code\">MAP</span> \n        column and visualize its structure as if it were a table.\n        For example, if table <span class=\"sql-docs-inline-code\">T1</span>  contains an <span class=\"sql-docs-inline-code\">ARRAY</span>  column\n        <span class=\"sql-docs-inline-code\">A1</span> , you could issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE t1.a1</span> .\n        If table <span class=\"sql-docs-inline-code\">T1</span>  contained a <span class=\"sql-docs-inline-code\">STRUCT</span>  column <span class=\"sql-docs-inline-code\">S1</span> ,\n        and a field <span class=\"sql-docs-inline-code\">F1</span>  within the <span class=\"sql-docs-inline-code\">STRUCT</span>  was a <span class=\"sql-docs-inline-code\">MAP</span> ,\n        you could issue the statement <span class=\"sql-docs-inline-code\">DESCRIBE t1.s1.f1</span> .\n        An <span class=\"sql-docs-inline-code\">ARRAY</span>  is shown as a two-column table, with\n        <span class=\"sql-docs-inline-code\">ITEM</span>  and <span class=\"sql-docs-inline-code\">POS</span>  columns.\n        A <span class=\"sql-docs-inline-code\">STRUCT</span>  is shown as a table with each field\n        representing a column in the table.\n        A <span class=\"sql-docs-inline-code\">MAP</span>  is shown as a two-column table, with\n        <span class=\"sql-docs-inline-code\">KEY</span>  and <span class=\"sql-docs-inline-code\">VALUE</span>  columns.\n      </p> <p id=\"../Impala/docs/topics/impala_map.xml_added_in_230\"><b>Added in:</b> Impala 2.3.0</p> <p id=\"../Impala/docs/topics/impala_map.xml_restrictions_blurb\"><b>Restrictions:</b> </p> <ul></ul> <p id=\"../Impala/docs/topics/impala_map.xml_kudu_blurb\"><b>Kudu considerations:</b> </p> <p id=\"../Impala/docs/topics/impala_map.xml_kudu_unsupported_data_type\">\n        Currently, the data types <span class=\"sql-docs-inline-code\">CHAR</span> , <span class=\"sql-docs-inline-code\">VARCHAR</span> ,\n        <span class=\"sql-docs-inline-code\">ARRAY</span> , <span class=\"sql-docs-inline-code\">MAP</span> , and <span class=\"sql-docs-inline-code\">STRUCT</span>  cannot be used with Kudu tables.\n      </p> <p id=\"../Impala/docs/topics/impala_map.xml_example_blurb\"><b>Examples:</b> </p> <div id=\"../Impala/docs/topics/impala_map.xml_complex_type_schema_pointer\" class=\"sql-docs-note\">\n      Many of the complex type examples refer to tables\n      such as <span class=\"sql-docs-inline-code\">CUSTOMER</span>  and <span class=\"sql-docs-inline-code\">REGION</span> \n      adapted from the tables used in the TPC-H benchmark.\n      See <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_sample_schema\"><h4>Sample Schema and Data for Experimenting with Impala Complex Types</h4> </a>\n      for the table definitions.\n      </div> <p>\n        The following example shows a table with various kinds of <span class=\"sql-docs-inline-code\">MAP</span>  columns,\n        both at the top level and nested within other complex types.\n        Each row represents information about a specific country, with complex type fields\n        of various levels of nesting to represent different information associated\n        with the country: factual measurements such as area and population,\n        notable people in different categories, geographic features such as\n        cities, points of interest within each city, and mountains with associated facts.\n        Practice the <span class=\"sql-docs-inline-code\">CREATE TABLE</span>  and query notation for complex type columns\n        using empty tables, until you can visualize a complex data structure and construct corresponding SQL statements reliably.\n      </p> <div class=\"sql-docs-code-block\"></div><div class=\"sql-docs-code-block\"></div><p>\n        The following example shows a table that uses a variety of data types for the <span class=\"sql-docs-inline-code\">MAP</span> <q>key</q>  field. Typically, you use <span class=\"sql-docs-inline-code\">BIGINT</span>  or <span class=\"sql-docs-inline-code\">STRING</span>  to use\n        numeric or character-based keys without worrying about exceeding any size or length constraints.\n      </p> <div class=\"sql-docs-code-block\"></div><div class=\"sql-docs-code-block\">CREATE TABLE celebrities (name STRING, birth_year MAP < STRING, SMALLINT >) STORED AS PARQUET;<br/>-- A typical row might represent values with 2 different birth years, such as:<br/>-- (\"Joe Movie Star\", { \"real\": 1972, \"claimed\": 1977 })<br/><br/>CREATE TABLE countries (name STRING, famous_leaders MAP < INT, STRING >) STORED AS PARQUET;<br/>-- A typical row might represent values with different leaders, with key values corresponding to their numeric sequence, such as:<br/>-- (\"United States\", { 1: \"George Washington\", 3: \"Thomas Jefferson\", 16: \"Abraham Lincoln\" })<br/><br/>CREATE TABLE airlines (name STRING, special_meals MAP < STRING, MAP < STRING, STRING > >) STORED AS PARQUET;<br/>-- A typical row might represent values with multiple kinds of meals, each with several components:<br/>-- (\"Elegant Airlines\",<br/>--   {<br/>--     \"vegetarian\": { \"breakfast\": \"pancakes\", \"snack\": \"cookies\", \"dinner\": \"rice pilaf\" },<br/>--     \"gluten free\": { \"breakfast\": \"oatmeal\", \"snack\": \"fruit\", \"dinner\": \"chicken\" }<br/>--   } )<br/></div><p id=\"../Impala/docs/topics/impala_map.xml_related_info\"><b>Related information:</b> </p> <p><a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_complex_types.xml#complex_types\">Complex Types (Impala 2.3 or higher only)</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_array.xml#array\">ARRAY Complex Type (Impala 2.3 or higher only)</a>,\n        <a href=\"javascript: void(0);\" class=\"lang-ref-link\" data-target=\"topics/impala_struct.xml#struct\">STRUCT Complex Type (Impala 2.3 or higher only)</a></p> </div> ","title":"MAP Complex Type (Impala 2.3 or higher only)"}